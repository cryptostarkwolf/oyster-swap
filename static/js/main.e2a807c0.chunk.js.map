{"version":3,"sources":["components/identicon/index.tsx","components/accountInfo.tsx","components/appBar.tsx","components/numericInput.tsx","components/slippage/index.tsx","components/settings.tsx","components/tokenIcon/index.tsx","models/airdrops.ts","models/marketOverrides.ts","context/market.tsx","components/pool/address.tsx","components/pool/supplyOverview.tsx","components/currencyInput/index.tsx","components/pool/config.tsx","utils/currencyPair.tsx","components/labels.tsx","components/pool/add.tsx","components/pool/remove.tsx","components/charts/historical.tsx","components/pool/card.tsx","components/pool/quickView.tsx","components/migration/index.tsx","components/charts/index.tsx","components/pool/view.tsx","components/trade/index.tsx","components/exchange.tsx","routes.tsx","App.tsx","serviceWorker.ts","index.tsx","utils/utils.ts","components/explorerLink.tsx","utils/accounts.tsx","models/pool.ts","utils/eventEmitter.ts","utils/ids.tsx","utils/connection.tsx","models/tokenSwap.ts","utils/pools.tsx","models/index.ts","utils/notifications.tsx","utils/solong_adapter.tsx","utils/wallet.tsx"],"names":["Identicon","props","address","style","ref","useRef","useEffect","current","innerHTML","className","appendChild","Jazzicon","width","parseInt","bs58","decode","toString","slice","AccountInfo","wallet","useWallet","account","useNativeAccount","publicKey","lamports","LAMPORTS_PER_SOL","toFixed","shortenAddress","toBase58","marginLeft","AppBar","connected","location","useLocation","history","useHistory","mode","selectedKeys","pathname","Item","key","to","href","target","rel","left","type","size","onClick","push","disconnect","connect","color","placement","title","trigger","right","NumericInput","onChange","e","value","test","onBlur","valueTemp","charAt","length","startsWith","replace","this","maxLength","React","Component","Slippage","useSlippageConfig","slippage","setSlippage","slippagePct","useState","setValue","itemStyle","margin","display","flexDirection","alignItems","map","item","val","padding","border","placeholder","fontSize","boxShadow","borderColor","outline","x","newValue","parseFloat","Number","isFinite","Settings","providerUrl","setProvider","useConnectionConfig","endpoint","setEndpoint","onSelect","marginRight","ENDPOINTS","name","Option","WALLET_PROVIDERS","url","TokenIcon","tokenMap","icon","getTokenIcon","mintAddress","alt","height","src","marginTop","borderRadius","backgroundColor","backgroundClip","alignSelf","PoolIcon","mintA","mintB","POOLS_WITH_AIRDROP","MINT_TO_MARKET","INITAL_LIQUIDITY_DATE","Date","MarketsContext","createContext","marketEmitter","EventEmitter","MarketProvider","children","pools","useCachedPool","accountsToObserve","useMemo","Map","dailyVolume","setDailyVolume","connection","Connection","marketByMint","Set","p","pubkeys","holdingMints","flat","values","reduce","acc","SERUM_TOKEN","TOKEN_MINTS","find","a","marketAddress","marketName","marketInfo","MARKETS","m","set","timer","bonfidaTimer","updateData","refreshAccounts","keys","raiseMarketUpdated","window","setTimeout","bonfidaQuery","fetch","resp","json","data","pool_identifier","reverseSerumMarketCache","forEach","mint","get","allMarkets","getMultipleAccounts","filter","undefined","cache","then","array","index","market","programId","id","add","decoded","Market","getLayout","details","pubkey","info","registerParser","baseMint","MintParser","quoteMint","bids","OrderBookParser","asks","toQuery","initalQuery","clearTimeout","midPriceInUSD","useCallback","getMidPrice","subscribeToMarket","bid","ask","delete","Provider","useEnrichedPools","context","useContext","enriched","setEnriched","marketsByMint","subscriptions","update","poolData","TODAY","mints","sort","getMint","account0","getAccount","holdingAccounts","account1","accountA","accountB","baseMid","baseReserveUSD","convert","quoteReserveUSD","poolMint","supply","eqn","airdropYield","poolWithAirdrop","drop","pool","equals","airdrops","midPrice","amount","calculateAirdropYield","volume","volume24h","volume24hA","fees24h","LIQUIDITY_PROVIDER_FEE","SERUM_FEE","fees","apy","apy24h","feeAccount","ownedPct","toNumber","baseVolume","quoteVolume","daysSinceInception","Math","floor","getTime","apy0","apy1","max","lpMint","getPoolName","link","names","getTokenName","accounts","liquidityA","liquidityAinUsd","liquidityB","liquidityBinUsd","pow","decimals","liquidity","extra","raw","createEnrichedPools","dispose","onMarket","Orderbook","LAYOUT","STABLE_COINS","has","decodedMarket","baseMintDecimals","quoteMintDecimals","bidsBook","accountFlags","slab","asksBook","bestBid","getL2","bestAsk","PublicKey","Address","label","span","code","shape","CopyOutlined","navigator","clipboard","writeText","PoolAddress","AccountsAddress","aName","bName","account2","mint1","mint2","AdressesPopover","content","showLabel","InfoCircleOutlined","SupplyOverview","chartDiv","div","instance","echarts","getInstanceByDom","init","tokens","setOption","tooltip","formatter","params","formatUSD","format","tokenAmount","formatNumber","series","top","bottom","animation","show","rich","c","lineHeight","align","r","normal","Select","TokenDisplay","showBalance","tokenMint","useMint","tokenAccount","useAccountByMint","balance","hasBalance","justifyContent","CurrencyInput","userAccounts","useUserAccounts","renderPopularTokens","tokenSymbol","grouppedUserAccounts","b","isKnownMint","concat","additionalAccounts","findIndex","t","renderAdditionalTokens","list","sorted","userUiBalance","currentAccount","bodyStyle","onInputChange","hideSelect","showSearch","minWidth","onMintChange","filterOption","input","option","toLowerCase","indexOf","PoolCurrencyInput","FeeInput","numerator","denominator","DEFAULT_DENOMINATOR","PriceParameters","setOptions","options","token_b_price","PoolConfigCard","tradeFeeNumerator","tradeFeeDenominator","ownerTradeFeeNumerator","ownerTradeFeeDenominator","ownerWithdrawFeeNumerator","ownerWithdrawFeeDenominator","feesInput","ENABLE_FEES_INPUT","defaultValue","curveType","CurveType","ConstantProduct","ConstantPrice","ConstantProductWithOffset","action","CurrencyPairContext","useCurrencyLeg","config","defaultMint","setAmount","setMintAddress","setMint","convertAmount","sufficientBalance","CurrencyPairProvider","useConnection","lastTypedAccount","setLastTypedAccount","PoolOperation","Add","poolOperation","setPoolOperation","hostFeeNumerator","hostFeeDenominator","base","mintAddressA","setMintAddressA","amountA","setAmountA","quote","mintAddressB","setMintAddressB","amountB","setAmountB","usePoolForBasket","document","search","defaultBase","defaultQuote","nameToToken","pair","URLSearchParams","items","split","isValidAddress","getDefaultTokens","calculateDependent","independent","setDependent","calculateDependentAmount","result","A","B","useCurrencyPairState","INSUFFICIENT_FUNDS_LABEL","tokenName","generateActionLabel","ignoreToBalance","antIcon","LoadingOutlined","spin","AddToLiquidity","pendingTx","setPendingTx","depositType","setDepositType","depositToken","setDepositToken","isLatestLayout","programIds","swapLayout","TokenSwapLayout","executeAction","currentDepositToken","getDepositToken","components","addLiquidity","catch","console","log","notify","description","message","token_b_offset","hasSufficientBalance","createPoolButton","disabled","indicator","addLiquidityButton","Button","overlay","token","generateExactOneLabel","Group","handleToggleDepositType","getTokenOptions","dToken","PoolPrice","ratio","f","formatPriceNumber","YourPosition","baseMintAddress","quoteMintAddress","RemoveLiquidity","removeRatio","withdrawType","withdrawToken","liquidityAmount","onRemove","removeExactOneLiquidity","removeLiquidity","generateRemoveLabel","RemoveLiquidityEntry","inputType","setInputType","setWithdrawType","setWithdrawToken","lastTyped","liquidityPercentage","inputInfo","setInputInfo","poolAmount","tokenA","tokenAAmount","tokenB","tokenBAmount","inputsDescription","setInputsDescription","handleInputChange","inputSource","Text","tipFormatter","min","handleToggleWithdrawType","API_ENDPOINTS","PoolLineChart","memo","apiUrl","api","limit","chartName","echartsRef","loading","setLoading","apiFilter","bonfidaDataChartQuery","finalData","updateChart","textStyle","axisPointer","grid","containLabel","xAxis","inverse","getComputedTime","yAxis","scale","splitLine","getComputedData","tip","Title","level","HistoricalVolume","d","formatShortDate","time","HistoricalLiquidity","groupByTime","groupedData","Object","Typography","PoolCard","displayMode","setDisplayMode","small","userInfo","AlignLeftOutlined","LineChartOutlined","formatPct","PoolItem","poolContribution","contributionInUSD","poolDetails","feesInUSD","isFeeAccount","PoolAccounts","useOwnedPools","legacy","userPools","renderEmpty","image","Empty","PRESENTED_IMAGE_SIMPLE","MigrationModal","visible","setVisable","ack","setAck","executing","setExecuting","completed","setCompleted","activePools","legacyOwned","poolsToMigrate","fromPool","toPool","handleOk","i","queryMint","queryAccount","baseAccount","quoteAccount","ownershipRatio","baseAmount","quoteAmount","toAccounts","reverse","handleCancel","onOk","onCancel","closable","footer","Search","Input","FlashText","activeClass","setActiveClass","text","ChartsView","setSearch","totals","setTotals","usePools","useLocalStorageState","infoDisplayType","setInfoDisplayType","searchRegex","RegExp","breadcrumb","row","path","columns","dataIndex","render","record","textAlign","sorter","defaultSortOrder","fontFamily","SettingOutlined","onSearch","TableOutlined","OneToOneOutlined","gutter","dataSource","pagination","pageSize","PoolOverview","owned","o","TradeEntry","handleSwap","swap","SwapGivenInput","tempMint","tempAmount","op","SwapGivenProceeds","TradeInfo","amountOut","setAmountOut","priceImpact","setPriceImpact","lpFee","setLpFee","exchangeRate","setExchangeRate","priceAccount","setPriceAccount","minAmountOut","supplyRatio","enrichedA","enrichedB","calculatedRatio","abs","lpFeeStr","SwapOutlined","QuestionCircleOutlined","colorWarning","ExchangeView","tabStyle","tabList","tab","activeTab","headStyle","position","tabProps","tabBarGutter","activeTabKey","onTabChange","handleTabChange","Routes","basename","exact","component","App","data-color-scheme","data-icon","data-size","data-show-count","aria-label","Boolean","hostname","match","ReactDOM","StrictMode","getElementById","serviceWorker","ready","registration","unregister","error","defaultState","storedState","localStorage","getItem","JSON","parse","state","setState","setLocalStorageState","newState","removeItem","setItem","stringify","chars","shorten","knownSymbol","substring","join","chunks","Array","apply","ceil","_","rate","precision","Intl","NumberFormat","currency","minimumFractionDigits","maximumFractionDigits","DateTimeFormat","day","month","valueCheckpoints","defaultIndex","colorCodes","closest","first","POSITIVE_INFINITY","second","ExplorerLink","AccountsContext","accountEmitter","pendingMintCalls","mintCache","pendingAccountCalls","accountsCache","pendingCalls","genericCache","getAccountInfo","pubKey","Error","tokenAccountFactory","getMintInfo","Buffer","from","deserializeMint","buffer","keyToAccountParser","query","parser","obj","deserialize","addAccount","deleteAccount","raiseAccountUpdated","addMint","getCachedAccount","predicate","deserializeAccount","wrapNativeAccount","WRAPPED_SOL_MINT","owner","u64","delegate","delegatedAmount","isInitialized","isFrozen","isNative","rentExemptReserve","closeAuthority","PRECACHED_OWNERS","precacheUserTokenAccounts","getTokenAccountsByOwner","AccountsProvider","tokenAccounts","setTokenAccounts","setUserAccounts","nativeAccount","setNativeAccount","onAccountChange","UseNativeAccount","selectUserAccounts","SWAP_HOST_FEE_ADDRESS","onAccount","tokenSubID","onProgramAccountChange","accountId","accountInfo","AccountLayout","MintLayout","removeProgramAccountChangeListener","commitment","Promise","all","chunk","getMultipleAccountsCore","rest","args","_buildArgs","_rpcRequest","unsafeRes","err","allPools","fromBuffer","delegateOption","isNativeOption","closeAuthorityOption","mintInfo","mintAuthorityOption","mintAuthority","freezeAuthorityOption","freezeAuthority","AccountUpdateEvent","MarketUpdateEvent","ids","emitter","Emitter","callback","on","removeListener","emit","SWAP_PROGRAM_ID","SWAP_PROGRAM_LEGACY_IDS","SWAP_PROGRAM_LAYOUT","TOKEN_PROGRAM_ID","SWAP_PROGRAM_OWNER_FEE_ADDRESS","process","debug","PROGRAM_IDS","layout","TokenSwapLayoutV1","setProgramIds","envName","env","swap_legacy","clusterApiUrl","DEFAULT","ConnectionContext","sendConnection","ConnectionProvider","end","setTokens","setTokenMap","res","knownMints","Account","removeAccountChangeListener","onSlotChange","removeSlotChangeListener","getErrorForTransaction","txid","confirmTransaction","getParsedConfirmedTransaction","tx","errors","meta","logMessages","regex","exec","lastIndex","sendTransaction","instructions","signers","awaitConfirmation","transaction","Transaction","instruction","getRecentBlockhash","recentBlockhash","blockhash","setSigners","s","partialSign","signTransaction","rawTransaction","serialize","skipPreflight","sendRawTransaction","status","property","BufferLayout","uint64","FEE_LAYOUT","TokenSwapLayoutLegacyV0","CURVE_NODE","addVariant","createInitSwapInstruction","tokenSwapAccount","authority","tokenAccountA","tokenAccountB","tokenPool","destinationAccount","tokenProgramId","swapProgramId","nonce","isSigner","isWritable","alloc","fields","commandDataLayout","encodeLength","encode","TransactionInstruction","depositInstruction","tokenSwap","sourceA","sourceB","intoA","intoB","poolToken","poolAccount","poolTokenAmount","maximumTokenA","maximumTokenB","dataLayout","Numberu64","toBuffer","depositExactOneInstruction","source","sourceTokenAmount","minimumPoolTokenAmount","withdrawInstruction","sourcePoolAccount","fromA","fromB","userAccountA","userAccountB","minimumTokenA","minimumTokenB","withdrawExactOneInstruction","userAccount","maximumTokenAmount","swapInstruction","userSource","poolSource","poolDestination","userDestination","amountIn","minimumAmountOut","programOwner","minAmount0","minAmount1","cleanupInstructions","getMinimumBalanceForRentExemption","accountRentExempt","findOrCreateAccountByMint","Token","createApproveInstruction","program","createCloseAccountInstruction","liquidityMaxAmount","SLIPPAGE","tokenMatchAccount","toAccount","holdingA","holdingB","fromAccount","getWrappedAccount","hostFeeAccount","_addLiquidityExactOneExistingPool","_addLiquidityNewPool","_addLiquidityExistingPool","getHoldings","toPoolInfo","setPools","queryPools","swapId","isLegacy","poolsArray","getProgramAccounts","TokenSwapLayoutV0","holdings","h","leg","subID","updated","filtered","setPool","sortedMints","matchingPool","every","ownedPools","reserve0","reserve1","amount0","amount1","fromKeyA","fromKeyB","reserve","liquidityToken","fromKey","payer","excluded","accountToFind","isWrappedSol","newToAccount","createSplAccount","estimateProceedsFromInput","inputQuantityInPool","proceedsQuantityInPool","inputAmount","estimateInputFromProceeds","proceedsAmount","offsetAmount","offsetCurve","curve","offset","isFirstIndependent","depPrecision","indPrecision","indAdjustedAmount","indBasketQuantity","depBasketQuantity","constantPrice","depAdjustedAmount","some","liquidityTokenMint","SystemProgram","fromPubkey","newAccountPubkey","space","createAccount","findProgramAddress","createInitMintInstruction","mintPublicKey","depositorAccount","createTransferInstruction","toCheck","createInitAccountInstruction","notification","opacity","SolongAdapter","network","_publicKey","_onProcess","bind","solong","selectAccount","finally","WalletContext","WalletProvider","setProviderUrl","Wallet","setConnected","walletPublicKey","keyToDisplay","providerName"],"mappings":"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","file":"static/js/main.e2a807c0.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\n\nimport Jazzicon from \"jazzicon\";\nimport bs58 from \"bs58\";\nimport \"./style.less\";\n\nexport const Identicon = (props: {\n  address?: string;\n  style?: React.CSSProperties;\n  className?: string;\n}) => {\n  const { address, style } = props;\n  const ref = useRef<HTMLDivElement>();\n\n  useEffect(() => {\n    if (address && ref.current) {\n      ref.current.innerHTML = \"\";\n      ref.current.className = props.className || \"\";\n      ref.current.appendChild(\n        Jazzicon(\n          style?.width || 16,\n          parseInt(bs58.decode(address).toString(\"hex\").slice(5, 15), 16)\n        )\n      );\n    }\n  }, [address, style, props.className]);\n\n  return (\n    <div className=\"identicon-wrapper\" ref={ref as any} style={props.style} />\n  );\n};\n","import React from \"react\";\nimport { useWallet } from \"./../utils/wallet\";\nimport { shortenAddress } from \"./../utils/utils\";\nimport { Identicon } from \"./identicon\";\nimport { useNativeAccount } from \"./../utils/accounts\";\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n\nexport const AccountInfo = (props: {}) => {\n  const { wallet } = useWallet();\n  const { account } = useNativeAccount();\n\n  if (!wallet || !wallet.publicKey) {\n    return null;\n  }\n\n  return (\n    <div className=\"wallet-wrapper\">\n      <span>\n        {((account?.lamports || 0) / LAMPORTS_PER_SOL).toFixed(6)} SOL\n      </span>\n      <div className=\"wallet-key\">\n        {shortenAddress(`${wallet.publicKey}`)}\n        <Identicon\n          address={wallet.publicKey.toBase58()}\n          style={{ marginLeft: \"0.5rem\" }}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Button, Menu, Popover } from \"antd\";\nimport { useWallet } from \"../utils/wallet\";\nimport { AccountInfo } from \"./accountInfo\";\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\n\nexport const AppBar = (props: { left?: JSX.Element; right?: JSX.Element }) => {\n  const { connected, wallet } = useWallet();\n  const location = useLocation();\n  const history = useHistory();\n\n  const TopBar = (\n    <div className=\"App-Bar\">\n      <div className=\"App-Bar-left\">\n        <div className=\"App-logo\" />\n        <Menu mode=\"horizontal\" selectedKeys={[location.pathname]}>\n          <Menu.Item key=\"/\">\n            <Link\n              to={{\n                pathname: \"/\",\n              }}\n            >\n              Swap\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"/add\">\n            <Link\n              to={{\n                pathname: \"/add\",\n              }}\n            >\n              Pool\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"/info\">\n            <Link\n              to={{\n                pathname: \"/info\",\n              }}\n            >\n              Charts\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"trade\">\n            <a\n              href={\"https://serum-dex.cryptostarkwolf.com/\"}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Trade\n              <sup>↗</sup>\n            </a>\n          </Menu.Item>\n          <Menu.Item key=\"help\">\n            <a\n              href={\"https://serum-academy.com/en/serum-swap/\"}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Help\n              <sup>↗</sup>\n            </a>\n          </Menu.Item>\n        </Menu>\n        {props.left}\n      </div>\n      <div className=\"App-Bar-right\">\n        <AccountInfo />\n        {connected && (\n          <Button\n            type=\"text\"\n            size=\"large\"\n            onClick={() => history.push({ pathname: \"/pool\" })}\n          >\n            My Pools\n          </Button>\n        )}\n        <div>\n          {!connected && (\n            <Button\n              type=\"text\"\n              size=\"large\"\n              onClick={connected ? wallet.disconnect : wallet.connect}\n              style={{ color: \"#2abdd2\" }}\n            >\n              Connect\n            </Button>\n          )}\n          {connected && (\n            <Popover\n              placement=\"bottomRight\"\n              title=\"Wallet public key\"\n              trigger=\"click\"\n            ></Popover>\n          )}\n        </div>\n        {props.right}\n      </div>\n    </div>\n  );\n\n  return TopBar;\n};\n","import React from \"react\";\nimport { Input } from \"antd\";\n\nexport class NumericInput extends React.Component<any, any> {\n  onChange = (e: any) => {\n    const { value } = e.target;\n    const reg = /^-?\\d*(\\.\\d*)?$/;\n    if (reg.test(value) || value === \"\" || value === \"-\") {\n      this.props.onChange(value);\n    }\n  };\n\n  // '.' at the end or only '-' in the input box.\n  onBlur = () => {\n    const { value, onBlur, onChange } = this.props;\n    let valueTemp = value;\n    if (value.charAt(value.length - 1) === \".\" || value === \"-\") {\n      valueTemp = value.slice(0, -1);\n    }\n    if (value.startsWith(\".\") || value.startsWith(\"-.\")) {\n      valueTemp = valueTemp.replace(\".\", \"0.\");\n    }\n    onChange(valueTemp.replace(/0*(\\d+)/, \"$1\"));\n    if (onBlur) {\n      onBlur();\n    }\n  };\n\n  render() {\n    return (\n      <Input\n        {...this.props}\n        onChange={this.onChange}\n        onBlur={this.onBlur}\n        maxLength={25}\n      />\n    );\n  }\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Button } from \"antd\";\nimport { useSlippageConfig } from \"./../../utils/connection\";\nimport { NumericInput } from \"./../numericInput\";\n\nexport const Slippage = () => {\n  const { slippage, setSlippage } = useSlippageConfig();\n  const slippagePct = slippage * 100;\n  const [value, setValue] = useState(slippagePct.toString());\n\n  useEffect(() => {\n    setValue(slippagePct.toString());\n  }, [slippage, slippagePct]);\n\n  const isSelected = (val: number) => {\n    return val === slippagePct ? \"primary\" : \"default\";\n  };\n\n  const itemStyle: React.CSSProperties = {\n    margin: 5,\n  };\n\n  return (\n    <div\n      style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"center\" }}\n    >\n      {[0.1, 0.5, 1.0].map((item) => {\n        return (\n          <Button\n            key={item.toString()}\n            style={itemStyle}\n            type={isSelected(item)}\n            onClick={() => setSlippage(item / 100.0)}\n          >\n            {item}%\n          </Button>\n        );\n      })}\n      <div style={{ padding: \"3px 10px 3px 3px\", border: \"1px solid #434343\" }}>\n        <NumericInput\n          className=\"slippage-input\"\n          size=\"small\"\n          placeholder={value}\n          value={value}\n          style={{\n            width: 50,\n            fontSize: 14,\n            boxShadow: \"none\",\n            borderColor: \"transparent\",\n            outline: \"transpaernt\",\n          }}\n          onChange={(x: any) => {\n            setValue(x);\n            const newValue = parseFloat(x) / 100.0;\n            if (Number.isFinite(newValue)) {\n              setSlippage(newValue);\n            }\n          }}\n        />\n        %\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Select } from \"antd\";\nimport { ENDPOINTS, useConnectionConfig } from \"../utils/connection\";\nimport { useWallet, WALLET_PROVIDERS } from \"../utils/wallet\";\nimport { Slippage } from \"./slippage\";\n\nexport const Settings = () => {\n  const { providerUrl, setProvider } = useWallet();\n  const { endpoint, setEndpoint } = useConnectionConfig();\n\n  return (\n    <>\n      <div>\n        Transactions: Settings:\n        <div>\n          Slippage:\n          <Slippage />\n        </div>\n      </div>\n      <div style={{ display: \"grid\" }}>\n        Network:{\" \"}\n        <Select\n          onSelect={setEndpoint}\n          value={endpoint}\n          style={{ marginRight: 8 }}\n        >\n          {ENDPOINTS.map(({ name, endpoint }) => (\n            <Select.Option value={endpoint} key={endpoint}>\n              {name}\n            </Select.Option>\n          ))}\n        </Select>\n      </div>\n      <div style={{ display: \"grid\" }}>\n        Wallet:{\" \"}\n        <Select onSelect={setProvider} value={providerUrl}>\n          {WALLET_PROVIDERS.map(({ name, url }) => (\n            <Select.Option value={url} key={url}>\n              {name}\n            </Select.Option>\n          ))}\n        </Select>\n      </div>\n    </>\n  );\n};\n","import { Identicon } from \"./../identicon\";\nimport React from \"react\";\nimport { getTokenIcon } from \"../../utils/utils\";\nimport { useConnectionConfig } from \"../../utils/connection\";\n\nexport const TokenIcon = (props: {\n  mintAddress: string;\n  style?: React.CSSProperties;\n  className?: string;\n}) => {\n  const { tokenMap } = useConnectionConfig();\n  const icon = getTokenIcon(tokenMap, props.mintAddress);\n\n  if (icon) {\n    return (\n      <img\n        alt=\"Token icon\"\n        className={props.className}\n        key={props.mintAddress}\n        width=\"20\"\n        height=\"20\"\n        src={icon}\n        style={{\n          marginRight: \"0.5rem\",\n          marginTop: \"0.11rem\",\n          borderRadius: \"1rem\",\n          backgroundColor: \"white\",\n          backgroundClip: \"padding-box\",\n          ...props.style,\n        }}\n      />\n    );\n  }\n\n  return (\n    <Identicon\n      address={props.mintAddress}\n      style={{\n        marginRight: \"0.5rem\",\n        display: \"flex\",\n        alignSelf: \"center\",\n        width: 20,\n        height: 20,\n        marginTop: 2,\n        ...props.style,\n      }}\n    />\n  );\n};\n\nexport const PoolIcon = (props: {\n  mintA: string;\n  mintB: string;\n  style?: React.CSSProperties;\n  className?: string;\n}) => {\n  return (\n    <div className={props.className} style={{ display: \"flex\" }}>\n      <TokenIcon\n        mintAddress={props.mintA}\n        style={{ marginRight: \"-0.5rem\", ...props.style }}\n      />\n      <TokenIcon mintAddress={props.mintB} />\n    </div>\n  );\n};\n","import { PublicKey } from \"@solana/web3.js\";\n\ninterface PoolAirdrop {\n  pool: PublicKey;\n  airdrops: {\n    mint: PublicKey;\n    amount: number;\n  }[];\n}\n\nexport const POOLS_WITH_AIRDROP: PoolAirdrop[] = [];\n","// use to override serum market to use specifc mint\nexport const MINT_TO_MARKET: { [key: string]: string } = {};\n","import React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport { POOLS_WITH_AIRDROP } from \"./../models/airdrops\";\nimport { MINT_TO_MARKET } from \"./../models/marketOverrides\";\nimport {\n  convert,\n  getPoolName,\n  getTokenName,\n  KnownTokenMap,\n  STABLE_COINS,\n} from \"./../utils/utils\";\nimport { useConnectionConfig } from \"./../utils/connection\";\nimport {\n  cache,\n  getMultipleAccounts,\n  MintParser,\n  ParsedAccountBase,\n  useCachedPool,\n} from \"./../utils/accounts\";\nimport { Market, MARKETS, Orderbook, TOKEN_MINTS } from \"@project-serum/serum\";\nimport { AccountInfo, Connection, PublicKey } from \"@solana/web3.js\";\nimport { useMemo } from \"react\";\nimport { PoolInfo } from \"../models\";\nimport { EventEmitter } from \"./../utils/eventEmitter\";\nimport { LIQUIDITY_PROVIDER_FEE, SERUM_FEE } from \"../utils/pools\";\n\ninterface RecentPoolData {\n  pool_identifier: string;\n  volume24hA: number;\n}\n\nexport interface MarketsContextState {\n  midPriceInUSD: (mint: string) => number;\n  marketEmitter: EventEmitter;\n  accountsToObserve: Map<string, number>;\n  marketByMint: Map<string, SerumMarket>;\n\n  subscribeToMarket: (mint: string) => () => void;\n\n  dailyVolume: Map<string, RecentPoolData>;\n}\n\nconst INITAL_LIQUIDITY_DATE = new Date(\"2020-10-27\");\nconst REFRESH_INTERVAL = 30_000;\n\nexport const BONFIDA_POOL_INTERVAL = 30 * 60_000; // 30 min\n\nconst MarketsContext = React.createContext<MarketsContextState | null>(null);\n\nconst marketEmitter = new EventEmitter();\n\nexport function MarketProvider({ children = null as any }) {\n  const { endpoint } = useConnectionConfig();\n  const { pools } = useCachedPool();\n  const accountsToObserve = useMemo(() => new Map<string, number>(), []);\n  const [dailyVolume, setDailyVolume] = useState<Map<string, RecentPoolData>>(\n    new Map()\n  );\n\n  const connection = useMemo(() => new Connection(endpoint, \"recent\"), [\n    endpoint,\n  ]);\n\n  const marketByMint = useMemo(() => {\n    return [\n      ...new Set(pools.map((p) => p.pubkeys.holdingMints).flat()).values(),\n    ].reduce((acc, key) => {\n      const mintAddress = key.toBase58();\n\n      const SERUM_TOKEN = TOKEN_MINTS.find(\n        (a) => a.address.toBase58() === mintAddress\n      );\n\n      const marketAddress = MINT_TO_MARKET[mintAddress];\n      const marketName = `${SERUM_TOKEN?.name}/USDC`;\n      const marketInfo = MARKETS.find(\n        (m) => m.name === marketName || m.address.toBase58() === marketAddress\n      );\n\n      if (marketInfo) {\n        acc.set(mintAddress, {\n          marketInfo,\n        });\n      }\n\n      return acc;\n    }, new Map<string, SerumMarket>()) as Map<string, SerumMarket>;\n  }, [pools]);\n\n  useEffect(() => {\n    let timer = 0;\n    let bonfidaTimer = 0;\n\n    const updateData = async () => {\n      await refreshAccounts(connection, [...accountsToObserve.keys()]);\n      marketEmitter.raiseMarketUpdated(new Set([...marketByMint.keys()]));\n\n      timer = window.setTimeout(() => updateData(), REFRESH_INTERVAL);\n    };\n\n    const bonfidaQuery = async () => {\n      try {\n        const resp = await window.fetch(\n          \"https://serum-api.bonfida.com/pools-recent\"\n        );\n        const data = await resp.json();\n        const map = (data?.data as RecentPoolData[]).reduce((acc, item) => {\n          acc.set(item.pool_identifier, item);\n          return acc;\n        }, new Map<string, RecentPoolData>());\n\n        setDailyVolume(map);\n      } catch {\n        // ignore\n      }\n\n      bonfidaTimer = window.setTimeout(\n        () => bonfidaQuery(),\n        BONFIDA_POOL_INTERVAL\n      );\n    };\n\n    const initalQuery = async () => {\n      const reverseSerumMarketCache = new Map<string, string>();\n      [...marketByMint.keys()].forEach((mint) => {\n        const m = marketByMint.get(mint);\n        if (m) {\n          reverseSerumMarketCache.set(m.marketInfo.address.toBase58(), mint);\n        }\n      });\n\n      const allMarkets = [...marketByMint.values()].map((m) => {\n        return m.marketInfo.address.toBase58();\n      });\n\n      await getMultipleAccounts(\n        connection,\n        // only query for markets that are not in cahce\n        allMarkets.filter((a) => cache.get(a) === undefined),\n        \"single\"\n      ).then(({ keys, array }) => {\n        allMarkets.forEach(() => {});\n\n        return array.map((item, index) => {\n          const marketAddress = keys[index];\n          const mintAddress = reverseSerumMarketCache.get(marketAddress);\n          if (mintAddress) {\n            const market = marketByMint.get(mintAddress);\n\n            if (market) {\n              const programId = market.marketInfo.programId;\n              const id = market.marketInfo.address;\n              cache.add(id, item, (id, acc) => {\n                const decoded = Market.getLayout(programId).decode(acc.data);\n\n                const details = {\n                  pubkey: id,\n                  account: {\n                    ...acc,\n                  },\n                  info: decoded,\n                } as ParsedAccountBase;\n\n                cache.registerParser(details.info.baseMint, MintParser);\n                cache.registerParser(details.info.quoteMint, MintParser);\n                cache.registerParser(details.info.bids, OrderBookParser);\n                cache.registerParser(details.info.asks, OrderBookParser);\n\n                return details;\n              });\n            }\n          }\n\n          return item;\n        });\n      });\n\n      const toQuery = new Set<string>();\n      allMarkets.forEach((m) => {\n        const market = cache.get(m);\n        if (!market) {\n          return;\n        }\n\n        const decoded = market;\n\n        if (!cache.get(decoded.info.baseMint)) {\n          toQuery.add(decoded.info.baseMint.toBase58());\n        }\n\n        if (!cache.get(decoded.info.baseMint)) {\n          toQuery.add(decoded.info.quoteMint.toBase58());\n        }\n\n        toQuery.add(decoded.info.bids.toBase58());\n        toQuery.add(decoded.info.asks.toBase58());\n\n        // TODO: only update when someone listnes to it\n      });\n\n      await refreshAccounts(connection, [...toQuery.keys()]);\n\n      marketEmitter.raiseMarketUpdated(new Set([...marketByMint.keys()]));\n\n      // start update loop\n      updateData();\n      bonfidaQuery();\n    };\n\n    initalQuery();\n\n    return () => {\n      window.clearTimeout(bonfidaTimer);\n      window.clearTimeout(timer);\n    };\n  }, [pools, marketByMint, accountsToObserve, connection]);\n\n  const midPriceInUSD = useCallback(\n    (mintAddress: string) => {\n      return getMidPrice(\n        marketByMint.get(mintAddress)?.marketInfo.address.toBase58(),\n        mintAddress\n      );\n    },\n    [marketByMint]\n  );\n\n  const subscribeToMarket = useCallback(\n    (mintAddress: string) => {\n      const info = marketByMint.get(mintAddress);\n      const market = cache.get(info?.marketInfo.address.toBase58() || \"\");\n      if (!market) {\n        return () => {};\n      }\n\n      // TODO: get recent volume\n\n      const bid = market.info.bids.toBase58();\n      const ask = market.info.asks.toBase58();\n      accountsToObserve.set(bid, (accountsToObserve.get(bid) || 0) + 1);\n      accountsToObserve.set(ask, (accountsToObserve.get(ask) || 0) + 1);\n\n      // TODO: add event queue to query for last trade\n\n      return () => {\n        accountsToObserve.set(bid, (accountsToObserve.get(bid) || 0) - 1);\n        accountsToObserve.set(ask, (accountsToObserve.get(ask) || 0) - 1);\n\n        // cleanup\n        [...accountsToObserve.keys()].forEach((key) => {\n          if ((accountsToObserve.get(key) || 0) <= 0) {\n            accountsToObserve.delete(key);\n          }\n        });\n      };\n    },\n    [marketByMint, accountsToObserve]\n  );\n\n  return (\n    <MarketsContext.Provider\n      value={{\n        midPriceInUSD,\n        marketEmitter,\n        accountsToObserve,\n        marketByMint,\n        subscribeToMarket,\n        dailyVolume: dailyVolume,\n      }}\n    >\n      {children}\n    </MarketsContext.Provider>\n  );\n}\n\nexport const useMarkets = () => {\n  const context = useContext(MarketsContext);\n  return context as MarketsContextState;\n};\n\nexport const useMidPriceInUSD = (mint: string) => {\n  const { midPriceInUSD, subscribeToMarket, marketEmitter } = useContext(\n    MarketsContext\n  ) as MarketsContextState;\n  const [price, setPrice] = useState<number>(0);\n\n  useEffect(() => {\n    let subscription = subscribeToMarket(mint);\n    const update = () => {\n      if (midPriceInUSD) {\n        setPrice(midPriceInUSD(mint));\n      }\n    };\n\n    update();\n    const dispose = marketEmitter.onMarket(update);\n\n    return () => {\n      subscription();\n      dispose();\n    };\n  }, [midPriceInUSD, mint, marketEmitter, subscribeToMarket]);\n\n  return { price, isBase: price === 1.0 };\n};\n\nexport const useEnrichedPools = (pools: PoolInfo[]) => {\n  const context = useContext(MarketsContext);\n  const { tokenMap } = useConnectionConfig();\n  const [enriched, setEnriched] = useState<any[]>([]);\n  const subscribeToMarket = context?.subscribeToMarket;\n  const marketEmitter = context?.marketEmitter;\n  const marketsByMint = context?.marketByMint;\n  const dailyVolume = context?.dailyVolume;\n\n  useEffect(() => {\n    if (!marketEmitter || !subscribeToMarket) {\n      return;\n    }\n\n    const mints = [...new Set([...marketsByMint?.keys()]).keys()];\n\n    const subscriptions = mints.map((m) => subscribeToMarket(m));\n\n    const update = () => {\n      setEnriched(\n        createEnrichedPools(pools, marketsByMint, dailyVolume, tokenMap)\n      );\n    };\n\n    const dispose = marketEmitter.onMarket(update);\n\n    update();\n\n    return () => {\n      dispose && dispose();\n      subscriptions.forEach((dispose) => dispose && dispose());\n    };\n  }, [\n    tokenMap,\n    pools,\n    dailyVolume,\n    subscribeToMarket,\n    marketEmitter,\n    marketsByMint,\n  ]);\n\n  return enriched;\n};\n\n// TODO:\n// 1. useEnrichedPools\n//      combines market and pools and user info\n// 2. ADD useMidPrice with event to refresh price\n// that could subscribe to multiple markets and trigger refresh of those markets only when there is active subscription\n\nfunction createEnrichedPools(\n  pools: PoolInfo[],\n  marketByMint: Map<string, SerumMarket> | undefined,\n  poolData: Map<string, RecentPoolData> | undefined,\n  tokenMap: KnownTokenMap\n) {\n  const TODAY = new Date();\n\n  if (!marketByMint) {\n    return [];\n  }\n\n  const result = pools\n    .filter((p) => p.pubkeys.holdingMints && p.pubkeys.holdingMints.length > 1)\n    .map((p, index) => {\n      const mints = (p.pubkeys.holdingMints || [])\n        .map((a) => a.toBase58())\n        .sort();\n      const mintA = cache.getMint(mints[0]);\n      const mintB = cache.getMint(mints[1]);\n\n      const account0 = cache.getAccount(p.pubkeys.holdingAccounts[0]);\n      const account1 = cache.getAccount(p.pubkeys.holdingAccounts[1]);\n\n      const accountA =\n        account0?.info.mint.toBase58() === mints[0] ? account0 : account1;\n      const accountB =\n        account1?.info.mint.toBase58() === mints[1] ? account1 : account0;\n\n      const baseMid = getMidPrice(\n        marketByMint.get(mints[0])?.marketInfo.address.toBase58() || \"\",\n        mints[0]\n      );\n      const baseReserveUSD = baseMid * convert(accountA, mintA);\n\n      const quote = getMidPrice(\n        marketByMint.get(mints[1])?.marketInfo.address.toBase58() || \"\",\n        mints[1]\n      );\n      const quoteReserveUSD = quote * convert(accountB, mintB);\n\n      const poolMint = cache.getMint(p.pubkeys.mint);\n      if (poolMint?.supply.eqn(0)) {\n        return undefined;\n      }\n\n      let airdropYield = calculateAirdropYield(\n        p,\n        marketByMint,\n        baseReserveUSD,\n        quoteReserveUSD\n      );\n\n      let volume = 0;\n      let volume24h =\n        baseMid * (poolData?.get(p.pubkeys.mint.toBase58())?.volume24hA || 0);\n      let fees24h = volume24h * (LIQUIDITY_PROVIDER_FEE - SERUM_FEE);\n      let fees = 0;\n      let apy = airdropYield;\n      let apy24h = airdropYield;\n      if (p.pubkeys.feeAccount) {\n        const feeAccount = cache.getAccount(p.pubkeys.feeAccount);\n\n        if (\n          poolMint &&\n          feeAccount &&\n          feeAccount.info.mint.toBase58() === p.pubkeys.mint.toBase58()\n        ) {\n          const feeBalance = feeAccount?.info.amount.toNumber();\n          const supply = poolMint?.supply.toNumber();\n\n          const ownedPct = feeBalance / supply;\n\n          const poolOwnerFees =\n            ownedPct * baseReserveUSD + ownedPct * quoteReserveUSD;\n          volume = poolOwnerFees / 0.0004;\n          fees = volume * LIQUIDITY_PROVIDER_FEE;\n\n          if (fees !== 0) {\n            const baseVolume = (ownedPct * baseReserveUSD) / 0.0004;\n            const quoteVolume = (ownedPct * quoteReserveUSD) / 0.0004;\n\n            // Aproximation not true for all pools we need to fine a better way\n            const daysSinceInception = Math.floor(\n              (TODAY.getTime() - INITAL_LIQUIDITY_DATE.getTime()) /\n                (24 * 3600 * 1000)\n            );\n            const apy0 =\n              parseFloat(\n                ((baseVolume / daysSinceInception) *\n                  LIQUIDITY_PROVIDER_FEE *\n                  356) as any\n              ) / baseReserveUSD;\n            const apy1 =\n              parseFloat(\n                ((quoteVolume / daysSinceInception) *\n                  LIQUIDITY_PROVIDER_FEE *\n                  356) as any\n              ) / quoteReserveUSD;\n\n            apy = apy + Math.max(apy0, apy1);\n\n            const apy24h0 =\n              parseFloat((volume24h * LIQUIDITY_PROVIDER_FEE * 356) as any) /\n              baseReserveUSD;\n            apy24h = apy24h + apy24h0;\n          }\n        }\n      }\n\n      const lpMint = cache.getMint(p.pubkeys.mint);\n\n      const name = getPoolName(tokenMap, p);\n      const link = `#/?pair=${getPoolName(tokenMap, p, false).replace(\n        \"/\",\n        \"-\"\n      )}`;\n\n      return {\n        key: p.pubkeys.account.toBase58(),\n        id: index,\n        name,\n        names: mints.map((m) => getTokenName(tokenMap, m)),\n        accounts: [accountA?.pubkey, accountB?.pubkey],\n        address: p.pubkeys.mint.toBase58(),\n        link,\n        mints,\n        liquidityA: convert(accountA, mintA),\n        liquidityAinUsd: baseReserveUSD,\n        liquidityB: convert(accountB, mintB),\n        liquidityBinUsd: quoteReserveUSD,\n        supply:\n          lpMint &&\n          (\n            lpMint?.supply.toNumber() / Math.pow(10, lpMint?.decimals || 0)\n          ).toFixed(9),\n        fees,\n        fees24h,\n        liquidity: baseReserveUSD + quoteReserveUSD,\n        volume,\n        volume24h,\n        apy: Number.isFinite(apy) ? apy : 0,\n        apy24h: Number.isFinite(apy24h) ? apy24h : 0,\n        map: poolData,\n        extra: poolData?.get(p.pubkeys.account.toBase58()),\n        raw: p,\n      };\n    })\n    .filter((p) => p !== undefined);\n  return result;\n}\n\nfunction calculateAirdropYield(\n  p: PoolInfo,\n  marketByMint: Map<string, SerumMarket>,\n  baseReserveUSD: number,\n  quoteReserveUSD: number\n) {\n  let airdropYield = 0;\n  let poolWithAirdrop = POOLS_WITH_AIRDROP.find((drop) =>\n    drop.pool.equals(p.pubkeys.mint)\n  );\n  if (poolWithAirdrop) {\n    airdropYield = poolWithAirdrop.airdrops.reduce((acc, item) => {\n      const market = marketByMint.get(item.mint.toBase58())?.marketInfo.address;\n      if (market) {\n        const midPrice = getMidPrice(market?.toBase58(), item.mint.toBase58());\n\n        acc =\n          acc +\n          // airdrop yield\n          ((item.amount * midPrice) / (baseReserveUSD + quoteReserveUSD)) *\n            (365 / 30);\n      }\n\n      return acc;\n    }, 0);\n  }\n  return airdropYield;\n}\n\nconst OrderBookParser = (id: PublicKey, acc: AccountInfo<Buffer>) => {\n  const decoded = Orderbook.LAYOUT.decode(acc.data);\n\n  const details = {\n    pubkey: id,\n    account: {\n      ...acc,\n    },\n    info: decoded,\n  } as ParsedAccountBase;\n\n  return details;\n};\n\nconst getMidPrice = (marketAddress?: string, mintAddress?: string) => {\n  const SERUM_TOKEN = TOKEN_MINTS.find(\n    (a) => a.address.toBase58() === mintAddress\n  );\n\n  if (STABLE_COINS.has(SERUM_TOKEN?.name || \"\")) {\n    return 1.0;\n  }\n\n  if (!marketAddress) {\n    return 0.0;\n  }\n\n  const marketInfo = cache.get(marketAddress);\n  if (!marketInfo) {\n    return 0.0;\n  }\n\n  const decodedMarket = marketInfo.info;\n\n  const baseMintDecimals =\n    cache.get(decodedMarket.baseMint)?.info.decimals || 0;\n  const quoteMintDecimals =\n    cache.get(decodedMarket.quoteMint)?.info.decimals || 0;\n\n  const market = new Market(\n    decodedMarket,\n    baseMintDecimals,\n    quoteMintDecimals,\n    undefined,\n    decodedMarket.programId\n  );\n\n  const bids = cache.get(decodedMarket.bids)?.info;\n  const asks = cache.get(decodedMarket.asks)?.info;\n\n  if (bids && asks) {\n    const bidsBook = new Orderbook(market, bids.accountFlags, bids.slab);\n    const asksBook = new Orderbook(market, asks.accountFlags, asks.slab);\n\n    const bestBid = bidsBook.getL2(1);\n    const bestAsk = asksBook.getL2(1);\n\n    if (bestBid.length > 0 && bestAsk.length > 0) {\n      return (bestBid[0][0] + bestAsk[0][0]) / 2.0;\n    }\n  }\n\n  return 0;\n};\n\nconst refreshAccounts = async (connection: Connection, keys: string[]) => {\n  if (keys.length === 0) {\n    return [];\n  }\n\n  return getMultipleAccounts(connection, keys, \"single\").then(\n    ({ keys, array }) => {\n      return array.map((item, index) => {\n        const address = keys[index];\n        return cache.add(new PublicKey(address), item);\n      });\n    }\n  );\n};\n\ninterface SerumMarket {\n  marketInfo: {\n    address: PublicKey;\n    name: string;\n    programId: PublicKey;\n    deprecated: boolean;\n  };\n\n  // 1st query\n  marketAccount?: AccountInfo<Buffer>;\n\n  // 2nd query\n  mintBase?: AccountInfo<Buffer>;\n  mintQuote?: AccountInfo<Buffer>;\n  bidAccount?: AccountInfo<Buffer>;\n  askAccount?: AccountInfo<Buffer>;\n  eventQueue?: AccountInfo<Buffer>;\n\n  swap?: {\n    dailyVolume: number;\n  };\n\n  midPrice?: (mint?: PublicKey) => number;\n}\n","import React from \"react\";\nimport { Button, Col, Popover, Row } from \"antd\";\nimport { PoolInfo } from \"../../models\";\nimport { CopyOutlined, InfoCircleOutlined } from \"@ant-design/icons\";\nimport { ExplorerLink } from \"./../explorerLink\";\nimport { useConnectionConfig } from \"../../utils/connection\";\nimport { getTokenName } from \"../../utils/utils\";\n\nconst Address = (props: {\n  address: string;\n  style?: React.CSSProperties;\n  label?: string;\n}) => {\n  return (\n    <Row style={{ width: \"100%\", ...props.style }}>\n      {props.label && <Col span={4}>{props.label}:</Col>}\n      <Col span={17}>\n        <ExplorerLink address={props.address} code={true} type=\"address\" />\n      </Col>\n      <Col span={3} style={{ display: \"flex\" }}>\n        <Button\n          shape=\"round\"\n          icon={<CopyOutlined />}\n          size={\"small\"}\n          style={{ marginLeft: \"auto\", marginRight: 0 }}\n          onClick={() => navigator.clipboard.writeText(props.address)}\n        />\n      </Col>\n    </Row>\n  );\n};\n\nexport const PoolAddress = (props: {\n  pool?: PoolInfo;\n  style?: React.CSSProperties;\n  showLabel?: boolean;\n  label?: string;\n}) => {\n  const { pool } = props;\n  const label = props.label || \"Address\";\n\n  if (!pool?.pubkeys.account) {\n    return null;\n  }\n\n  return (\n    <Address\n      address={pool.pubkeys.account.toBase58()}\n      style={props.style}\n      label={label}\n    />\n  );\n};\n\nexport const AccountsAddress = (props: {\n  pool?: PoolInfo;\n  style?: React.CSSProperties;\n}) => {\n  const { tokenMap } = useConnectionConfig();\n  const { pool } = props;\n\n  if (!pool) {\n    return null;\n  }\n\n  const account1 = pool?.pubkeys.holdingAccounts[0];\n  const account2 = pool?.pubkeys.holdingAccounts[1];\n  const mint1 = pool?.pubkeys.holdingMints[0];\n  const mint2 = pool?.pubkeys.holdingMints[1];\n  let aName, bName;\n  if (mint1) {\n    aName = getTokenName(tokenMap, mint1.toBase58());\n  }\n  if (mint2) {\n    bName = getTokenName(tokenMap, mint2.toBase58());\n  }\n\n  return (\n    <>\n      {account1 && (\n        <Address\n          address={account1.toBase58()}\n          style={props.style}\n          label={aName}\n        />\n      )}\n      {account2 && (\n        <Address\n          address={account2.toBase58()}\n          style={props.style}\n          label={bName}\n        />\n      )}\n    </>\n  );\n};\n\nexport const AdressesPopover = (props: { pool?: PoolInfo }) => {\n  const { pool } = props;\n\n  if (!pool) {\n    return null;\n  }\n\n  return (\n    <Popover\n      placement=\"topRight\"\n      title={\"Addresses\"}\n      trigger=\"hover\"\n      content={\n        <>\n          <PoolAddress pool={pool} showLabel={true} label={\"Pool\"} />\n          <AccountsAddress pool={pool} />\n        </>\n      }\n    >\n      <Button\n        shape=\"circle\"\n        size=\"large\"\n        type=\"text\"\n        className={\"trade-address-info-button\"}\n        icon={<InfoCircleOutlined />}\n      />\n    </Popover>\n  );\n};\n","import React, { useEffect, useMemo, useRef } from \"react\";\nimport { PoolInfo } from \"../../models\";\nimport { useEnrichedPools } from \"./../../context/market\";\nimport echarts from \"echarts\";\nimport { formatNumber, formatUSD } from \"../../utils/utils\";\n\nexport const SupplyOverview = (props: { pool?: PoolInfo }) => {\n  const { pool } = props;\n  const pools = useMemo(() => (pool ? [pool] : []), [pool]);\n  const enriched = useEnrichedPools(pools);\n  const chartDiv = useRef<HTMLDivElement>(null);\n\n  // dispose chart\n  useEffect(() => {\n    const div = chartDiv.current;\n    return () => {\n      let instance = div && echarts.getInstanceByDom(div);\n      instance && instance.dispose();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!chartDiv.current || enriched.length === 0) {\n      return;\n    }\n\n    let instance = echarts.getInstanceByDom(chartDiv.current);\n    if (!instance) {\n      instance = echarts.init(chartDiv.current as any);\n    }\n\n    const data = [\n      {\n        name: enriched[0].names[0],\n        value: enriched[0].liquidityAinUsd,\n        tokens: enriched[0].liquidityA,\n      },\n      {\n        name: enriched[0].names[1],\n        value: enriched[0].liquidityBinUsd,\n        tokens: enriched[0].liquidityB,\n      },\n    ];\n\n    instance.setOption({\n      tooltip: {\n        trigger: \"item\",\n        formatter: function (params: any) {\n          var val = formatUSD.format(params.value);\n          var tokenAmount = formatNumber.format(params.data.tokens);\n          return `${params.name}: \\n${val}\\n(${tokenAmount})`;\n        },\n      },\n      series: [\n        {\n          name: \"Liquidity\",\n          type: \"pie\",\n          top: 0,\n          bottom: 0,\n          left: 0,\n          right: 0,\n          animation: false,\n          label: {\n            fontSize: 14,\n            show: true,\n            formatter: function (params: any) {\n              var val = formatUSD.format(params.value);\n              var tokenAmount = formatNumber.format(params.data.tokens);\n              return `{c|${params.name}}\\n{r|${tokenAmount}}\\n{r|${val}}`;\n            },\n            rich: {\n              c: {\n                color: \"#999\",\n                lineHeight: 22,\n                align: \"center\",\n              },\n              r: {\n                color: \"#999\",\n                align: \"right\",\n              },\n            },\n            color: \"rgba(255, 255, 255, 0.5)\",\n          },\n          itemStyle: {\n            normal: {\n              borderColor: \"#000\",\n            },\n          },\n          data,\n        },\n      ],\n    });\n  }, [enriched]);\n\n  if (enriched.length === 0) {\n    return null;\n  }\n\n  return <div ref={chartDiv} style={{ height: 150, width: \"100%\" }} />;\n};\n","import React from \"react\";\nimport { Card, Select } from \"antd\";\nimport { NumericInput } from \"../numericInput\";\nimport { getPoolName, getTokenName, isKnownMint } from \"../../utils/utils\";\nimport {\n  useUserAccounts,\n  useMint,\n  useCachedPool,\n  useAccountByMint,\n} from \"../../utils/accounts\";\nimport \"./styles.less\";\nimport { useConnectionConfig } from \"../../utils/connection\";\nimport { PoolIcon, TokenIcon } from \"../tokenIcon\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { PoolInfo, TokenAccount } from \"../../models\";\n\nconst { Option } = Select;\n\nexport const TokenDisplay = (props: {\n  name: string;\n  mintAddress: string;\n  icon?: JSX.Element;\n  showBalance?: boolean;\n}) => {\n  const { showBalance, mintAddress, name, icon } = props;\n  const tokenMint = useMint(mintAddress);\n  const tokenAccount = useAccountByMint(mintAddress);\n\n  let balance: number = 0;\n  let hasBalance: boolean = false;\n  if (showBalance) {\n    if (tokenAccount && tokenMint) {\n      balance =\n        tokenAccount.info.amount.toNumber() / Math.pow(10, tokenMint.decimals);\n      hasBalance = balance > 0;\n    }\n  }\n\n  return (\n    <>\n      <div\n        title={mintAddress}\n        key={mintAddress}\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n        }}\n      >\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          {icon || <TokenIcon mintAddress={mintAddress} />}\n          {name}\n        </div>\n        {showBalance ? (\n          <span\n            title={balance.toString()}\n            key={mintAddress}\n            className=\"token-balance\"\n          >\n            &nbsp;{\" \"}\n            {hasBalance\n              ? balance < 0.001\n                ? \"<0.001\"\n                : balance.toFixed(3)\n              : \"-\"}\n          </span>\n        ) : null}\n      </div>\n    </>\n  );\n};\n\nexport const CurrencyInput = (props: {\n  mint?: string;\n  amount?: string;\n  title?: string;\n  hideSelect?: boolean;\n  onInputChange?: (val: number) => void;\n  onMintChange?: (account: string) => void;\n}) => {\n  const { userAccounts } = useUserAccounts();\n  const { pools } = useCachedPool();\n  const mint = useMint(props.mint);\n\n  const { tokens, tokenMap } = useConnectionConfig();\n\n  const renderPopularTokens = tokens.map((item) => {\n    return (\n      <Option\n        key={item.mintAddress}\n        value={item.mintAddress}\n        name={item.tokenSymbol}\n        title={item.mintAddress}\n      >\n        <TokenDisplay\n          key={item.mintAddress}\n          name={item.tokenSymbol}\n          mintAddress={item.mintAddress}\n          showBalance={true}\n        />\n      </Option>\n    );\n  });\n\n  // TODO: expand nested pool names ...?\n\n  // group accounts by mint and use one with biggest balance\n  const grouppedUserAccounts = userAccounts\n    .sort((a, b) => {\n      return b.info.amount.toNumber() - a.info.amount.toNumber();\n    })\n    .reduce((map, acc) => {\n      const mint = acc.info.mint.toBase58();\n      if (isKnownMint(tokenMap, mint)) {\n        return map;\n      }\n\n      const pool = pools.find((p) => p && p.pubkeys.mint.toBase58() === mint);\n\n      map.set(mint, (map.get(mint) || []).concat([{ account: acc, pool }]));\n\n      return map;\n    }, new Map<string, { account: TokenAccount; pool: PoolInfo | undefined }[]>());\n\n  const additionalAccounts = [...grouppedUserAccounts.keys()];\n  if (\n    tokens.findIndex((t) => t.mintAddress === props.mint) < 0 &&\n    props.mint &&\n    !grouppedUserAccounts.has(props?.mint)\n  ) {\n    additionalAccounts.push(props.mint);\n  }\n\n  const renderAdditionalTokens = additionalAccounts.map((mint) => {\n    let pool: PoolInfo | undefined;\n    const list = grouppedUserAccounts.get(mint);\n    if (list && list.length > 0) {\n      // TODO: group multple accounts of same time and select one with max amount\n      const account = list[0];\n      pool = account.pool;\n    }\n\n    let name: string;\n    let icon: JSX.Element;\n    if (pool) {\n      name = getPoolName(tokenMap, pool);\n      const sorted = pool.pubkeys.holdingMints\n        .map((a: PublicKey) => a.toBase58())\n        .sort();\n      icon = <PoolIcon mintA={sorted[0]} mintB={sorted[1]} />;\n    } else {\n      name = getTokenName(tokenMap, mint, true, 3);\n      icon = <TokenIcon mintAddress={mint} />;\n    }\n\n    return (\n      <Option key={mint} value={mint} name={name}>\n        <TokenDisplay\n          key={mint}\n          mintAddress={mint}\n          name={name}\n          icon={icon}\n          showBalance={!pool}\n        />\n      </Option>\n    );\n  });\n\n  const userUiBalance = () => {\n    const currentAccount = userAccounts?.find(\n      (a) => a.info.mint.toBase58() === props.mint\n    );\n    if (currentAccount && mint) {\n      return (\n        currentAccount.info.amount.toNumber() / Math.pow(10, mint.decimals)\n      );\n    }\n\n    return 0;\n  };\n\n  return (\n    <Card\n      className=\"ccy-input\"\n      style={{ borderRadius: 20 }}\n      bodyStyle={{ padding: 0 }}\n    >\n      <div className=\"ccy-input-header\">\n        <div className=\"ccy-input-header-left\">{props.title}</div>\n\n        <div\n          className=\"ccy-input-header-right\"\n          onClick={(e) =>\n            props.onInputChange && props.onInputChange(userUiBalance())\n          }\n        >\n          Balance: {userUiBalance().toFixed(6)}\n        </div>\n      </div>\n      <div className=\"ccy-input-header\" style={{ padding: \"0px 10px 5px 7px\" }}>\n        <NumericInput\n          value={props.amount}\n          onChange={(val: any) => {\n            if (props.onInputChange) {\n              props.onInputChange(val);\n            }\n          }}\n          style={{\n            fontSize: 20,\n            boxShadow: \"none\",\n            borderColor: \"transparent\",\n            outline: \"transpaernt\",\n          }}\n          placeholder=\"0.00\"\n        />\n        <div className=\"ccy-input-header-right\" style={{ display: \"felx\" }}>\n          {!props.hideSelect ? (\n            <Select\n              size=\"large\"\n              showSearch\n              style={{ minWidth: 150 }}\n              placeholder=\"CCY\"\n              value={props.mint}\n              onChange={(item) => {\n                if (props.onMintChange) {\n                  props.onMintChange(item);\n                }\n              }}\n              filterOption={(input, option) =>\n                option?.name?.toLowerCase().indexOf(input.toLowerCase()) >= 0\n              }\n            >\n              {[...renderPopularTokens, ...renderAdditionalTokens]}\n            </Select>\n          ) : (\n            props.mint && (\n              <TokenDisplay\n                key={props.mint}\n                name={getTokenName(tokenMap, props.mint)}\n                mintAddress={props.mint}\n                showBalance={true}\n              />\n            )\n          )}\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nexport const PoolCurrencyInput = (props: {\n  mint: string;\n  amount?: string;\n  title?: string;\n  pool?: PoolInfo;\n  onInputChange?: (val: number) => void;\n  onMintChange?: (account: string) => void;\n  balance?: number;\n}) => {\n  const { balance, pool, mint } = props;\n  const { tokenMap } = useConnectionConfig();\n\n  let name: string;\n  let icon: JSX.Element;\n  if (pool) {\n    name = getPoolName(tokenMap, pool);\n    const sorted = pool.pubkeys.holdingMints\n      .map((a: PublicKey) => a.toBase58())\n      .sort();\n    icon = <PoolIcon mintA={sorted[0]} mintB={sorted[1]} />;\n  } else {\n    name = getTokenName(tokenMap, mint, true, 3);\n    icon = <TokenIcon mintAddress={mint} />;\n  }\n  return (\n    <Card\n      className=\"ccy-input\"\n      style={{ borderRadius: 20 }}\n      bodyStyle={{ padding: 0 }}\n    >\n      <div className=\"ccy-input-header\">\n        <div className=\"ccy-input-header-left\">{props.title}</div>\n        {balance && (\n          <div\n            className=\"ccy-input-header-right\"\n            onClick={(e) => props.onInputChange && props.onInputChange(balance)}\n          >\n            Balance: {balance.toFixed(6)}\n          </div>\n        )}\n      </div>\n      <div className=\"ccy-input-header\" style={{ padding: \"0px 10px 5px 7px\" }}>\n        <NumericInput\n          value={props.amount}\n          onChange={(val: any) => {\n            if (props.onInputChange) {\n              props.onInputChange(val);\n            }\n          }}\n          style={{\n            fontSize: 20,\n            boxShadow: \"none\",\n            borderColor: \"transparent\",\n            outline: \"transpaernt\",\n          }}\n          placeholder=\"0.00\"\n        />\n\n        <div className=\"ccy-input-header-right\" style={{ display: \"felx\" }}>\n          <TokenDisplay key={mint} mintAddress={mint} name={name} icon={icon} />\n        </div>\n      </div>\n    </Card>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Card, Select } from \"antd\";\nimport { NumericInput } from \"../numericInput\";\nimport \"./add.less\";\nimport { CurveType, DEFAULT_DENOMINATOR, PoolConfig } from \"../../models\";\nimport { ENABLE_FEES_INPUT } from \"./../../utils/ids\";\n\nconst Option = Select.Option;\n\nconst FeeInput = (props: {\n  numerator: number;\n  denominator: number;\n  set: (numerator: number, denominator: number) => void;\n}) => {\n  const [value, setValue] = useState(\n    ((props.numerator / props.denominator) * 100).toString()\n  );\n\n  return (\n    <div style={{ padding: \"3px 10px 3px 3px\", border: \"1px solid #434343\" }}>\n      <NumericInput\n        className=\"slippage-input\"\n        size=\"small\"\n        value={value}\n        style={{\n          width: 50,\n          fontSize: 14,\n          boxShadow: \"none\",\n          borderColor: \"transparent\",\n          outline: \"transpaernt\",\n        }}\n        onChange={(x: any) => {\n          setValue(x);\n\n          const val = parseFloat(x);\n          if (Number.isFinite(val)) {\n            const numerator = (val * DEFAULT_DENOMINATOR) / 100;\n            props.set(numerator, DEFAULT_DENOMINATOR);\n          }\n        }}\n      />\n      %\n    </div>\n  );\n};\n\nconst PriceParameters = (props: {\n  options: PoolConfig;\n  setOptions: (config: PoolConfig) => void;\n}) => {\n  const [value, setValue] = useState(\"0\");\n  return (\n    <>\n      <>\n        <span>Token B constant price:</span>\n        <div\n          style={{ padding: \"3px 10px 3px 3px\", border: \"1px solid #434343\" }}\n        >\n          <NumericInput\n            className=\"slippage-input\"\n            size=\"small\"\n            value={value}\n            style={{\n              width: 50,\n              fontSize: 14,\n              boxShadow: \"none\",\n              borderColor: \"transparent\",\n              outline: \"transpaernt\",\n            }}\n            onChange={(x: any) => {\n              setValue(x);\n\n              props.setOptions({\n                ...props.options,\n                token_b_price: parseInt(x),\n              });\n            }}\n          />\n        </div>\n      </>\n    </>\n  );\n};\n\nexport const PoolConfigCard = (props: {\n  options: PoolConfig;\n  setOptions: (config: PoolConfig) => void;\n  action?: JSX.Element;\n}) => {\n  const {\n    tradeFeeNumerator,\n    tradeFeeDenominator,\n    ownerTradeFeeNumerator,\n    ownerTradeFeeDenominator,\n    ownerWithdrawFeeNumerator,\n    ownerWithdrawFeeDenominator,\n  } = props.options.fees;\n\n  const feesInput = (\n    <>\n      <>\n        <span>LPs Trading Fee:</span>\n        <FeeInput\n          numerator={tradeFeeNumerator}\n          denominator={tradeFeeDenominator}\n          set={(numerator, denominator) =>\n            props.setOptions({\n              ...props.options,\n              fees: {\n                ...props.options.fees,\n                tradeFeeNumerator: numerator,\n                tradeFeeDenominator: denominator,\n              },\n            })\n          }\n        />\n      </>\n      <>\n        <span>Owner Trading Fee:</span>\n        <FeeInput\n          numerator={ownerTradeFeeNumerator}\n          denominator={ownerTradeFeeDenominator}\n          set={(numerator, denominator) =>\n            props.setOptions({\n              ...props.options,\n              fees: {\n                ...props.options.fees,\n                ownerTradeFeeNumerator: numerator,\n                ownerTradeFeeDenominator: denominator,\n              },\n            })\n          }\n        />\n      </>\n      <>\n        <span>Withdraw Fee:</span>\n        <FeeInput\n          numerator={ownerWithdrawFeeNumerator}\n          denominator={ownerWithdrawFeeDenominator}\n          set={(numerator, denominator) =>\n            props.setOptions({\n              ...props.options,\n              fees: {\n                ...props.options.fees,\n                ownerWithdrawFeeNumerator: numerator,\n                ownerWithdrawFeeDenominator: denominator,\n              },\n            })\n          }\n        />\n      </>\n    </>\n  );\n\n  return (\n    <Card title=\"Pool configuration\">\n      <div className=\"pool-settings-grid\">\n        {ENABLE_FEES_INPUT && feesInput}\n        <>\n          <span>Curve Type:</span>\n          <Select\n            defaultValue=\"0\"\n            style={{ width: 200 }}\n            onChange={(val) =>\n              props.setOptions({\n                ...props.options,\n                curveType: parseInt(val),\n              })\n            }\n          >\n            <Option value={CurveType.ConstantProduct.toString()}>\n              Constant Product\n            </Option>\n            <Option value={CurveType.ConstantPrice.toString()}>\n              Constant Price\n            </Option>\n            <Option value={CurveType.ConstantProductWithOffset.toString()}>\n              Offset Constant Product\n            </Option>\n          </Select>\n        </>\n        {props.options.curveType === CurveType.ConstantPrice && (\n          <PriceParameters {...props} />\n        )}\n      </div>\n      {props.action}\n    </Card>\n  );\n};\n","import React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport {\n  calculateDependentAmount,\n  usePoolForBasket,\n  PoolOperation,\n} from \"./pools\";\nimport { useMint, useAccountByMint } from \"./accounts\";\nimport { MintInfo } from \"@solana/spl-token\";\nimport { useConnection, useConnectionConfig } from \"./connection\";\nimport {\n  CurveType,\n  PoolConfig,\n  TokenAccount,\n  DEFAULT_DENOMINATOR,\n} from \"../models\";\nimport { convert, getTokenIcon, getTokenName, KnownToken } from \"./utils\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport bs58 from \"bs58\";\n\nexport interface CurrencyContextState {\n  mintAddress: string;\n  account?: TokenAccount;\n  mint?: MintInfo;\n  amount: string;\n  name: string;\n  icon?: string;\n  setAmount: (val: string) => void;\n  setMint: (mintAddress: string) => void;\n  convertAmount: () => number;\n  sufficientBalance: () => boolean;\n}\n\nexport interface CurrencyPairContextState {\n  A: CurrencyContextState;\n  B: CurrencyContextState;\n  lastTypedAccount: string;\n  setLastTypedAccount: (mintAddress: string) => void;\n  setPoolOperation: (swapDirection: PoolOperation) => void;\n  options: PoolConfig;\n  setOptions: (config: PoolConfig) => void;\n}\n\nconst CurrencyPairContext = React.createContext<CurrencyPairContextState | null>(\n  null\n);\n\nconst convertAmount = (amount: string, mint?: MintInfo) => {\n  return parseFloat(amount) * Math.pow(10, mint?.decimals || 0);\n};\n\nexport const useCurrencyLeg = (config: PoolConfig, defaultMint?: string) => {\n  const { tokenMap } = useConnectionConfig();\n  const [amount, setAmount] = useState(\"\");\n  const [mintAddress, setMintAddress] = useState(defaultMint || \"\");\n  const account = useAccountByMint(mintAddress);\n  const mint = useMint(mintAddress);\n\n  return useMemo(\n    () => ({\n      mintAddress: mintAddress,\n      account: account,\n      mint: mint,\n      amount: amount,\n      name: getTokenName(tokenMap, mintAddress),\n      icon: getTokenIcon(tokenMap, mintAddress),\n      setAmount: setAmount,\n      setMint: setMintAddress,\n      convertAmount: () => convertAmount(amount, mint),\n      sufficientBalance: () =>\n        account !== undefined &&\n        (convert(account, mint) >= parseFloat(amount) ||\n          config.curveType === CurveType.ConstantProductWithOffset),\n    }),\n    [\n      mintAddress,\n      account,\n      mint,\n      amount,\n      tokenMap,\n      setAmount,\n      setMintAddress,\n      config,\n    ]\n  );\n};\n\nexport function CurrencyPairProvider({ children = null as any }) {\n  const connection = useConnection();\n  const { tokens } = useConnectionConfig();\n\n  const history = useHistory();\n  const location = useLocation();\n  const [lastTypedAccount, setLastTypedAccount] = useState(\"\");\n  const [poolOperation, setPoolOperation] = useState<PoolOperation>(\n    PoolOperation.Add\n  );\n\n  const [options, setOptions] = useState<PoolConfig>({\n    curveType: CurveType.ConstantProduct,\n    fees: {\n      tradeFeeNumerator: 25,\n      tradeFeeDenominator: DEFAULT_DENOMINATOR,\n      ownerTradeFeeNumerator: 4,\n      ownerTradeFeeDenominator: DEFAULT_DENOMINATOR,\n      ownerWithdrawFeeNumerator: 0,\n      ownerWithdrawFeeDenominator: DEFAULT_DENOMINATOR,\n      hostFeeNumerator: 1,\n      hostFeeDenominator: DEFAULT_DENOMINATOR,\n    },\n  });\n\n  const base = useCurrencyLeg(options);\n  const mintAddressA = base.mintAddress;\n  const setMintAddressA = base.setMint;\n  const amountA = base.amount;\n  const setAmountA = base.setAmount;\n\n  const quote = useCurrencyLeg(options);\n  const mintAddressB = quote.mintAddress;\n  const setMintAddressB = quote.setMint;\n  const amountB = quote.amount;\n  const setAmountB = quote.setAmount;\n\n  const pool = usePoolForBasket([base.mintAddress, quote.mintAddress]);\n\n  useEffect(() => {\n    const base =\n      tokens.find((t) => t.mintAddress === mintAddressA)?.tokenSymbol ||\n      mintAddressA;\n    const quote =\n      tokens.find((t) => t.mintAddress === mintAddressB)?.tokenSymbol ||\n      mintAddressB;\n\n    document.title = `Swap | Serum (${base}/${quote})`;\n  }, [mintAddressA, mintAddressB, tokens, location]);\n\n  // updates browser history on token changes\n  useEffect(() => {\n    // set history\n    const base =\n      tokens.find((t) => t.mintAddress === mintAddressA)?.tokenSymbol ||\n      mintAddressA;\n    const quote =\n      tokens.find((t) => t.mintAddress === mintAddressB)?.tokenSymbol ||\n      mintAddressB;\n\n    if (base && quote && location.pathname.indexOf(\"info\") < 0) {\n      history.push({\n        search: `?pair=${base}-${quote}`,\n      });\n    } else {\n      if (mintAddressA && mintAddressB) {\n        history.push({\n          search: ``,\n        });\n      } else {\n        return;\n      }\n    }\n  }, [mintAddressA, mintAddressB, tokens, history, location.pathname]);\n\n  // Updates tokens on location change\n  useEffect(() => {\n    if (!location.search && mintAddressA && mintAddressB) {\n      return;\n    }\n\n    let { defaultBase, defaultQuote } = getDefaultTokens(\n      tokens,\n      location.search\n    );\n    if (!defaultBase || !defaultQuote) {\n      return;\n    }\n\n    setMintAddressA(\n      tokens.find((t) => t.tokenSymbol === defaultBase)?.mintAddress ||\n        (isValidAddress(defaultBase) ? defaultBase : \"\") ||\n        \"\"\n    );\n    setMintAddressB(\n      tokens.find((t) => t.tokenSymbol === defaultQuote)?.mintAddress ||\n        (isValidAddress(defaultQuote) ? defaultQuote : \"\") ||\n        \"\"\n    );\n    // mintAddressA and mintAddressB are not included here to prevent infinite loop\n    // eslint-disable-next-line\n  }, [location, location.search, setMintAddressA, setMintAddressB, tokens]);\n\n  const calculateDependent = useCallback(async () => {\n    if (pool && mintAddressA && mintAddressB) {\n      let setDependent;\n      let amount;\n      let independent;\n      if (lastTypedAccount === mintAddressA) {\n        independent = mintAddressA;\n        setDependent = setAmountB;\n        amount = parseFloat(amountA);\n      } else {\n        independent = mintAddressB;\n        setDependent = setAmountA;\n        amount = parseFloat(amountB);\n      }\n\n      const result = await calculateDependentAmount(\n        connection,\n        independent,\n        amount,\n        pool,\n        poolOperation\n      );\n      if (typeof result === \"string\") {\n        setDependent(result);\n      } else if (result !== undefined && Number.isFinite(result)) {\n        setDependent(result.toFixed(6));\n      } else {\n        setDependent(\"\");\n      }\n    }\n  }, [\n    pool,\n    mintAddressA,\n    mintAddressB,\n    setAmountA,\n    setAmountB,\n    amountA,\n    amountB,\n    connection,\n    lastTypedAccount,\n    poolOperation,\n  ]);\n\n  useEffect(() => {\n    calculateDependent();\n  }, [amountB, amountA, lastTypedAccount, calculateDependent]);\n\n  return (\n    <CurrencyPairContext.Provider\n      value={{\n        A: base,\n        B: quote,\n        lastTypedAccount,\n        setLastTypedAccount,\n        setPoolOperation,\n        options,\n        setOptions,\n      }}\n    >\n      {children}\n    </CurrencyPairContext.Provider>\n  );\n}\n\nexport const useCurrencyPairState = () => {\n  const context = useContext(CurrencyPairContext);\n  return context as CurrencyPairContextState;\n};\n\nconst isValidAddress = (address: string) => {\n  try {\n    const decoded = bs58.decode(address);\n    return decoded.length === 32;\n  } catch {\n    return false;\n  }\n};\n\nfunction getDefaultTokens(tokens: KnownToken[], search: string) {\n  let defaultBase = \"SOL\";\n  let defaultQuote = \"USDC\";\n\n  const nameToToken = tokens.reduce((map, item) => {\n    map.set(item.tokenSymbol, item);\n    return map;\n  }, new Map<string, any>());\n\n  if (search) {\n    const urlParams = new URLSearchParams(search);\n    const pair = urlParams.get(\"pair\");\n    if (pair) {\n      let items = pair.split(\"-\");\n\n      if (items.length > 1) {\n        if (nameToToken.has(items[0]) || isValidAddress(items[0])) {\n          defaultBase = items[0];\n        }\n\n        if (nameToToken.has(items[1]) || isValidAddress(items[1])) {\n          defaultQuote = items[1];\n        }\n      }\n    }\n  }\n  return {\n    defaultBase,\n    defaultQuote,\n  };\n}\n","import { CurrencyContextState } from \"../utils/currencyPair\";\nimport { getTokenName, KnownTokenMap, getPoolName } from \"../utils/utils\";\nimport { PoolInfo } from \"../models\";\n\nexport const CREATE_POOL_LABEL = \"Create Liquidity Pool\";\nexport const INSUFFICIENT_FUNDS_LABEL = (tokenName: string) =>\n  `Insufficient ${tokenName} funds`;\nexport const POOL_NOT_AVAILABLE = (tokenA: string, tokenB: string) =>\n  `Pool ${tokenA}/${tokenB} doesn't exsist`;\nexport const ADD_LIQUIDITY_LABEL = \"Provide Liquidity\";\nexport const SWAP_LABEL = \"Swap\";\nexport const CONNECT_LABEL = \"Connect Wallet\";\nexport const SELECT_TOKEN_LABEL = \"Select a token\";\nexport const ENTER_AMOUNT_LABEL = \"Enter an amount\";\nexport const REMOVE_LIQUIDITY_LABEL = \"Remove Liquidity\";\n\nexport const generateActionLabel = (\n  action: string,\n  connected: boolean,\n  tokenMap: KnownTokenMap,\n  A: CurrencyContextState,\n  B: CurrencyContextState,\n  ignoreToBalance: boolean = false\n) => {\n  return !connected\n    ? CONNECT_LABEL\n    : !A.mintAddress\n    ? SELECT_TOKEN_LABEL\n    : !A.amount\n    ? ENTER_AMOUNT_LABEL\n    : !B.mintAddress\n    ? SELECT_TOKEN_LABEL\n    : !B.amount\n    ? ENTER_AMOUNT_LABEL\n    : !A.sufficientBalance()\n    ? INSUFFICIENT_FUNDS_LABEL(getTokenName(tokenMap, A.mintAddress))\n    : ignoreToBalance || B.sufficientBalance()\n    ? action\n    : INSUFFICIENT_FUNDS_LABEL(getTokenName(tokenMap, B.mintAddress));\n};\n\nexport const generateRemoveLabel = (\n  connected: boolean,\n  amount: number,\n  pool: PoolInfo,\n  tokenMap: KnownTokenMap,\n  hasSufficientBalance: boolean,\n  ignoreToBalance: boolean = false\n) => {\n  return !connected\n    ? CONNECT_LABEL\n    : !amount\n    ? ENTER_AMOUNT_LABEL\n    : !hasSufficientBalance\n    ? INSUFFICIENT_FUNDS_LABEL(getPoolName(tokenMap, pool))\n    : REMOVE_LIQUIDITY_LABEL;\n};\n\nexport const generateExactOneLabel = (\n  connected: boolean,\n  tokenMap: KnownTokenMap,\n  token?: CurrencyContextState\n) => {\n  return !connected\n    ? CONNECT_LABEL\n    : !token\n    ? SELECT_TOKEN_LABEL\n    : !parseFloat(token.amount || \"\")\n    ? ENTER_AMOUNT_LABEL\n    : !token.sufficientBalance()\n    ? INSUFFICIENT_FUNDS_LABEL(getTokenName(tokenMap, token.mintAddress))\n    : ADD_LIQUIDITY_LABEL;\n};\n","import React, { useMemo, useState } from \"react\";\nimport {\n  addLiquidity,\n  usePoolForBasket,\n  PoolOperation,\n} from \"../../utils/pools\";\nimport { Button, Card, Col, Dropdown, Popover, Radio, Row } from \"antd\";\nimport { useWallet } from \"../../utils/wallet\";\nimport {\n  useConnection,\n  useConnectionConfig,\n  useSlippageConfig,\n} from \"../../utils/connection\";\nimport { Spin } from \"antd\";\nimport { LoadingOutlined, SettingOutlined } from \"@ant-design/icons\";\nimport { notify } from \"../../utils/notifications\";\nimport { SupplyOverview } from \"./supplyOverview\";\nimport { CurrencyInput } from \"../currencyInput\";\nimport { PoolConfigCard } from \"./config\";\nimport \"./add.less\";\nimport { CurveType, PoolInfo, TokenSwapLayout } from \"../../models\";\nimport { useCurrencyPairState } from \"../../utils/currencyPair\";\nimport {\n  CREATE_POOL_LABEL,\n  ADD_LIQUIDITY_LABEL,\n  generateActionLabel,\n  generateExactOneLabel,\n} from \"../labels\";\nimport { AdressesPopover } from \"./address\";\nimport { formatPriceNumber, getPoolName } from \"../../utils/utils\";\nimport { useMint, useUserAccounts } from \"../../utils/accounts\";\nimport { useEnrichedPools } from \"../../context/market\";\nimport { PoolIcon } from \"../tokenIcon\";\nimport { AppBar } from \"../appBar\";\nimport { Settings } from \"../settings\";\nimport { programIds } from \"../../utils/ids\";\n\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\nexport const AddToLiquidity = () => {\n  const { wallet, connected } = useWallet();\n  const connection = useConnection();\n  const [pendingTx, setPendingTx] = useState(false);\n  const [depositType, setDepositType] = useState(\"both\");\n  const {\n    A,\n    B,\n    setLastTypedAccount,\n    setPoolOperation,\n    options,\n    setOptions,\n  } = useCurrencyPairState();\n  const [depositToken, setDepositToken] = useState<string>(A.mintAddress);\n  const pool = usePoolForBasket([A?.mintAddress, B?.mintAddress]);\n  const { slippage } = useSlippageConfig();\n  const { tokenMap } = useConnectionConfig();\n  const isLatestLayout = programIds().swapLayout === TokenSwapLayout;\n\n  const executeAction = !connected\n    ? wallet.connect\n    : async (instance?: PoolInfo) => {\n        const currentDepositToken = getDepositToken();\n        if (\n          isLatestLayout &&\n          depositType === \"one\" &&\n          currentDepositToken?.account &&\n          currentDepositToken.mint\n        ) {\n          setPendingTx(true);\n          const components = [\n            {\n              account: currentDepositToken.account,\n              mintAddress: currentDepositToken.mintAddress,\n              amount: currentDepositToken.convertAmount(),\n            },\n          ];\n          addLiquidity(\n            connection,\n            wallet,\n            components,\n            slippage,\n            instance,\n            options,\n            depositType\n          )\n            .then(() => {\n              setPendingTx(false);\n            })\n            .catch((e) => {\n              console.log(\"Transaction failed\", e);\n              notify({\n                description:\n                  \"Please try again and approve transactions from your wallet\",\n                message: \"Adding liquidity cancelled.\",\n                type: \"error\",\n              });\n              setPendingTx(false);\n            });\n        } else if (A.account && B.account && A.mint && B.mint) {\n          setPendingTx(true);\n          const components = [\n            {\n              account: A.account,\n              mintAddress: A.mintAddress,\n              amount: A.convertAmount(),\n            },\n            {\n              account: B.account,\n              mintAddress: B.mintAddress,\n              amount: B.convertAmount(),\n            },\n          ];\n\n          // use input from B as offset during pool init for curve with offset\n          if (\n            options.curveType === CurveType.ConstantProductWithOffset &&\n            !instance\n          ) {\n            options.token_b_offset = components[1].amount;\n            components[1].amount = 0;\n          }\n\n          addLiquidity(\n            connection,\n            wallet,\n            components,\n            slippage,\n            instance,\n            options\n          )\n            .then(() => {\n              setPendingTx(false);\n            })\n            .catch((e) => {\n              console.log(\"Transaction failed\", e);\n              notify({\n                description:\n                  \"Please try again and approve transactions from your wallet\",\n                message: \"Adding liquidity cancelled.\",\n                type: \"error\",\n              });\n              setPendingTx(false);\n            });\n        }\n      };\n\n  const hasSufficientBalance = A.sufficientBalance() && B.sufficientBalance();\n  const getDepositToken = () => {\n    if (!depositToken) {\n      return undefined;\n    }\n    return depositToken === A.mintAddress ? A : B;\n  };\n  const handleToggleDepositType = (item: any) => {\n    if (item === pool?.pubkeys.mint.toBase58()) {\n      setDepositType(\"both\");\n    } else if (item === A.mintAddress) {\n      if (depositType !== \"one\") {\n        setDepositType(\"one\");\n      }\n      setDepositToken(A.mintAddress);\n    } else if (item === B.mintAddress) {\n      if (depositType !== \"one\") {\n        setDepositType(\"one\");\n      }\n      setDepositToken(B.mintAddress);\n    }\n  };\n  const createPoolButton = pool && (\n    <Button\n      className=\"add-button\"\n      type=\"primary\"\n      size=\"large\"\n      onClick={() => executeAction()}\n      disabled={\n        connected &&\n        (pendingTx ||\n          !A.account ||\n          !B.account ||\n          A.account === B.account ||\n          !hasSufficientBalance)\n      }\n    >\n      {generateActionLabel(CREATE_POOL_LABEL, connected, tokenMap, A, B)}\n      {pendingTx && <Spin indicator={antIcon} className=\"add-spinner\" />}\n    </Button>\n  );\n\n  const addLiquidityButton = (\n    <Dropdown.Button\n      className=\"add-button\"\n      onClick={() => executeAction(pool)}\n      trigger={[\"click\"]}\n      disabled={\n        connected &&\n        (depositType === \"both\"\n          ? pendingTx ||\n            !A.account ||\n            !B.account ||\n            A.account === B.account ||\n            !hasSufficientBalance\n          : !getDepositToken()?.account ||\n            !getDepositToken()?.sufficientBalance())\n      }\n      type=\"primary\"\n      size=\"large\"\n      overlay={\n        <PoolConfigCard\n          options={options}\n          setOptions={setOptions}\n          action={createPoolButton}\n        />\n      }\n    >\n      {depositType === \"both\"\n        ? generateActionLabel(\n            pool ? ADD_LIQUIDITY_LABEL : CREATE_POOL_LABEL,\n            connected,\n            tokenMap,\n            A,\n            B\n          )\n        : generateExactOneLabel(connected, tokenMap, getDepositToken())}\n      {pendingTx && <Spin indicator={antIcon} className=\"add-spinner\" />}\n    </Dropdown.Button>\n  );\n\n  const getTokenOptions = () => {\n    let name: string = \"\";\n    let mint: string = \"\";\n    if (pool) {\n      name = getPoolName(tokenMap, pool);\n      mint = pool.pubkeys.mint.toBase58();\n    }\n    return (\n      <>\n        {pool && (\n          <Radio key={mint} value={mint} name={name}>\n            Add {name}\n          </Radio>\n        )}\n        {[A, B].map((item) => {\n          return (\n            <Radio\n              key={item.mintAddress}\n              value={item.mintAddress}\n              name={item.name}\n            >\n              Add {item.name}\n            </Radio>\n          );\n        })}\n      </>\n    );\n  };\n  return (\n    <>\n      <div className=\"input-card\">\n        <AdressesPopover pool={pool} />\n        <Popover\n          trigger=\"hover\"\n          content={\n            <div style={{ width: 300 }}>\n              Liquidity providers earn a fixed percentage fee on all trades\n              proportional to their share of the pool. Fees are added to the\n              pool, accrue in real time and can be claimed by withdrawing your\n              liquidity.\n            </div>\n          }\n        >\n          <Button type=\"text\">Read more about providing liquidity.</Button>\n        </Popover>\n        {isLatestLayout && pool && (\n          <div className=\"flex-row-center\">\n            <Radio.Group\n              style={{ margin: \"10px 0\" }}\n              onChange={(item) => handleToggleDepositType(item.target.value)}\n              value={\n                depositType === \"both\"\n                  ? pool?.pubkeys.mint.toBase58()\n                  : getDepositToken()?.mintAddress\n              }\n            >\n              {getTokenOptions()}\n            </Radio.Group>\n          </div>\n        )}\n        {depositType === \"both\" && (\n          <>\n            <CurrencyInput\n              title=\"Input\"\n              onInputChange={(val: any) => {\n                setPoolOperation(PoolOperation.Add);\n                if (A.amount !== val) {\n                  setLastTypedAccount(A.mintAddress);\n                }\n                A.setAmount(val);\n              }}\n              amount={A.amount}\n              mint={A.mintAddress}\n              onMintChange={(item) => {\n                A.setMint(item);\n              }}\n            />\n            <div>+</div>\n            <CurrencyInput\n              title={\n                options.curveType === CurveType.ConstantProductWithOffset\n                  ? \"Offset\"\n                  : \"Input\"\n              }\n              onInputChange={(val: any) => {\n                setPoolOperation(PoolOperation.Add);\n                if (B.amount !== val) {\n                  setLastTypedAccount(B.mintAddress);\n                }\n                B.setAmount(val);\n              }}\n              amount={B.amount}\n              mint={B.mintAddress}\n              onMintChange={(item) => {\n                B.setMint(item);\n              }}\n            />\n          </>\n        )}\n        {depositType === \"one\" && depositToken && (\n          <CurrencyInput\n            title=\"Input\"\n            onInputChange={(val: any) => {\n              setPoolOperation(PoolOperation.Add);\n              const dToken = getDepositToken();\n              if (dToken && dToken.amount !== val) {\n                setLastTypedAccount(dToken.mintAddress);\n              }\n              getDepositToken()?.setAmount(val);\n            }}\n            amount={getDepositToken()?.amount}\n            mint={getDepositToken()?.mintAddress}\n            hideSelect={true}\n          />\n        )}\n        {addLiquidityButton}\n        {pool && <PoolPrice pool={pool} />}\n        <SupplyOverview pool={pool} />\n      </div>\n\n      <YourPosition pool={pool} />\n    </>\n  );\n};\n\nexport const PoolPrice = (props: { pool: PoolInfo }) => {\n  const pool = props.pool;\n  const pools = useMemo(() => [props.pool].filter((p) => p) as PoolInfo[], [\n    props.pool,\n  ]);\n  const enriched = useEnrichedPools(pools)[0];\n\n  const { userAccounts } = useUserAccounts();\n  const lpMint = useMint(pool.pubkeys.mint);\n\n  const ratio =\n    userAccounts\n      .filter((f) => pool.pubkeys.mint.equals(f.info.mint))\n      .reduce((acc, item) => item.info.amount.toNumber() + acc, 0) /\n    (lpMint?.supply.toNumber() || 0);\n\n  if (!enriched) {\n    return null;\n  }\n  return (\n    <Card\n      className=\"ccy-input\"\n      style={{ borderRadius: 20, width: \"100%\" }}\n      bodyStyle={{ padding: \"7px\" }}\n      size=\"small\"\n      title=\"Prices and pool share\"\n    >\n      <Row style={{ width: \"100%\" }}>\n        <Col span={8}>\n          {formatPriceNumber.format(\n            parseFloat(enriched.liquidityA) / parseFloat(enriched.liquidityB)\n          )}\n        </Col>\n        <Col span={8}>\n          {formatPriceNumber.format(\n            parseFloat(enriched.liquidityB) / parseFloat(enriched.liquidityA)\n          )}\n        </Col>\n        <Col span={8}>\n          {ratio * 100 < 0.001 && ratio > 0 ? \"<\" : \"\"}\n          &nbsp;{formatPriceNumber.format(ratio * 100)}%\n        </Col>\n      </Row>\n      <Row style={{ width: \"100%\" }}>\n        <Col span={8}>\n          {enriched.names[0]} per {enriched.names[1]}\n        </Col>\n        <Col span={8}>\n          {enriched.names[1]} per {enriched.names[0]}\n        </Col>\n        <Col span={8}>Share of pool</Col>\n      </Row>\n    </Card>\n  );\n};\n\nexport const YourPosition = (props: { pool?: PoolInfo }) => {\n  const { pool } = props;\n  const pools = useMemo(() => [props.pool].filter((p) => p) as PoolInfo[], [\n    props.pool,\n  ]);\n  const enriched = useEnrichedPools(pools)[0];\n  const { userAccounts } = useUserAccounts();\n  const lpMint = useMint(pool?.pubkeys.mint);\n\n  if (!pool || !enriched) {\n    return null;\n  }\n  const baseMintAddress = pool.pubkeys.holdingMints[0].toBase58();\n  const quoteMintAddress = pool.pubkeys.holdingMints[1].toBase58();\n\n  const ratio =\n    userAccounts\n      .filter((f) => pool.pubkeys.mint.equals(f.info.mint))\n      .reduce((acc, item) => item.info.amount.toNumber() + acc, 0) /\n    (lpMint?.supply.toNumber() || 0);\n\n  return (\n    <Card\n      className=\"ccy-input\"\n      style={{ borderRadius: 20, width: \"100%\" }}\n      bodyStyle={{ padding: \"7px\" }}\n      size=\"small\"\n      title=\"Your Position\"\n    >\n      <div className=\"pool-card\" style={{ width: \"initial\" }}>\n        <div className=\"pool-card-row\">\n          <div className=\"pool-card-cell\">\n            <div style={{ display: \"flex\", alignItems: \"center\" }}>\n              <PoolIcon mintA={baseMintAddress} mintB={quoteMintAddress} />\n              <h3 style={{ margin: 0 }}>{enriched?.name}</h3>\n            </div>\n          </div>\n          <div className=\"pool-card-cell\">\n            <h3 style={{ margin: 0 }}>\n              {formatPriceNumber.format(ratio * enriched.supply)}\n            </h3>\n          </div>\n        </div>\n        <div className=\"pool-card-row\" style={{ margin: 0 }}>\n          <div className=\"pool-card-cell\">Your Share:</div>\n          <div className=\"pool-card-cell\">\n            {ratio * 100 < 0.001 && ratio > 0 ? \"<\" : \"\"}\n            {formatPriceNumber.format(ratio * 100)}%\n          </div>\n        </div>\n        <div className=\"pool-card-row\" style={{ margin: 0 }}>\n          <div className=\"pool-card-cell\">{enriched.names[0]}:</div>\n          <div className=\"pool-card-cell\">\n            {formatPriceNumber.format(ratio * enriched.liquidityA)}\n          </div>\n        </div>\n        <div className=\"pool-card-row\" style={{ margin: 0 }}>\n          <div className=\"pool-card-cell\">{enriched.names[1]}:</div>\n          <div className=\"pool-card-cell\">\n            {formatPriceNumber.format(ratio * enriched.liquidityB)}\n          </div>\n        </div>\n      </div>\n    </Card>\n  );\n};\n\nexport const AddToLiquidityView = () => {\n  return (\n    <>\n      <AppBar\n        right={\n          <Popover\n            placement=\"topRight\"\n            title=\"Settings\"\n            content={<Settings />}\n            trigger=\"click\"\n          >\n            <Button\n              shape=\"circle\"\n              size=\"large\"\n              type=\"text\"\n              icon={<SettingOutlined />}\n            />\n          </Popover>\n        }\n      />\n      <Card\n        className=\"exchange-card\"\n        headStyle={{ padding: 0 }}\n        bodyStyle={{ position: \"relative\" }}\n      >\n        <AddToLiquidity />\n      </Card>\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Button, Card, Col, Radio, Row, Slider, Spin, Typography } from \"antd\";\n\nimport { removeLiquidity, removeExactOneLiquidity } from \"../../utils/pools\";\nimport { useWallet } from \"../../utils/wallet\";\nimport { useConnection, useConnectionConfig } from \"../../utils/connection\";\nimport { PoolInfo, TokenAccount, TokenSwapLayout } from \"../../models\";\nimport { notify } from \"../../utils/notifications\";\nimport { TokenIcon } from \"../tokenIcon\";\nimport { YourPosition } from \"./add\";\nimport { useMint } from \"../../utils/accounts\";\nimport {\n  formatPriceNumber,\n  getPoolName,\n  getTokenName,\n} from \"../../utils/utils\";\nimport { PoolCurrencyInput } from \"../currencyInput\";\nimport { LoadingOutlined } from \"@ant-design/icons\";\nimport { generateRemoveLabel } from \"../labels\";\nimport { programIds } from \"../../utils/ids\";\n\nexport const RemoveLiquidity = (props: {\n  instance: { account: TokenAccount; pool: PoolInfo };\n  removeRatio: number;\n  withdrawType: string;\n  amount: number;\n  withdrawToken: string;\n}) => {\n  const { account, pool } = props.instance;\n  const { removeRatio, withdrawType, amount, withdrawToken } = props;\n  const [pendingTx, setPendingTx] = useState(false);\n  const { wallet, connected } = useWallet();\n  const connection = useConnection();\n  const { tokenMap } = useConnectionConfig();\n  const mint = useMint(withdrawToken);\n\n  const isLatestLayout = programIds().swapLayout === TokenSwapLayout;\n\n  let liquidityAmount: number = removeRatio * account.info.amount.toNumber();\n  const hasSufficientBalance =\n    liquidityAmount <= account.info.amount.toNumber();\n\n  const onRemove = async () => {\n    try {\n      setPendingTx(true);\n      if (withdrawType === \"one\" && isLatestLayout) {\n        const tokenAmount = amount * Math.pow(10, mint?.decimals || 0);\n        await removeExactOneLiquidity(\n          connection,\n          wallet,\n          account,\n          liquidityAmount,\n          tokenAmount,\n          withdrawToken,\n          pool\n        );\n      } else {\n        await removeLiquidity(\n          connection,\n          wallet,\n          liquidityAmount,\n          account,\n          pool\n        );\n      }\n    } catch {\n      notify({\n        description:\n          \"Please try again and approve transactions from your wallet\",\n        message: \"Removing liquidity cancelled.\",\n        type: \"error\",\n      });\n    } finally {\n      setPendingTx(false);\n      // TODO: force refresh of pool accounts?\n    }\n  };\n\n  return (\n    <Button\n      className=\"add-button\"\n      type=\"primary\"\n      size=\"large\"\n      onClick={onRemove}\n      disabled={\n        connected &&\n        (pendingTx || !hasSufficientBalance || !account || !liquidityAmount)\n      }\n    >\n      {generateRemoveLabel(\n        connected,\n        liquidityAmount,\n        pool,\n        tokenMap,\n        hasSufficientBalance\n      )}\n      {pendingTx && (\n        <Spin\n          indicator={<LoadingOutlined style={{ fontSize: 24 }} spin />}\n          className=\"add-spinner\"\n        />\n      )}\n    </Button>\n  );\n};\n\nexport const RemoveLiquidityEntry = (props: {\n  instance: { account?: TokenAccount; pool: PoolInfo };\n  enriched: any;\n}) => {\n  const { account, pool } = props.instance;\n  const { enriched } = props;\n  const [inputType, setInputType] = useState(\"slider\");\n  const { tokenMap } = useConnectionConfig();\n  const isLatestLayout = programIds().swapLayout === TokenSwapLayout;\n  const lpMint = useMint(pool?.pubkeys.mint);\n\n  const [withdrawType, setWithdrawType] = useState(\"both\");\n  const [withdrawToken, setWithdrawToken] = useState<string>(\n    pool?.pubkeys.mint.toBase58()\n  );\n\n  const ratio =\n    (account?.info.amount.toNumber() || 0) / (lpMint?.supply.toNumber() || 1);\n\n  const baseMintAddress = enriched.mints[0];\n  const quoteMintAddress = enriched.mints[1];\n\n  const [inputInfo, setInputInfo] = useState({\n    amount: \"initial\",\n    lastTyped: \"pool\",\n    liquidityPercentage: 100,\n  });\n\n  const [inputsDescription, setInputsDescription] = useState({\n    pool: \"Input\",\n    poolAmount: formatPriceNumber.format(\n      ratio * (enriched?.supply || 0) * (inputInfo.liquidityPercentage / 100)\n    ),\n    tokenA: \"Output (estimated)\",\n    tokenAAmount: formatPriceNumber.format(\n      ratio *\n        (enriched?.liquidityA || 0) *\n        (inputInfo.liquidityPercentage / 100)\n    ),\n    tokenB: \"Output (estimated)\",\n    tokenBAmount: formatPriceNumber.format(\n      ratio *\n        (enriched?.liquidityB || 0) *\n        (inputInfo.liquidityPercentage / 100)\n    ),\n  });\n\n  useEffect(() => {\n    switch (inputInfo.lastTyped) {\n      case \"pool\": {\n        setInputsDescription({\n          pool: withdrawType === \"both\" ? \"Input\" : \"Output (Estimated)\",\n          poolAmount:\n            inputInfo.amount !== \"initial\"\n              ? inputInfo.amount\n              : formatPriceNumber.format(\n                  ratio *\n                    (enriched?.supply || 0) *\n                    (inputInfo.liquidityPercentage / 100)\n                ),\n          tokenA: withdrawType === \"one\" ? \"Input\" : \"Output (Estimated)\",\n          tokenAAmount: formatPriceNumber.format(\n            ratio *\n              (enriched?.liquidityA || 0) *\n              (inputInfo.liquidityPercentage / 100)\n          ),\n          tokenB: withdrawType === \"one\" ? \"Input\" : \"Output (Estimated)\",\n          tokenBAmount: formatPriceNumber.format(\n            ratio *\n              (enriched?.liquidityB || 0) *\n              (inputInfo.liquidityPercentage / 100)\n          ),\n        });\n        break;\n      }\n      case \"tokenA\": {\n        setInputsDescription({\n          pool: withdrawType === \"both\" ? \"Input\" : \"Output (Estimated)\",\n          poolAmount: formatPriceNumber.format(\n            ratio *\n              (enriched?.supply || 0) *\n              (inputInfo.liquidityPercentage / 100)\n          ),\n          tokenA: withdrawType === \"one\" ? \"Input\" : \"Output (Estimated)\",\n          tokenAAmount: inputInfo.amount,\n          tokenB: withdrawType === \"one\" ? \"Input\" : \"Output (Estimated)\",\n          tokenBAmount: formatPriceNumber.format(\n            ratio *\n              (enriched?.liquidityB || 0) *\n              (inputInfo.liquidityPercentage / 100)\n          ),\n        });\n        break;\n      }\n      case \"tokenB\": {\n        setInputsDescription({\n          pool: withdrawType === \"both\" ? \"Input\" : \"Output (Estimated)\",\n          poolAmount: formatPriceNumber.format(\n            ratio *\n              (enriched?.supply || 0) *\n              (inputInfo.liquidityPercentage / 100)\n          ),\n          tokenA: withdrawType === \"one\" ? \"Input\" : \"Output (Estimated)\",\n          tokenAAmount: formatPriceNumber.format(\n            ratio *\n              (enriched?.liquidityA || 0) *\n              (inputInfo.liquidityPercentage / 100)\n          ),\n          tokenB: withdrawType === \"one\" ? \"Input\" : \"Output (Estimated)\",\n          tokenBAmount: inputInfo.amount,\n        });\n        break;\n      }\n      case \"slider\": {\n        setInputsDescription({\n          pool: withdrawType === \"both\" ? \"Input\" : \"Output (Estimated)\",\n          poolAmount: formatPriceNumber.format(\n            ratio *\n              (enriched?.supply || 0) *\n              (inputInfo.liquidityPercentage / 100)\n          ),\n          tokenA: withdrawType === \"one\" ? \"Input\" : \"Output (Estimated)\",\n          tokenAAmount: formatPriceNumber.format(\n            ratio *\n              (enriched?.liquidityA || 0) *\n              (inputInfo.liquidityPercentage / 100)\n          ),\n          tokenB: withdrawType === \"one\" ? \"Input\" : \"Output (Estimated)\",\n          tokenBAmount: formatPriceNumber.format(\n            ratio *\n              (enriched?.liquidityB || 0) *\n              (inputInfo.liquidityPercentage / 100)\n          ),\n        });\n        break;\n      }\n    }\n  }, [inputInfo, enriched, ratio, inputInfo.liquidityPercentage, withdrawType]);\n\n  useEffect(() => {\n    if (withdrawType === \"one\") {\n      if (\n        withdrawToken === baseMintAddress &&\n        inputInfo.amount !== inputsDescription.tokenAAmount\n      ) {\n        setInputInfo({\n          ...inputInfo,\n          lastTyped: \"tokenA\",\n          amount: inputsDescription.tokenAAmount,\n        });\n      } else if (\n        withdrawToken === quoteMintAddress &&\n        inputInfo.amount !== inputsDescription.tokenBAmount\n      ) {\n        setInputInfo({\n          ...inputInfo,\n          lastTyped: \"tokenB\",\n          amount: inputsDescription.tokenBAmount,\n        });\n      }\n    }\n    // Only needed to change with specific states\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [withdrawToken, withdrawType, baseMintAddress, quoteMintAddress]);\n\n  if (!pool || !enriched) {\n    return null;\n  }\n\n  const handleInputChange = (val: any, inputSource: string) => {\n    switch (inputSource) {\n      case \"pool\": {\n        setInputInfo({\n          liquidityPercentage: (val * 100) / (enriched.supply * ratio),\n          amount: val,\n          lastTyped: \"pool\",\n        });\n        break;\n      }\n      case \"tokenA\": {\n        setInputInfo({\n          liquidityPercentage: (val * 100) / (enriched.liquidityA * ratio),\n          amount: val,\n          lastTyped: \"tokenA\",\n        });\n        break;\n      }\n      case \"tokenB\": {\n        setInputInfo({\n          liquidityPercentage: (val * 100) / (enriched.liquidityB * ratio),\n          amount: val,\n          lastTyped: \"tokenB\",\n        });\n        break;\n      }\n      case \"slider\": {\n        setInputInfo({\n          ...inputInfo,\n          liquidityPercentage: val,\n          lastTyped: \"slider\",\n        });\n        break;\n      }\n    }\n  };\n\n  const getTokenOptions = () => {\n    if (pool) {\n      const name = getPoolName(tokenMap, pool);\n      const mint = pool.pubkeys.mint.toBase58();\n      return (\n        <>\n          <Radio key={mint} value={mint} name={name}>\n            {name}\n          </Radio>\n          {pool.pubkeys.holdingMints.map((mint) => {\n            const mintAddress = mint.toBase58();\n            const tokenName = getTokenName(tokenMap, mintAddress);\n            return (\n              <Radio key={mintAddress} value={mintAddress} name={tokenName}>\n                {tokenName}\n              </Radio>\n            );\n          })}\n        </>\n      );\n    }\n    return null;\n  };\n\n  const handleToggleWithdrawType = (item: any) => {\n    if (item === pool?.pubkeys.mint.toBase58()) {\n      setWithdrawType(\"both\");\n      setWithdrawToken(pool?.pubkeys.mint.toBase58());\n    } else if (item === enriched.mints[0]) {\n      if (withdrawType !== \"one\") {\n        setWithdrawType(\"one\");\n      }\n      setWithdrawToken(enriched.mints[0]);\n    } else if (item === enriched.mints[1]) {\n      if (withdrawType !== \"one\") {\n        setWithdrawType(\"one\");\n      }\n      setWithdrawToken(enriched.mints[1]);\n    }\n  };\n  return (\n    <>\n      {inputType === \"slider\" && (\n        <div className=\"input-card\">\n          Remove Liquidity\n          <Card\n            className=\"ccy-input\"\n            style={{ borderRadius: 20, width: \"100%\" }}\n            size=\"small\"\n          >\n            <div className=\"pool-card\" style={{ width: \"initial\" }}>\n              <div className=\"pool-card-row\">\n                <div className=\"pool-card-cell\">Amount</div>\n                <div className=\"pool-card-cell\">\n                  <Button onClick={() => setInputType(\"input\")}>\n                    Detailed\n                  </Button>\n                </div>\n              </div>\n              <div className=\"pool-card-row\">\n                <div className=\"pool-card-cell\">\n                  <Typography.Text style={{ fontSize: \"42px\" }}>\n                    {formatPriceNumber.format(inputInfo.liquidityPercentage)}%\n                  </Typography.Text>\n                </div>\n              </div>\n              <div className=\"pool-card-row\">\n                <Slider\n                  style={{ width: \"100%\" }}\n                  value={inputInfo.liquidityPercentage}\n                  tipFormatter={(amount?: number) => `${amount}%`}\n                  min={0}\n                  max={100}\n                  onChange={(amount: number) =>\n                    setInputInfo({\n                      ...inputInfo,\n                      liquidityPercentage: amount,\n                      lastTyped: \"slider\",\n                    })\n                  }\n                />\n              </div>\n              <Row>\n                <Col span={6}>\n                  <Button\n                    onClick={() =>\n                      setInputInfo({\n                        ...inputInfo,\n                        liquidityPercentage: 25,\n                        lastTyped: \"slider\",\n                      })\n                    }\n                  >\n                    25%\n                  </Button>\n                </Col>\n                <Col span={6}>\n                  <Button\n                    onClick={() =>\n                      setInputInfo({\n                        ...inputInfo,\n                        liquidityPercentage: 50,\n                        lastTyped: \"slider\",\n                      })\n                    }\n                  >\n                    50%\n                  </Button>\n                </Col>\n                <Col span={6}>\n                  <Button\n                    onClick={() =>\n                      setInputInfo({\n                        ...inputInfo,\n                        liquidityPercentage: 75,\n                        lastTyped: \"slider\",\n                      })\n                    }\n                  >\n                    75%\n                  </Button>\n                </Col>\n                <Col span={6}>\n                  <Button\n                    onClick={() =>\n                      setInputInfo({\n                        ...inputInfo,\n                        liquidityPercentage: 100,\n                        lastTyped: \"slider\",\n                      })\n                    }\n                  >\n                    100%\n                  </Button>\n                </Col>\n              </Row>\n            </div>\n          </Card>\n          ↓\n          <Card\n            className=\"ccy-input\"\n            style={{ borderRadius: 20, width: \"100%\" }}\n            size=\"small\"\n          >\n            <div className=\"pool-card\" style={{ width: \"initial\" }}>\n              <div className=\"pool-card-row\">\n                <div className=\"pool-card-cell\">\n                  {formatPriceNumber.format(\n                    ratio *\n                      enriched.liquidityA *\n                      (inputInfo.liquidityPercentage / 100)\n                  )}\n                </div>\n                <div className=\"pool-card-cell\">\n                  <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                    <TokenIcon mintAddress={baseMintAddress} />\n                    <h3 style={{ margin: 0 }}>{enriched?.names[0]}</h3>\n                  </div>\n                </div>\n              </div>\n              <div className=\"pool-card-row\">\n                <div className=\"pool-card-cell\">\n                  {formatPriceNumber.format(\n                    ratio *\n                      enriched.liquidityB *\n                      (inputInfo.liquidityPercentage / 100)\n                  )}\n                </div>\n                <div className=\"pool-card-cell\">\n                  <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                    <TokenIcon mintAddress={quoteMintAddress} />\n                    <h3 style={{ margin: 0 }}>{enriched.names[1]}</h3>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </Card>\n        </div>\n      )}\n      {inputType === \"input\" && (\n        <div className=\"input-card\">\n          Remove Liquidity\n          {isLatestLayout && pool && (\n            <div className=\"flex-row-center\">\n              <Radio.Group\n                style={{ margin: \"10px 0\" }}\n                onChange={(item) => handleToggleWithdrawType(item.target.value)}\n                value={\n                  withdrawType === \"both\"\n                    ? pool?.pubkeys.mint.toBase58()\n                    : withdrawToken\n                }\n              >\n                {getTokenOptions()}\n              </Radio.Group>\n            </div>\n          )}\n          <Card\n            className=\"ccy-input\"\n            style={{ borderRadius: 20, width: \"100%\" }}\n            size=\"small\"\n          >\n            <div className=\"pool-card\" style={{ width: \"initial\" }}>\n              <div className=\"pool-card-row\">\n                <div className=\"pool-card-cell\">Amount Estimated</div>\n                <div className=\"pool-card-cell\">\n                  <Button onClick={() => setInputType(\"slider\")}>Simple</Button>\n                </div>\n              </div>\n              <div className=\"pool-card-row\">\n                <div className=\"pool-card-cell\">\n                  <Typography.Text style={{ fontSize: \"42px\" }}>\n                    {formatPriceNumber.format(inputInfo.liquidityPercentage)}%\n                  </Typography.Text>\n                </div>\n              </div>\n            </div>\n            <div className=\"pool-card-row\">\n              <Slider\n                style={{ width: \"100%\" }}\n                value={inputInfo.liquidityPercentage}\n                tipFormatter={(amount?: number) => `${amount}%`}\n                min={0}\n                max={100}\n                onChange={(amount: number) =>\n                  handleInputChange(amount, \"slider\")\n                }\n              />\n            </div>\n            <Row>\n              <Col span={6}>\n                <Button onClick={() => handleInputChange(25, \"slider\")}>\n                  25%\n                </Button>\n              </Col>\n              <Col span={6}>\n                <Button onClick={() => handleInputChange(50, \"slider\")}>\n                  50%\n                </Button>\n              </Col>\n              <Col span={6}>\n                <Button onClick={() => handleInputChange(75, \"slider\")}>\n                  75%\n                </Button>\n              </Col>\n              <Col span={6}>\n                <Button onClick={() => handleInputChange(100, \"slider\")}>\n                  100%\n                </Button>\n              </Col>\n            </Row>\n          </Card>\n          <PoolCurrencyInput\n            mint={pool.pubkeys.mint.toBase58()}\n            pool={pool}\n            title={inputsDescription.pool}\n            amount={inputsDescription.poolAmount}\n            onInputChange={(val: any) => {\n              handleInputChange(val, \"pool\");\n            }}\n          />\n          ↓\n          {(withdrawType === \"both\" || withdrawToken === baseMintAddress) && (\n            <PoolCurrencyInput\n              mint={baseMintAddress}\n              title={inputsDescription.tokenA}\n              amount={inputsDescription.tokenAAmount}\n              onInputChange={(val: any) => {\n                handleInputChange(val, \"tokenA\");\n              }}\n            />\n          )}\n          {withdrawType === \"both\" && \"+\"}\n          {(withdrawType === \"both\" || withdrawToken === quoteMintAddress) && (\n            <PoolCurrencyInput\n              mint={quoteMintAddress}\n              title={inputsDescription.tokenB}\n              amount={inputsDescription.tokenBAmount}\n              onInputChange={(val: any) => {\n                handleInputChange(val, \"tokenB\");\n              }}\n            />\n          )}\n        </div>\n      )}\n      {account && (\n        <RemoveLiquidity\n          instance={{ pool: pool, account: account }}\n          removeRatio={inputInfo.liquidityPercentage / 100}\n          withdrawType={withdrawType}\n          amount={\n            withdrawToken === baseMintAddress\n              ? parseFloat(inputsDescription.tokenAAmount)\n              : parseFloat(inputsDescription.tokenBAmount)\n          }\n          withdrawToken={withdrawToken}\n        />\n      )}\n      <YourPosition pool={pool} />\n    </>\n  );\n};\n","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { Card, Spin, Typography } from \"antd\";\nimport \"./styles.less\";\nimport echarts from \"echarts\";\nimport { PoolInfo } from \"../../models\";\nimport { PoolIcon } from \"../tokenIcon\";\nimport { formatShortDate, getPoolName } from \"../../utils/utils\";\nimport { useConnectionConfig } from \"../../utils/connection\";\nimport { BONFIDA_POOL_INTERVAL } from \"../../context/market\";\n\nexport const VOLUME_API = \"https://serum-api.bonfida.com/pools/volumes\";\nexport const LIQUIDITY_API = \"https://serum-api.bonfida.com/pools/liquidity\";\n\nconst API_ENDPOINTS: EndpointOptions = {\n  volume: VOLUME_API,\n  liquidity: LIQUIDITY_API,\n};\ntype EndpointOptions = {\n  [key: string]: string;\n};\ninterface VolumeData {\n  volume: number;\n  time: number;\n}\n\ninterface LiquidityData {\n  liquidityAinUsd: number;\n  liquidityBinUsd: number;\n  time: number;\n}\n\nexport const PoolLineChart = React.memo(\n  (props: {\n    pool?: PoolInfo;\n    limit?: number;\n    api: string;\n    chartName: string;\n    current?: string;\n    type?: string;\n    getComputedData: (item: any) => Array<number>;\n    getComputedTime: (item: any) => Array<string>;\n  }) => {\n    const { pool, api, limit, chartName, current } = props;\n    const chartDiv = useRef<HTMLDivElement>(null);\n    const echartsRef = useRef<any>(null);\n    const [loading, setLoading] = useState<boolean>(true);\n\n    let apiFilter: string = \"\";\n    let apiUrl: string = \"\";\n    const bonfidaTimer = useRef<number>(0);\n    if (pool) {\n      const baseMintAddress = pool.pubkeys.holdingMints[0].toBase58();\n      const quoteMintAddress = pool.pubkeys.holdingMints[1].toBase58();\n      apiFilter = `?mintA=${baseMintAddress}&mintB=${quoteMintAddress}`;\n    }\n    apiUrl = API_ENDPOINTS[api];\n\n    const bonfidaDataChartQuery = useCallback(async () => {\n      try {\n        const resp = await window.fetch(`${apiUrl}${apiFilter}`);\n        const data = await resp.json();\n        let finalData = data?.data || [];\n        if (limit && finalData) {\n          finalData = finalData.slice(0, limit);\n        }\n        updateChart(finalData);\n      } catch {\n        // ignore\n      }\n      bonfidaTimer.current = window.setTimeout(\n        () => bonfidaDataChartQuery(),\n        BONFIDA_POOL_INTERVAL\n      );\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []); // needs to only be called on mount an unmount\n\n    const updateChart = (data: any) => {\n      setLoading(false);\n      if (echartsRef.current) {\n        echartsRef.current.setOption({\n          textStyle: {\n            color: \"#fff\",\n          },\n          tooltip: {\n            trigger: \"axis\",\n            axisPointer: {\n              type: \"shadow\",\n            },\n          },\n          grid: {\n            containLabel: true,\n            left: 0,\n            right: 0,\n          },\n          xAxis: [\n            {\n              inverse: true,\n              type: \"category\",\n              data: props.getComputedTime(data),\n            },\n          ],\n          yAxis: [\n            {\n              type: \"value\",\n              scale: true,\n              splitLine: false,\n            },\n          ],\n          series: [\n            {\n              type: `${props.type || \"line\"}`,\n              data: props.getComputedData(data),\n            },\n          ],\n        });\n      }\n    };\n    useEffect(() => {\n      if (chartDiv.current) {\n        echartsRef.current = echarts.init(chartDiv.current);\n      }\n      bonfidaDataChartQuery();\n      return () => {\n        echartsRef.current.dispose();\n        window.clearTimeout(bonfidaTimer.current);\n      };\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []); // needs to only be called on mount an unmount\n    return (\n      <>\n        {loading && <Spin tip=\"Loading...\" />}\n        {!loading && (\n          <Typography.Title level={4}>\n            {chartName} {current || \"\"}\n          </Typography.Title>\n        )}\n        <div ref={chartDiv} style={{ height: \"250px\", width: \"100%\" }} />\n      </>\n    );\n  }\n);\n\nexport const HistoricalVolume = React.memo(\n  (props: { pool?: PoolInfo; current?: string }) => {\n    const getComputedData = (data: VolumeData[]) => {\n      return data.map((d) => d.volume);\n    };\n    const getComputedTime = (data: VolumeData[]) => {\n      return data.map((d: any) => formatShortDate.format(new Date(d.time)));\n    };\n    let name: string = \"Volume\";\n    if (props.current) {\n      name = \"Volume (24H)\";\n    }\n    return (\n      <PoolLineChart\n        pool={props.pool}\n        limit={props.pool ? 7 : 0}\n        api=\"volume\"\n        type=\"bar\"\n        chartName={name}\n        current={props.current}\n        getComputedData={getComputedData}\n        getComputedTime={getComputedTime}\n      />\n    );\n  }\n);\n\ntype GrupedData = {\n  [key: number]: number;\n};\n\nexport const HistoricalLiquidity = React.memo(\n  (props: { pool?: PoolInfo; current?: string }) => {\n    const groupByTime = (data: LiquidityData[]) => {\n      const groupedData: GrupedData = {};\n      for (const d of data) {\n        if (!groupedData[d.time]) {\n          groupedData[d.time] = 0;\n        }\n        groupedData[d.time] =\n          groupedData[d.time] + d.liquidityAinUsd + d.liquidityBinUsd;\n      }\n      return groupedData;\n    };\n    const getComputedData = (data: LiquidityData[]) => {\n      const groupedData = groupByTime(data);\n      return Object.values(groupedData);\n    };\n    const getComputedTime = (data: LiquidityData[]) => {\n      const groupedData = groupByTime(data);\n      return Object.keys(groupedData).map((key) =>\n        formatShortDate.format(new Date(parseInt(key)))\n      );\n    };\n    let name: string = \"Liquidity\";\n    if (props.current) {\n      name = \"Total Liquidity\";\n    }\n    return (\n      <PoolLineChart\n        pool={props.pool}\n        limit={props.pool ? 7 : 0}\n        api=\"liquidity\"\n        type=\"line\"\n        chartName={name}\n        current={props.current}\n        getComputedData={getComputedData}\n        getComputedTime={getComputedTime}\n      />\n    );\n  }\n);\n\nexport const HistoricalPoolData = React.memo((props: { pool: PoolInfo }) => {\n  const { tokenMap } = useConnectionConfig();\n  const pool = props.pool;\n  const baseMintAddress = pool.pubkeys.holdingMints[0].toBase58();\n  const quoteMintAddress = pool.pubkeys.holdingMints[1].toBase58();\n  const name = getPoolName(tokenMap, pool);\n  return (\n    <Card\n      className=\"pool-card\"\n      title={\n        <>\n          <PoolIcon\n            mintA={baseMintAddress}\n            mintB={quoteMintAddress}\n            className=\"left-icon\"\n          />\n          {name}\n        </>\n      }\n    >\n      <HistoricalLiquidity pool={pool} />\n      <HistoricalVolume pool={pool} />\n    </Card>\n  );\n});\n","import React, { useMemo, useState } from \"react\";\nimport { Button, Card, Popover, Typography } from \"antd\";\nimport { RemoveLiquidityEntry } from \"./remove\";\nimport { useMint, useUserAccounts } from \"../../utils/accounts\";\nimport { PoolIcon } from \"../tokenIcon\";\nimport { PoolInfo, TokenAccount } from \"../../models\";\nimport \"./view.less\";\nimport { useEnrichedPools } from \"../../context/market\";\nimport { formatNumber, formatPct, formatUSD } from \"../../utils/utils\";\nimport { ExplorerLink } from \"../explorerLink\";\nimport { SupplyOverview } from \"./supplyOverview\";\nimport { HistoricalLiquidity, HistoricalVolume } from \"../charts/historical\";\nimport { LineChartOutlined, AlignLeftOutlined } from \"@ant-design/icons\";\n\nconst { Text } = Typography;\n\nexport const PoolCard = (props: { pool: PoolInfo; account?: TokenAccount }) => {\n  const pools = useMemo(() => [props.pool].filter((p) => p) as PoolInfo[], [\n    props.pool,\n  ]);\n\n  const [displayMode, setDisplayMode] = useState(\"card\");\n\n  const enriched = useEnrichedPools(pools)[0];\n  const { userAccounts } = useUserAccounts();\n\n  const pool = props.pool;\n  const account = props.account;\n\n  const baseMintAddress = pool.pubkeys.holdingMints[0].toBase58();\n  const quoteMintAddress = pool.pubkeys.holdingMints[1].toBase58();\n  const lpMint = useMint(pool.pubkeys.mint);\n\n  const ratio =\n    (account?.info.amount.toNumber() || 0) / (lpMint?.supply.toNumber() || 0);\n\n  if (!enriched) {\n    return null;\n  }\n\n  const handleSwitchChartMode = () => {\n    if (displayMode === \"card\") {\n      setDisplayMode(\"chart\");\n    } else {\n      setDisplayMode(\"card\");\n    }\n  };\n  const handleSwitchViewMode = () => {\n    if (displayMode === \"card\") {\n      setDisplayMode(\"remove\");\n    } else {\n      setDisplayMode(\"card\");\n    }\n  };\n  const small: React.CSSProperties = { fontSize: 11 };\n\n  const userInfo = userAccounts.length > 0 && (\n    <>\n      <div className=\"pool-card-row\">\n        <Text type=\"secondary\" className=\"pool-card-cell \">\n          Your liquidity:\n        </Text>\n        <div className=\"pool-card-cell \">\n          <div className=\"left\">\n            <div>{formatUSD.format(ratio * enriched.liquidity)}</div>\n            <div>\n              <Text type=\"secondary\" style={small}>\n                {formatNumber.format(ratio * enriched.liquidityA)}{\" \"}\n                {enriched.names[0]}\n              </Text>\n            </div>\n            <div>\n              <Text type=\"secondary\" style={small}>\n                {formatNumber.format(ratio * enriched.liquidityB)}{\" \"}\n                {enriched.names[1]}\n              </Text>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"pool-card-row\">\n        <Text type=\"secondary\" className=\"pool-card-cell \">\n          Your quantity:\n        </Text>\n        <div className=\"pool-card-cell \">{ratio * enriched.supply}</div>\n      </div>\n      <div className=\"pool-card-row\">\n        <Text type=\"secondary\" className=\"pool-card-cell \">\n          Your fees (24h):\n        </Text>\n        <div className=\"pool-card-cell \" title={`${enriched.fees24h * ratio}`}>\n          {enriched.fees24h * ratio < 0.005 ? \"< \" : \"\"}\n          {formatUSD.format(enriched.fees24h * ratio)}\n        </div>\n      </div>\n\n      <hr />\n    </>\n  );\n\n  return (\n    <Card\n      className=\"pool-card\"\n      title={\n        <>\n          <PoolIcon\n            mintA={baseMintAddress}\n            mintB={quoteMintAddress}\n            className=\"left-icon\"\n          />\n          {enriched?.name}\n          <Popover\n            placement=\"topRight\"\n            trigger=\"hover\"\n            className=\"right-icon\"\n            content={`Show ${\n              displayMode === \"card\" ? \"historical\" : \"current\"\n            } data`}\n          >\n            {displayMode === \"remove\" ? (\n              <Button\n                shape=\"circle\"\n                size=\"middle\"\n                type=\"text\"\n                icon={<AlignLeftOutlined />}\n                onClick={() => setDisplayMode(\"card\")}\n              />\n            ) : (\n              <Button\n                shape=\"circle\"\n                size=\"middle\"\n                type=\"text\"\n                icon={\n                  displayMode === \"card\" ? (\n                    <LineChartOutlined />\n                  ) : (\n                    <AlignLeftOutlined />\n                  )\n                }\n                onClick={handleSwitchChartMode}\n              />\n            )}\n          </Popover>\n        </>\n      }\n    >\n      {displayMode === \"card\" && (\n        <>\n          {userInfo}\n          <div className=\"pool-card-row\">\n            <Text type=\"secondary\" className=\"pool-card-cell \">\n              Pool Liquidity:\n            </Text>\n            <div className=\"pool-card-cell \">\n              <div className=\"left\">\n                <div>{formatUSD.format(enriched.liquidity)}</div>\n                <div>\n                  <Text type=\"secondary\" style={small}>\n                    {formatNumber.format(enriched.liquidityA)}{\" \"}\n                    {enriched.names[0]}\n                  </Text>\n                </div>\n                <div>\n                  <Text type=\"secondary\" style={small}>\n                    {formatNumber.format(enriched.liquidityB)}{\" \"}\n                    {enriched.names[1]}\n                  </Text>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"pool-card-row\">\n            <Text type=\"secondary\" className=\"pool-card-cell \">\n              LP Supply:\n            </Text>\n            <div className=\"pool-card-cell \" title={enriched.supply}>\n              {formatNumber.format(enriched.supply)}\n            </div>\n          </div>\n          <div className=\"pool-card-row\">\n            <Text type=\"secondary\" className=\"pool-card-cell \">\n              Value per token:\n            </Text>\n            <div className=\"pool-card-cell \">\n              {formatUSD.format(enriched.liquidity / enriched.supply)}\n            </div>\n          </div>\n\n          <div className=\"pool-card-row\">\n            <Text type=\"secondary\" className=\"pool-card-cell \">\n              Volume (24h):\n            </Text>\n            <div className=\"pool-card-cell \">\n              {formatUSD.format(enriched.volume24h)}\n            </div>\n          </div>\n          <div className=\"pool-card-row\">\n            <Text type=\"secondary\" className=\"pool-card-cell \">\n              Fees (24h):\n            </Text>\n            <div className=\"pool-card-cell \">\n              {formatUSD.format(enriched.fees24h)}\n            </div>\n          </div>\n          <div className=\"pool-card-row\">\n            <Text type=\"secondary\" className=\"pool-card-cell \">\n              Approx. APY (24h):\n            </Text>\n            <div className=\"pool-card-cell \">\n              {formatPct.format(enriched.apy24h)}\n            </div>\n          </div>\n          <div className=\"pool-card-row\">\n            <Text type=\"secondary\" className=\"pool-card-cell \">\n              Address:\n            </Text>\n            <div className=\"pool-card-cell \">\n              <div className=\"left\">\n                <div>\n                  <ExplorerLink\n                    address={enriched.address}\n                    type=\"account\"\n                    length={4}\n                  />\n                </div>\n                <div className=\"small\">\n                  <ExplorerLink\n                    address={enriched.accounts[0]}\n                    type=\"account\"\n                    style={small}\n                    length={4}\n                  />\n                  <Text type=\"secondary\" style={small}>\n                    {\" \"}\n                    {enriched.names[0]}\n                  </Text>\n                </div>\n                <div className=\"small\">\n                  <ExplorerLink\n                    address={enriched.accounts[1]}\n                    type=\"account\"\n                    style={small}\n                    length={4}\n                  />\n                  <Text type=\"secondary\" style={small}>\n                    {\" \"}\n                    {enriched.names[1]}\n                  </Text>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <SupplyOverview pool={pool} />\n          <div className=\"pool-card-row\">\n            {/* {item && <Button type=\"default\" onClick={setPair}>Add</Button>} */}\n            {props.account && (\n              <Button onClick={handleSwitchViewMode}>Remove</Button>\n            )}\n          </div>\n        </>\n      )}\n      {displayMode === \"chart\" && (\n        <>\n          <HistoricalLiquidity\n            pool={pool}\n            current={formatUSD.format(enriched.liquidity)}\n          />\n          <HistoricalVolume\n            pool={pool}\n            current={formatUSD.format(enriched.volume24h)}\n          />\n        </>\n      )}\n      {displayMode === \"remove\" && account && (\n        <RemoveLiquidityEntry\n          instance={{ pool: pool, account: account }}\n          enriched={enriched}\n        />\n      )}\n    </Card>\n  );\n};\n","import React, { useMemo } from \"react\";\nimport { ConfigProvider, Empty } from \"antd\";\nimport { useOwnedPools } from \"../../utils/pools\";\nimport { useMint } from \"../../utils/accounts\";\nimport { PoolIcon } from \"../tokenIcon\";\nimport { PoolInfo, TokenAccount } from \"../../models\";\nimport \"./quickView.less\";\nimport { useEnrichedPools } from \"../../context/market\";\nimport { formatUSD } from \"../../utils/utils\";\n\nconst PoolItem = (props: {\n  item: { pool: PoolInfo; isFeeAccount: boolean; account: TokenAccount };\n  poolDetails: any;\n}) => {\n  const item = props.item;\n  const mint = useMint(item.account.info.mint.toBase58());\n  const amount =\n    item.account.info.amount.toNumber() / Math.pow(10, mint?.decimals || 0);\n\n  const supply = mint?.supply.toNumber() || 0;\n  const poolContribution = item.account.info.amount.toNumber() / supply;\n  const contributionInUSD = poolContribution * props.poolDetails?.liquidity;\n  const feesInUSD = poolContribution * props.poolDetails?.fees;\n\n  // amount / supply * liquidity\n\n  if (!amount) {\n    return null;\n  }\n\n  const sorted = item.pool.pubkeys.holdingMints.map((a) => a.toBase58()).sort();\n\n  if (item) {\n    return (\n      <div\n        className=\"pool-item-row\"\n        title={`LP Token: ${props.item.pool.pubkeys.mint.toBase58()}, account: ${props.item.account.pubkey.toBase58()}`}\n      >\n        <PoolIcon\n          mintA={sorted[0]}\n          mintB={sorted[1]}\n          style={{ marginLeft: \"0.5rem\" }}\n        />\n        <div className=\"pool-item-name\">{props.poolDetails?.name}</div>\n        <div className=\"pool-item-amount\">\n          {formatUSD.format(contributionInUSD)}\n        </div>\n        <div className=\"pool-item-amount\">{formatUSD.format(feesInUSD)}</div>\n        <div className=\"pool-item-type\" title=\"Fee account\">\n          {item.isFeeAccount ? \" (F) \" : \" \"}\n        </div>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nexport const PoolAccounts = (props: { legacy: boolean }) => {\n  const pools = useOwnedPools(props.legacy);\n  const userPools = useMemo(() => {\n    return pools.map((p) => p.pool);\n  }, [pools]);\n\n  const enriched = useEnrichedPools(userPools);\n\n  return (\n    <>\n      <div>Your Liquidity</div>\n      <ConfigProvider\n        renderEmpty={() => (\n          <Empty\n            image={Empty.PRESENTED_IMAGE_SIMPLE}\n            description=\"No liquidity found.\"\n          />\n        )}\n      >\n        <div className=\"pools-grid\">\n          <div className=\"pool-item-header\">\n            <div style={{ width: 48 }} />\n            <div className=\"pool-item-name\">Pool</div>\n            <div className=\"pool-item-amount\">Liquidity</div>\n            <div className=\"pool-item-amount\">Fees</div>\n            <div className=\"pool-item-type\" />\n            <div />\n          </div>\n          {pools.map((p) => (\n            <PoolItem\n              key={p?.account.pubkey.toBase58()}\n              item={p as any}\n              poolDetails={enriched.find((e) => e.raw === p.pool)}\n            />\n          ))}\n        </div>\n      </ConfigProvider>\n    </>\n  );\n};\n","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useConnection, useSlippageConfig } from \"../../utils/connection\";\nimport { Button, Modal } from \"antd\";\nimport { cache, useCachedPool } from \"../../utils/accounts\";\nimport {\n  addLiquidity,\n  removeLiquidity,\n  useOwnedPools,\n} from \"../../utils/pools\";\nimport { useWallet } from \"../../utils/wallet\";\nimport { PoolAccounts } from \"../pool/quickView\";\nimport { LiquidityComponent } from \"../../models\";\n\nexport const MigrationModal = () => {\n  const [visible, setVisable] = useState(false);\n  const [ack, setAck] = useState(false);\n  const [executing, setExecuting] = useState(false);\n  const [completed, setCompleted] = useState(false);\n\n  const { wallet, connected } = useWallet();\n  const connection = useConnection();\n  const { slippage } = useSlippageConfig();\n\n  const activePools = useCachedPool();\n  const legacyOwned = useOwnedPools(true);\n\n  const poolsToMigrate = useMemo(() => {\n    return legacyOwned\n      .map((item) => {\n        const account = item.account;\n        const fromPool = item.pool;\n\n        const toPool = activePools.pools.find(\n          (p) =>\n            (p.pubkeys.holdingMints[0].equals(\n              fromPool.pubkeys.holdingMints[0]\n            ) &&\n              p.pubkeys.holdingMints[1].equals(\n                fromPool.pubkeys.holdingMints[1]\n              )) ||\n            (p.pubkeys.holdingMints[0].equals(\n              fromPool.pubkeys.holdingMints[1]\n            ) &&\n              p.pubkeys.holdingMints[1].equals(\n                fromPool.pubkeys.holdingMints[0]\n              ))\n        );\n\n        return {\n          account,\n          fromPool,\n          toPool,\n        };\n      })\n      .filter((item) => item.toPool !== undefined);\n  }, [activePools, legacyOwned]);\n\n  const handleOk = useCallback(async () => {\n    setAck(true);\n    setExecuting(true);\n    for (let i = 0; i < poolsToMigrate.length; i++) {\n      try {\n        const item = poolsToMigrate[i];\n        const account = item.account;\n        const fromPool = item.fromPool;\n        const toPool = item.toPool;\n\n        let liquidityAmount = account.info.amount.toNumber();\n        const poolMint = await cache.queryMint(\n          connection,\n          fromPool.pubkeys.mint\n        );\n        const baseAccount = await cache.queryAccount(\n          connection,\n          fromPool.pubkeys.holdingAccounts[0]\n        );\n        const quoteAccount = await cache.queryAccount(\n          connection,\n          fromPool.pubkeys.holdingAccounts[1]\n        );\n\n        const ownershipRatio = liquidityAmount / poolMint.supply.toNumber();\n\n        const baseAmount = Math.floor(\n          baseAccount.info.amount.toNumber() * ownershipRatio\n        );\n        const quoteAmount = Math.floor(\n          quoteAccount.info.amount.toNumber() * ownershipRatio\n        );\n\n        const toAccounts = await removeLiquidity(\n          connection,\n          wallet,\n          liquidityAmount,\n          account,\n          fromPool\n        );\n\n        const sameMintOrder =\n          fromPool.pubkeys.holdingMints[0].toBase58() ===\n          toPool?.pubkeys.holdingMints[0].toBase58();\n        if (!sameMintOrder) {\n          toAccounts.reverse();\n        }\n\n        const components: LiquidityComponent[] = [\n          {\n            amount: baseAmount,\n            account: cache.getAccount(toAccounts[0]),\n            mintAddress: toPool?.pubkeys.holdingMints[0].toBase58() || \"\",\n          },\n          {\n            amount: quoteAmount,\n            account: cache.getAccount(toAccounts[1]),\n            mintAddress: toPool?.pubkeys.holdingMints[1].toBase58() || \"\",\n          },\n        ];\n        await addLiquidity(connection, wallet, components, slippage, toPool);\n      } catch {\n        // TODO:\n      }\n    }\n    setExecuting(false);\n    setCompleted(true);\n  }, [connection, wallet, slippage, setAck, poolsToMigrate]);\n\n  const handleCancel = useCallback(() => {\n    setAck(true);\n\n    if (!executing) {\n      setVisable(false);\n    }\n  }, [executing, setVisable, setAck]);\n\n  useEffect(() => {\n    if (poolsToMigrate.length > 0 && !ack) {\n      setVisable(true);\n    }\n  }, [poolsToMigrate, connected, ack]);\n\n  return (\n    <Modal\n      visible={visible}\n      title=\"Liquidity migration\"\n      onOk={handleOk}\n      onCancel={handleCancel}\n      closable={!executing}\n      footer={[\n        <Button\n          key=\"back\"\n          onClick={handleCancel}\n          disabled={executing || completed}\n        >\n          Ask me later\n        </Button>,\n        <Button\n          key=\"submit\"\n          type=\"primary\"\n          loading={executing}\n          disabled={completed}\n          onClick={handleOk}\n        >\n          Migrate\n        </Button>,\n      ]}\n    >\n      {completed ? (\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"space-around\",\n            alignItems: \"center\",\n          }}\n        >\n          <h2>Congratulations!</h2>\n          <div>Your migration has been successful.</div>\n          <Button type=\"primary\">Close</Button>\n        </div>\n      ) : (\n        <>\n          <p>\n            You are identified as liquidity provider that used v1 of Serum Swap.\n          </p>\n          <p>\n            Please click migrate button to move to new version of the contract\n          </p>\n          <p>During migration your wallet will ask for multiple approvals.</p>\n          <PoolAccounts legacy={true} />\n        </>\n      )}\n    </Modal>\n  );\n};\n","import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  Button,\n  Card,\n  Col,\n  Popover,\n  Row,\n  Table,\n  Tooltip,\n  Typography,\n} from \"antd\";\nimport { AppBar } from \"./../appBar\";\nimport { Settings } from \"../settings\";\nimport {\n  SettingOutlined,\n  TableOutlined,\n  OneToOneOutlined,\n} from \"@ant-design/icons\";\nimport { PoolIcon } from \"../tokenIcon\";\nimport { Input } from \"antd\";\nimport \"./styles.less\";\nimport echarts from \"echarts\";\nimport { useEnrichedPools } from \"../../context/market\";\nimport { usePools } from \"../../utils/pools\";\nimport {\n  formatNumber,\n  formatPct,\n  formatUSD,\n  useLocalStorageState,\n} from \"../../utils/utils\";\nimport { PoolAddress } from \"../pool/address\";\nimport { PoolCard } from \"./../pool/card\";\nimport { MigrationModal } from \"../migration\";\nimport { HistoricalLiquidity, HistoricalVolume } from \"./historical\";\n\nconst { Text } = Typography;\n\nconst { Search } = Input;\n\nconst FlashText = (props: { text: string; val: number }) => {\n  const [activeClass, setActiveClass] = useState(\"\");\n  const [value] = useState(props.val);\n  useEffect(() => {\n    if (props.val !== value) {\n      setActiveClass(props.val > value ? \"flash-positive\" : \"flash-negative\");\n\n      setTimeout(() => setActiveClass(\"\"), 200);\n    }\n  }, [props.text, props.val, value]);\n\n  return <span className={activeClass}>{props.text}</span>;\n};\n\ninterface Totals {\n  liquidity: number;\n  volume: number;\n  fees: number;\n}\n\nconst DEFAULT_DISPLAY_TYPE = \"Table\";\n\nexport const ChartsView = React.memo(() => {\n  const [search, setSearch] = useState<string>(\"\");\n  const [totals, setTotals] = useState<Totals>(() => ({\n    liquidity: 0,\n    volume: 0,\n    fees: 0,\n  }));\n  const chartDiv = useRef<HTMLDivElement>(null);\n  const echartsRef = useRef<any>(null);\n  const { pools } = usePools();\n  const enriched = useEnrichedPools(pools);\n\n  const [infoDisplayType, setInfoDisplayType] = useLocalStorageState(\n    \"infoDisplayType\",\n    DEFAULT_DISPLAY_TYPE\n  );\n\n  useEffect(() => {\n    if (chartDiv.current) {\n      echartsRef.current = echarts.init(chartDiv.current);\n    }\n\n    return () => {\n      echartsRef.current.dispose();\n    };\n  }, []);\n\n  // TODO: display user percent in the pool\n  // const { ownedPools } = useOwnedPools();\n\n  // TODO: create cache object with layout type, get, query, add\n\n  let searchRegex: RegExp | undefined = useMemo(() => {\n    try {\n      return new RegExp(search, \"i\");\n    } catch {\n      // ignore bad regex typed by user\n    }\n  }, [search]);\n\n  const updateChart = useCallback(() => {\n    if (echartsRef.current) {\n      echartsRef.current.setOption({\n        series: [\n          {\n            name: \"Liquidity\",\n            type: \"treemap\",\n            top: 0,\n            bottom: 10,\n            left: 30,\n            right: 30,\n            animation: false,\n            // visibleMin: 300,\n            label: {\n              show: true,\n              formatter: \"{b}\",\n            },\n            itemStyle: {\n              normal: {\n                borderColor: \"#000\",\n              },\n            },\n            breadcrumb: {\n              show: false,\n            },\n            data: enriched\n              .filter(\n                (row) => !search || !searchRegex || searchRegex.test(row.name)\n              )\n              .map((row) => {\n                return {\n                  value: row.liquidity,\n                  name: row.name,\n                  path: `Liquidity/${row.name}`,\n                  data: row,\n                };\n              }),\n          },\n        ],\n      });\n    }\n  }, [enriched, search, searchRegex]);\n\n  // Updates total values\n  useEffect(() => {\n    setTotals(\n      enriched.reduce(\n        (acc, item) => {\n          acc.liquidity = acc.liquidity + item.liquidity;\n          acc.volume = acc.volume + item.volume24h;\n          acc.fees = acc.fees + item.fees;\n          return acc;\n        },\n        { liquidity: 0, volume: 0, fees: 0 } as Totals\n      )\n    );\n\n    updateChart();\n  }, [enriched, updateChart, search]);\n\n  const columns = [\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      key: \"name\",\n      render(text: string, record: any) {\n        return {\n          props: {\n            style: {},\n          },\n          children: (\n            <div style={{ display: \"flex\" }}>\n              <PoolIcon mintA={record.mints[0]} mintB={record.mints[1]} />\n              <a href={record.link} target=\"_blank\" rel=\"noopener noreferrer\">\n                {text}\n              </a>\n            </div>\n          ),\n        };\n      },\n    },\n    {\n      title: \"Liquidity\",\n      dataIndex: \"liquidity\",\n      key: \"liquidity\",\n      render(text: string, record: any) {\n        return {\n          props: {\n            style: { textAlign: \"right\" },\n          },\n          children: (\n            <div>\n              <div>{formatUSD.format(record.liquidity)}</div>\n              <div>\n                <Text type=\"secondary\" style={{ fontSize: 11 }}>\n                  {formatNumber.format(record.liquidityA)} {record.names[0]}\n                </Text>\n              </div>\n              <div>\n                <Text type=\"secondary\" style={{ fontSize: 11 }}>\n                  {formatNumber.format(record.liquidityB)} {record.names[1]}\n                </Text>\n              </div>\n            </div>\n          ),\n        };\n      },\n      sorter: (a: any, b: any) => a.liquidity - b.liquidity,\n      defaultSortOrder: \"descend\" as any,\n    },\n    {\n      title: \"Supply\",\n      dataIndex: \"supply\",\n      key: \"supply\",\n      render(text: string, record: any) {\n        return {\n          props: {\n            style: { textAlign: \"right\" },\n          },\n          children: <FlashText text={text} val={record.supply} />,\n        };\n      },\n      sorter: (a: any, b: any) => a.supply - b.supply,\n    },\n    {\n      title: \"Volume (24h)\",\n      dataIndex: \"volume\",\n      key: \"volume\",\n      render(text: string, record: any) {\n        return {\n          props: {\n            style: { textAlign: \"right\" },\n          },\n          children: (\n            <FlashText\n              text={formatUSD.format(record.volume24h)}\n              val={record.volume24h}\n            />\n          ),\n        };\n      },\n      sorter: (a: any, b: any) => a.volume24h - b.volume24h,\n    },\n    {\n      title: \"Fees (24h)\",\n      dataIndex: \"fees24h\",\n      key: \"fees24h\",\n      render(text: string, record: any) {\n        return {\n          props: {\n            style: { textAlign: \"right\" },\n          },\n          children: (\n            <FlashText\n              text={formatUSD.format(record.fees24h)}\n              val={record.fees24h}\n            />\n          ),\n        };\n      },\n      sorter: (a: any, b: any) => a.fees24h - b.fees24h,\n    },\n    {\n      title: \"APY\",\n      dataIndex: \"apy\",\n      key: \"apy\",\n      render(text: string, record: any) {\n        return {\n          props: {\n            style: { textAlign: \"right\" },\n          },\n          children: formatPct.format(record.apy),\n        };\n      },\n      sorter: (a: any, b: any) => a.apy - b.apy,\n    },\n    {\n      title: \"Address\",\n      dataIndex: \"address\",\n      key: \"address\",\n      render(text: string, record: any) {\n        return {\n          props: {\n            style: { fontFamily: \"monospace\" } as React.CSSProperties,\n          },\n          children: <PoolAddress pool={record.raw} />,\n        };\n      },\n    },\n  ];\n\n  return (\n    <>\n      <AppBar\n        right={\n          <Popover\n            placement=\"topRight\"\n            title=\"Settings\"\n            content={<Settings />}\n            trigger=\"click\"\n          >\n            <Button\n              shape=\"circle\"\n              size=\"large\"\n              type=\"text\"\n              icon={<SettingOutlined />}\n            />\n          </Popover>\n        }\n      />\n      <div className=\"info-header\">\n        <Search\n          className=\"search-input\"\n          placeholder=\"Filter\"\n          type=\"search\"\n          value={search}\n          onChange={(e) => setSearch(e.target.value)}\n          onSearch={(value) => setSearch(value)}\n          style={{ width: 200 }}\n        />\n        <Tooltip title=\"Show as table\">\n          <Button\n            size=\"small\"\n            type={infoDisplayType === \"Table\" ? \"primary\" : \"text\"}\n            onClick={() => setInfoDisplayType(\"Table\")}\n            icon={<TableOutlined />}\n          />\n        </Tooltip>\n        <Tooltip title=\"Show as cards\">\n          <Button\n            size=\"small\"\n            type={infoDisplayType === \"Card\" ? \"primary\" : \"text\"}\n            onClick={() => setInfoDisplayType(\"Card\")}\n            icon={<OneToOneOutlined />}\n          />\n        </Tooltip>\n      </div>\n      <Row gutter={16} style={{ padding: \"0px 30px\", margin: \"30px 0px\" }}>\n        <Col span={12}>\n          <Card>\n            <HistoricalLiquidity current={formatUSD.format(totals.liquidity)} />\n          </Card>\n        </Col>\n        <Col span={12}>\n          <Card>\n            <HistoricalVolume current={formatUSD.format(totals.volume)} />\n          </Card>\n        </Col>\n      </Row>\n      <div ref={chartDiv} style={{ height: \"250px\", width: \"100%\" }} />\n      {infoDisplayType === \"Table\" ? (\n        <Table\n          dataSource={enriched.filter(\n            (row) => !search || !searchRegex || searchRegex.test(row.name)\n          )}\n          columns={columns}\n          size=\"small\"\n          pagination={{ pageSize: 10 }}\n        />\n      ) : (\n        <div className=\"pool-grid\">\n          {enriched\n            .sort((a, b) => b.liquidity - a.liquidity)\n            .map((p) => {\n              return <PoolCard pool={p.raw} />;\n            })}\n        </div>\n      )}\n      <MigrationModal />\n    </>\n  );\n});\n","import React from \"react\";\nimport { Button, Popover } from \"antd\";\nimport { useOwnedPools } from \"../../utils/pools\";\nimport \"./view.less\";\nimport { Settings } from \"./../settings\";\nimport { SettingOutlined } from \"@ant-design/icons\";\nimport { AppBar } from \"./../appBar\";\nimport { useWallet } from \"../../utils/wallet\";\nimport { PoolCard } from \"./card\";\nimport { MigrationModal } from \"../migration\";\n\nexport const PoolOverview = () => {\n  const owned = useOwnedPools();\n  const { connected } = useWallet();\n\n  return (\n    <>\n      <AppBar\n        right={\n          <Popover\n            placement=\"topRight\"\n            title=\"Settings\"\n            content={<Settings />}\n            trigger=\"click\"\n          >\n            <Button\n              shape=\"circle\"\n              size=\"large\"\n              type=\"text\"\n              icon={<SettingOutlined />}\n            />\n          </Popover>\n        }\n      />\n      <div className=\"pool-grid\">\n        {owned.map((o) => (\n          <PoolCard\n            key={o.pool.pubkeys.account.toBase58()}\n            pool={o.pool}\n            account={o.account}\n          />\n        ))}\n        {!connected && <h3>Connect to a wallet to view your liquidity.</h3>}\n      </div>\n      <MigrationModal />\n    </>\n  );\n};\n","import { Button, Card, Popover, Spin, Typography } from \"antd\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport {\n  useConnection,\n  useConnectionConfig,\n  useSlippageConfig,\n} from \"../../utils/connection\";\nimport { useWallet } from \"../../utils/wallet\";\nimport { CurrencyInput } from \"../currencyInput\";\nimport {\n  LoadingOutlined,\n  SwapOutlined,\n  QuestionCircleOutlined,\n  SettingOutlined,\n} from \"@ant-design/icons\";\nimport {\n  swap,\n  usePoolForBasket,\n  PoolOperation,\n  LIQUIDITY_PROVIDER_FEE,\n} from \"../../utils/pools\";\nimport { notify } from \"../../utils/notifications\";\nimport { useCurrencyPairState } from \"../../utils/currencyPair\";\nimport { generateActionLabel, POOL_NOT_AVAILABLE, SWAP_LABEL } from \"../labels\";\nimport \"./trade.less\";\nimport { colorWarning, getTokenName } from \"../../utils/utils\";\nimport { AdressesPopover } from \"../pool/address\";\nimport { PoolInfo } from \"../../models\";\nimport { useEnrichedPools } from \"../../context/market\";\nimport { AppBar } from \"../appBar\";\nimport { Settings } from \"../settings\";\nimport { MigrationModal } from \"../migration\";\n\nconst { Text } = Typography;\n\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\nexport const TradeEntry = () => {\n  const { wallet, connected } = useWallet();\n  const connection = useConnection();\n  const [pendingTx, setPendingTx] = useState(false);\n  const {\n    A,\n    B,\n    setLastTypedAccount,\n    setPoolOperation,\n  } = useCurrencyPairState();\n  const pool = usePoolForBasket([A?.mintAddress, B?.mintAddress]);\n  const { slippage } = useSlippageConfig();\n  const { tokenMap } = useConnectionConfig();\n\n  const swapAccounts = () => {\n    const tempMint = A.mintAddress;\n    const tempAmount = A.amount;\n    A.setMint(B.mintAddress);\n    A.setAmount(B.amount);\n    B.setMint(tempMint);\n    B.setAmount(tempAmount);\n    // @ts-ignore\n    setPoolOperation((op: PoolOperation) => {\n      switch (+op) {\n        case PoolOperation.SwapGivenInput:\n          return PoolOperation.SwapGivenProceeds;\n        case PoolOperation.SwapGivenProceeds:\n          return PoolOperation.SwapGivenInput;\n        case PoolOperation.Add:\n          return PoolOperation.SwapGivenInput;\n      }\n    });\n  };\n\n  const handleSwap = async () => {\n    if (A.account && B.mintAddress) {\n      try {\n        setPendingTx(true);\n\n        const components = [\n          {\n            account: A.account,\n            mintAddress: A.mintAddress,\n            amount: A.convertAmount(),\n          },\n          {\n            mintAddress: B.mintAddress,\n            amount: B.convertAmount(),\n          },\n        ];\n\n        await swap(connection, wallet, components, slippage, pool);\n      } catch {\n        notify({\n          description:\n            \"Please try again and approve transactions from your wallet\",\n          message: \"Swap trade cancelled.\",\n          type: \"error\",\n        });\n      } finally {\n        setPendingTx(false);\n      }\n    }\n  };\n\n  return (\n    <>\n      <div className=\"input-card\">\n        <AdressesPopover pool={pool} />\n        <CurrencyInput\n          title=\"Input\"\n          onInputChange={(val: any) => {\n            setPoolOperation(PoolOperation.SwapGivenInput);\n            if (A.amount !== val) {\n              setLastTypedAccount(A.mintAddress);\n            }\n\n            A.setAmount(val);\n          }}\n          amount={A.amount}\n          mint={A.mintAddress}\n          onMintChange={(item) => {\n            A.setMint(item);\n          }}\n        />\n        <Button type=\"primary\" className=\"swap-button\" onClick={swapAccounts}>\n          ⇅\n        </Button>\n        <CurrencyInput\n          title=\"To (Estimate)\"\n          onInputChange={(val: any) => {\n            setPoolOperation(PoolOperation.SwapGivenProceeds);\n            if (B.amount !== val) {\n              setLastTypedAccount(B.mintAddress);\n            }\n\n            B.setAmount(val);\n          }}\n          amount={B.amount}\n          mint={B.mintAddress}\n          onMintChange={(item) => {\n            B.setMint(item);\n          }}\n        />\n      </div>\n      <Button\n        className=\"trade-button\"\n        type=\"primary\"\n        size=\"large\"\n        onClick={connected ? handleSwap : wallet.connect}\n        style={{ width: \"100%\" }}\n        disabled={\n          connected &&\n          (pendingTx ||\n            !A.account ||\n            !B.mintAddress ||\n            A.account === B.account ||\n            !A.sufficientBalance() ||\n            !pool)\n        }\n      >\n        {generateActionLabel(\n          !pool\n            ? POOL_NOT_AVAILABLE(\n                getTokenName(tokenMap, A.mintAddress),\n                getTokenName(tokenMap, B.mintAddress)\n              )\n            : SWAP_LABEL,\n          connected,\n          tokenMap,\n          A,\n          B,\n          true\n        )}\n        {pendingTx && <Spin indicator={antIcon} className=\"add-spinner\" />}\n      </Button>\n      <TradeInfo pool={pool} />\n    </>\n  );\n};\n\nexport const TradeInfo = (props: { pool?: PoolInfo }) => {\n  const { A, B } = useCurrencyPairState();\n  const { pool } = props;\n  const { slippage } = useSlippageConfig();\n  const pools = useMemo(() => (pool ? [pool] : []), [pool]);\n  const enriched = useEnrichedPools(pools);\n\n  const [amountOut, setAmountOut] = useState(0);\n  const [priceImpact, setPriceImpact] = useState(0);\n  const [lpFee, setLpFee] = useState(0);\n  const [exchangeRate, setExchangeRate] = useState(0);\n  const [priceAccount, setPriceAccount] = useState(\"\");\n\n  useEffect(() => {\n    if (!pool || enriched.length === 0) {\n      return;\n    }\n    if (B.amount) {\n      const minAmountOut = parseFloat(B?.amount) * (1 - slippage);\n      setAmountOut(minAmountOut);\n    }\n    const liqA = enriched[0].liquidityA;\n    const liqB = enriched[0].liquidityB;\n    const supplyRatio = liqA / liqB;\n    // We need to make sure the order matched the pool's accounts order\n    const enrichedA = A.mintAddress === enriched[0].mints[0] ? A : B;\n    const enrichedB = enrichedA.mintAddress === A.mintAddress ? B : A;\n    const calculatedRatio =\n      parseFloat(enrichedA.amount) / parseFloat(enrichedB.amount);\n    // % difference between pool ratio and  calculated ratio\n    setPriceImpact(Math.abs(100 - (calculatedRatio * 100) / supplyRatio));\n\n    // 6 decimals without trailing zeros\n    const lpFeeStr = (parseFloat(A.amount) * LIQUIDITY_PROVIDER_FEE).toFixed(6);\n    setLpFee(parseFloat(lpFeeStr));\n\n    if (priceAccount === B.mintAddress) {\n      setExchangeRate(parseFloat(B.amount) / parseFloat(A.amount));\n    } else {\n      setExchangeRate(parseFloat(A.amount) / parseFloat(B.amount));\n    }\n  }, [A, B, slippage, pool, enriched, priceAccount]);\n\n  const handleSwapPriceInfo = () => {\n    if (priceAccount !== B.mintAddress) {\n      setPriceAccount(B.mintAddress);\n    } else {\n      setPriceAccount(A.mintAddress);\n    }\n  };\n  return !!parseFloat(B.amount) ? (\n    <div className=\"pool-card\" style={{ width: \"initial\" }}>\n      <div className=\"pool-card-row\">\n        <Text className=\"pool-card-cell\">Price</Text>\n        <div className=\"pool-card-cell \" title={exchangeRate.toString()}>\n          <Button\n            shape=\"circle\"\n            size=\"middle\"\n            type=\"text\"\n            icon={<SwapOutlined />}\n            onClick={handleSwapPriceInfo}\n          >\n            {exchangeRate.toFixed(6)}&nbsp;\n            {priceAccount === B.mintAddress ? B.name : A.name} per&nbsp;\n            {priceAccount === B.mintAddress ? A.name : B.name}&nbsp;\n          </Button>\n        </div>\n      </div>\n      <div className=\"pool-card-row\">\n        <Text className=\"pool-card-cell\">\n          <Popover\n            trigger=\"hover\"\n            content={\n              <div style={{ width: 300 }}>\n                You transaction will revert if there is a large, unfavorable\n                price movement before it is confirmed.\n              </div>\n            }\n          >\n            Minimun Received <QuestionCircleOutlined />\n          </Popover>\n        </Text>\n        <div className=\"pool-card-cell \" title={amountOut.toString()}>\n          {amountOut.toFixed(6)} {B.name}\n        </div>\n      </div>\n      <div className=\"pool-card-row\">\n        <Text className=\"pool-card-cell\">\n          <Popover\n            trigger=\"hover\"\n            content={\n              <div style={{ width: 300 }}>\n                The difference between the market price and estimated price due\n                to trade size.\n              </div>\n            }\n          >\n            Price Impact <QuestionCircleOutlined />\n          </Popover>\n        </Text>\n        <div\n          className=\"pool-card-cell \"\n          title={priceImpact.toString()}\n          style={{ color: colorWarning(priceImpact) }}\n        >\n          {priceImpact < 0.01 ? \"< 0.01%\" : priceImpact.toFixed(3) + \"%\"}\n        </div>\n      </div>\n      <div className=\"pool-card-row\">\n        <Text className=\"pool-card-cell\">\n          <Popover\n            trigger=\"hover\"\n            content={\n              <div style={{ width: 300 }}>\n                A portion of each trade ({LIQUIDITY_PROVIDER_FEE * 100}%) goes\n                to liquidity providers as a protocol incentive.\n              </div>\n            }\n          >\n            Liquidity Provider Fee <QuestionCircleOutlined />\n          </Popover>\n        </Text>\n        <div className=\"pool-card-cell \" title={lpFee.toString()}>\n          {lpFee} {A.name}\n        </div>\n      </div>\n    </div>\n  ) : null;\n};\n\nexport const TradeView = () => {\n  return (\n    <>\n      <AppBar\n        right={\n          <Popover\n            placement=\"topRight\"\n            title=\"Settings\"\n            content={<Settings />}\n            trigger=\"click\"\n          >\n            <Button\n              shape=\"circle\"\n              size=\"large\"\n              type=\"text\"\n              icon={<SettingOutlined />}\n            />\n          </Popover>\n        }\n      />\n      <Card\n        className=\"exchange-card\"\n        headStyle={{ padding: 0 }}\n        bodyStyle={{ position: \"relative\" }}\n      >\n        <TradeEntry />\n      </Card>\n      <MigrationModal />\n    </>\n  );\n};\n","import React from \"react\";\nimport { Button, Card, Popover } from \"antd\";\nimport { TradeEntry } from \"./trade\";\nimport { AddToLiquidity } from \"./pool/add\";\nimport { Settings } from \"./settings\";\nimport { SettingOutlined } from \"@ant-design/icons\";\nimport { AppBar } from \"./appBar\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nexport const ExchangeView = (props: {}) => {\n  const tabStyle: React.CSSProperties = { width: 120 };\n  const tabList = [\n    {\n      key: \"trade\",\n      tab: <div style={tabStyle}>Trade</div>,\n      render: () => {\n        return <TradeEntry />;\n      },\n    },\n    {\n      key: \"pool\",\n      tab: <div style={tabStyle}>Pool</div>,\n      render: () => {\n        return <AddToLiquidity />;\n      },\n    },\n  ];\n\n  const location = useLocation();\n  const history = useHistory();\n  const activeTab = location.pathname.indexOf(\"add\") < 0 ? \"trade\" : \"pool\";\n\n  const handleTabChange = (key: any) => {\n    if (activeTab !== key) {\n      if (key === \"trade\") {\n        history.push(\"/\");\n      } else {\n        history.push(\"/add\");\n      }\n    }\n  };\n\n  return (\n    <>\n      <AppBar\n        right={\n          <Popover\n            placement=\"topRight\"\n            title=\"Settings\"\n            content={<Settings />}\n            trigger=\"click\"\n          >\n            <Button\n              shape=\"circle\"\n              size=\"large\"\n              type=\"text\"\n              icon={<SettingOutlined />}\n            />\n          </Popover>\n        }\n      />\n      <Card\n        className=\"exchange-card\"\n        headStyle={{ padding: 0 }}\n        bodyStyle={{ position: \"relative\" }}\n        tabList={tabList}\n        tabProps={{\n          tabBarGutter: 0,\n        }}\n        activeTabKey={activeTab}\n        onTabChange={(key) => {\n          handleTabChange(key);\n        }}\n      >\n        {tabList.find((t) => t.key === activeTab)?.render()}\n      </Card>\n    </>\n  );\n};\n","import { HashRouter, Route } from \"react-router-dom\";\nimport React from \"react\";\nimport { ChartsView } from \"./components/charts\";\n\nimport { WalletProvider } from \"./utils/wallet\";\nimport { ConnectionProvider } from \"./utils/connection\";\nimport { AccountsProvider } from \"./utils/accounts\";\nimport { CurrencyPairProvider } from \"./utils/currencyPair\";\nimport { MarketProvider } from \"./context/market\";\nimport { PoolOverview } from \"./components/pool/view\";\nimport { ExchangeView } from \"./components/exchange\";\n\nexport function Routes() {\n  return (\n    <>\n      <HashRouter basename={\"/\"}>\n        <ConnectionProvider>\n          <WalletProvider>\n            <AccountsProvider>\n              <MarketProvider>\n                <CurrencyPairProvider>\n                  <Route exact path=\"/\" component={ExchangeView} />\n                  <Route exact path=\"/add\" component={ExchangeView} />\n                  <Route exact path=\"/info\" component={() => <ChartsView />} />\n                  <Route\n                    exact\n                    path=\"/pool\"\n                    component={() => <PoolOverview />}\n                  />\n                </CurrencyPairProvider>\n              </MarketProvider>\n            </AccountsProvider>\n          </WalletProvider>\n        </ConnectionProvider>\n      </HashRouter>\n    </>\n  );\n}\n","import React from \"react\";\nimport \"./App.less\";\nimport GitHubButton from \"react-github-btn\";\nimport { Routes } from \"./routes\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"Banner\">\n        <div className=\"Banner-description\">\n          Swap is unaudited software. Use at your own risk.\n        </div>\n      </div>\n      <Routes />\n      <div className=\"social-buttons\">\n        <GitHubButton\n          href=\"https://github.com/project-serum/oyster-swap\"\n          data-color-scheme=\"no-preference: light; light: light; dark: light;\"\n          data-icon=\"octicon-star\"\n          data-size=\"large\"\n          data-show-count={true}\n          aria-label=\"Star solana-labs/oyster-swap on GitHub\"\n        >\n          Star\n        </GitHubButton>\n        <GitHubButton\n          href=\"https://github.com/project-serum/oyster-swap/fork\"\n          data-color-scheme=\"no-preference: light; light: light; dark: light;\"\n          data-size=\"large\"\n          aria-label=\"Fork project-serum/oyster-swap on GitHub\"\n        >\n          Fork\n        </GitHubButton>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { useCallback, useState } from \"react\";\nimport { MintInfo } from \"@solana/spl-token\";\n\nimport { PoolInfo, TokenAccount } from \"./../models\";\n\nexport interface KnownToken {\n  tokenSymbol: string;\n  tokenName: string;\n  icon: string;\n  mintAddress: string;\n}\n\nexport type KnownTokenMap = Map<string, KnownToken>;\n\nexport function useLocalStorageState(key: string, defaultState?: string) {\n  const [state, setState] = useState(() => {\n    // NOTE: Not sure if this is ok\n    const storedState = localStorage.getItem(key);\n    if (storedState) {\n      return JSON.parse(storedState);\n    }\n    return defaultState;\n  });\n\n  const setLocalStorageState = useCallback(\n    (newState) => {\n      const changed = state !== newState;\n      if (!changed) {\n        return;\n      }\n      setState(newState);\n      if (newState === null) {\n        localStorage.removeItem(key);\n      } else {\n        localStorage.setItem(key, JSON.stringify(newState));\n      }\n    },\n    [state, key]\n  );\n\n  return [state, setLocalStorageState];\n}\n\n// shorten the checksummed version of the input address to have 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n}\n\nexport function getTokenName(\n  map: KnownTokenMap,\n  mintAddress: string,\n  shorten = true,\n  length = 5\n): string {\n  const knownSymbol = map.get(mintAddress)?.tokenSymbol;\n  if (knownSymbol) {\n    return knownSymbol;\n  }\n\n  return shorten ? `${mintAddress.substring(0, length)}...` : mintAddress;\n}\n\nexport function getTokenIcon(\n  map: KnownTokenMap,\n  mintAddress: string\n): string | undefined {\n  return map.get(mintAddress)?.icon;\n}\n\nexport function getPoolName(\n  map: KnownTokenMap,\n  pool: PoolInfo,\n  shorten = true\n) {\n  const sorted = pool.pubkeys.holdingMints.map((a) => a.toBase58()).sort();\n  return sorted.map((item) => getTokenName(map, item, shorten)).join(\"/\");\n}\n\nexport function isKnownMint(map: KnownTokenMap, mintAddress: string) {\n  return !!map.get(mintAddress);\n}\n\nexport const STABLE_COINS = new Set([\"USDC\", \"wUSDC\", \"USDT\"]);\n\nexport function chunks<T>(array: T[], size: number): T[][] {\n  return Array.apply<number, T[], T[][]>(\n    0,\n    new Array(Math.ceil(array.length / size))\n  ).map((_, index) => array.slice(index * size, (index + 1) * size));\n}\n\nexport function convert(\n  account?: TokenAccount | number,\n  mint?: MintInfo,\n  rate: number = 1.0\n): number {\n  if (!account) {\n    return 0;\n  }\n\n  const amount =\n    typeof account === \"number\" ? account : account.info.amount?.toNumber();\n\n  const precision = Math.pow(10, mint?.decimals || 0);\n  let result = (amount / precision) * rate;\n\n  return result;\n}\n\nvar SI_SYMBOL = [\"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\"];\n\nconst abbreviateNumber = (number: number, precision: number) => {\n  let tier = (Math.log10(number) / 3) | 0;\n  let scaled = number;\n  let suffix = SI_SYMBOL[tier];\n  if (tier !== 0) {\n    let scale = Math.pow(10, tier * 3);\n    scaled = number / scale;\n  }\n\n  return scaled.toFixed(precision) + suffix;\n};\n\nconst format = (val: number, precision: number, abbr: boolean) =>\n  abbr ? abbreviateNumber(val, precision) : val.toFixed(precision);\n\nexport function formatTokenAmount(\n  account?: TokenAccount,\n  mint?: MintInfo,\n  rate: number = 1.0,\n  prefix = \"\",\n  suffix = \"\",\n  precision = 6,\n  abbr = false\n): string {\n  if (!account) {\n    return \"\";\n  }\n\n  return `${[prefix]}${format(\n    convert(account, mint, rate),\n    precision,\n    abbr\n  )}${suffix}`;\n}\n\nexport const formatUSD = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n});\n\nexport const formatNumber = new Intl.NumberFormat(\"en-US\", {\n  style: \"decimal\",\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatPct = new Intl.NumberFormat(\"en-US\", {\n  style: \"percent\",\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatPriceNumber = new Intl.NumberFormat(\"en-US\", {\n  style: \"decimal\",\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 8,\n});\n\nexport const formatShortDate = new Intl.DateTimeFormat(\"en-US\", {\n  day: \"numeric\",\n  month: \"short\",\n});\n\n// returns a Color from a 4 color array, green to red, depending on the index\n// of the closer (up) checkpoint number from the value\nexport const colorWarning = (value = 0, valueCheckpoints = [1, 3, 5, 100]) => {\n  const defaultIndex = 1;\n  const colorCodes = [\"#27ae60\", \"inherit\", \"#f3841e\", \"#ff3945\"];\n  if (value > valueCheckpoints[valueCheckpoints.length - 1]) {\n    return colorCodes[defaultIndex];\n  }\n  const closest = [...valueCheckpoints].sort((a, b) => {\n    const first = a - value < 0 ? Number.POSITIVE_INFINITY : a - value;\n    const second = b - value < 0 ? Number.POSITIVE_INFINITY : b - value;\n    if (first < second) {\n      return -1;\n    } else if (first > second) {\n      return 1;\n    }\n    return 0;\n  })[0];\n  const index = valueCheckpoints.indexOf(closest);\n  if (index !== -1) {\n    return colorCodes[index];\n  }\n  return colorCodes[defaultIndex];\n};\n","import React from \"react\";\nimport { Typography } from \"antd\";\nimport { shortenAddress } from \"./../utils/utils\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nexport const ExplorerLink = (props: {\n  address: string | PublicKey;\n  type: string;\n  code?: boolean;\n  style?: React.CSSProperties;\n  length?: number;\n}) => {\n  const { type, code } = props;\n\n  const address =\n    typeof props.address === \"string\"\n      ? props.address\n      : props.address?.toBase58();\n\n  if (!address) {\n    return null;\n  }\n\n  const length = props.length ?? 9;\n\n  return (\n    <a\n      href={`https://explorer.solana.com/${type}/${address}`}\n      // eslint-disable-next-line react/jsx-no-target-blank\n      target=\"_blank\"\n      title={address}\n      style={props.style}\n    >\n      {code ? (\n        <Typography.Text style={props.style} code>\n          {shortenAddress(address, length)}\n        </Typography.Text>\n      ) : (\n        shortenAddress(address, length)\n      )}\n    </a>\n  );\n};\n","import React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { useConnection } from \"./connection\";\nimport { useWallet } from \"./wallet\";\nimport { AccountInfo, Connection, PublicKey } from \"@solana/web3.js\";\nimport { programIds, SWAP_HOST_FEE_ADDRESS, WRAPPED_SOL_MINT } from \"./ids\";\nimport { AccountLayout, u64, MintInfo, MintLayout } from \"@solana/spl-token\";\nimport { usePools } from \"./pools\";\nimport { TokenAccount, PoolInfo } from \"./../models\";\nimport { notify } from \"./notifications\";\nimport { chunks } from \"./utils\";\nimport { EventEmitter } from \"./eventEmitter\";\n\nconst AccountsContext = React.createContext<any>(null);\n\nconst accountEmitter = new EventEmitter();\n\nconst pendingMintCalls = new Map<string, Promise<MintInfo>>();\nconst mintCache = new Map<string, MintInfo>();\nconst pendingAccountCalls = new Map<string, Promise<TokenAccount>>();\nconst accountsCache = new Map<string, TokenAccount>();\n\nconst pendingCalls = new Map<string, Promise<ParsedAccountBase>>();\nconst genericCache = new Map<string, ParsedAccountBase>();\n\nconst getAccountInfo = async (connection: Connection, pubKey: PublicKey) => {\n  const info = await connection.getAccountInfo(pubKey);\n  if (info === null) {\n    throw new Error(\"Failed to find account\");\n  }\n\n  return tokenAccountFactory(pubKey, info);\n};\n\nconst getMintInfo = async (connection: Connection, pubKey: PublicKey) => {\n  const info = await connection.getAccountInfo(pubKey);\n  if (info === null) {\n    throw new Error(\"Failed to find mint account\");\n  }\n\n  const data = Buffer.from(info.data);\n\n  return deserializeMint(data);\n};\n\nexport interface ParsedAccountBase {\n  pubkey: PublicKey;\n  account: AccountInfo<Buffer>;\n  info: any; // TODO: change to unkown\n}\n\nexport interface ParsedAccount<T> extends ParsedAccountBase {\n  info: T;\n}\n\nexport type AccountParser = (\n  pubkey: PublicKey,\n  data: AccountInfo<Buffer>\n) => ParsedAccountBase;\nexport const MintParser = (pubKey: PublicKey, info: AccountInfo<Buffer>) => {\n  const buffer = Buffer.from(info.data);\n\n  const data = deserializeMint(buffer);\n\n  const details = {\n    pubkey: pubKey,\n    account: {\n      ...info,\n    },\n    info: data,\n  } as ParsedAccountBase;\n\n  return details;\n};\n\nexport const TokenAccountParser = tokenAccountFactory;\n\nexport const GenericAccountParser = (\n  pubKey: PublicKey,\n  info: AccountInfo<Buffer>\n) => {\n  const buffer = Buffer.from(info.data);\n\n  const details = {\n    pubkey: pubKey,\n    account: {\n      ...info,\n    },\n    info: buffer,\n  } as ParsedAccountBase;\n\n  return details;\n};\n\nexport const keyToAccountParser = new Map<string, AccountParser>();\n\nexport const cache = {\n  query: async (\n    connection: Connection,\n    pubKey: string | PublicKey,\n    parser?: AccountParser\n  ) => {\n    let id: PublicKey;\n    if (typeof pubKey === \"string\") {\n      id = new PublicKey(pubKey);\n    } else {\n      id = pubKey;\n    }\n\n    const address = id.toBase58();\n\n    let account = genericCache.get(address);\n    if (account) {\n      return account;\n    }\n\n    let query = pendingCalls.get(address);\n    if (query) {\n      return query;\n    }\n\n    query = connection.getAccountInfo(id).then((data) => {\n      if (!data) {\n        throw new Error(\"Account not found\");\n      }\n\n      return cache.add(id, data, parser);\n    }) as Promise<TokenAccount>;\n    pendingCalls.set(address, query as any);\n\n    return query;\n  },\n  add: (id: PublicKey, obj: AccountInfo<Buffer>, parser?: AccountParser) => {\n    const address = id.toBase58();\n    const deserialize = parser ? parser : keyToAccountParser.get(address);\n    if (!deserialize) {\n      throw new Error(\n        \"Deserializer needs to be registered or passed as a parameter\"\n      );\n    }\n\n    cache.registerParser(id, deserialize);\n    pendingCalls.delete(address);\n    const account = deserialize(id, obj);\n    genericCache.set(address, account);\n    return account;\n  },\n  get: (pubKey: string | PublicKey) => {\n    let key: string;\n    if (typeof pubKey !== \"string\") {\n      key = pubKey.toBase58();\n    } else {\n      key = pubKey;\n    }\n\n    return genericCache.get(key);\n  },\n  registerParser: (pubkey: PublicKey, parser: AccountParser) => {\n    keyToAccountParser.set(pubkey.toBase58(), parser);\n  },\n\n  queryAccount: async (connection: Connection, pubKey: string | PublicKey) => {\n    let id: PublicKey;\n    if (typeof pubKey === \"string\") {\n      id = new PublicKey(pubKey);\n    } else {\n      id = pubKey;\n    }\n\n    const address = id.toBase58();\n\n    let account = accountsCache.get(address);\n    if (account) {\n      return account;\n    }\n\n    let query = pendingAccountCalls.get(address);\n    if (query) {\n      return query;\n    }\n\n    query = getAccountInfo(connection, id).then((data) => {\n      pendingAccountCalls.delete(address);\n      accountsCache.set(address, data);\n      return data;\n    }) as Promise<TokenAccount>;\n    pendingAccountCalls.set(address, query as any);\n\n    return query;\n  },\n  addAccount: (pubKey: PublicKey, obj: AccountInfo<Buffer>) => {\n    const account = tokenAccountFactory(pubKey, obj);\n    accountsCache.set(account.pubkey.toBase58(), account);\n    return account;\n  },\n  deleteAccount: (pubkey: PublicKey) => {\n    const id = pubkey?.toBase58();\n    accountsCache.delete(id);\n    accountEmitter.raiseAccountUpdated(id);\n  },\n  getAccount: (pubKey: string | PublicKey) => {\n    let key: string;\n    if (typeof pubKey !== \"string\") {\n      key = pubKey.toBase58();\n    } else {\n      key = pubKey;\n    }\n\n    return accountsCache.get(key);\n  },\n  queryMint: async (connection: Connection, pubKey: string | PublicKey) => {\n    let id: PublicKey;\n    if (typeof pubKey === \"string\") {\n      id = new PublicKey(pubKey);\n    } else {\n      id = pubKey;\n    }\n\n    const address = id.toBase58();\n    let mint = mintCache.get(address);\n    if (mint) {\n      return mint;\n    }\n\n    let query = pendingMintCalls.get(address);\n    if (query) {\n      return query;\n    }\n\n    query = getMintInfo(connection, id).then((data) => {\n      pendingAccountCalls.delete(address);\n\n      mintCache.set(address, data);\n      return data;\n    }) as Promise<MintInfo>;\n    pendingAccountCalls.set(address, query as any);\n\n    return query;\n  },\n  getMint: (pubKey: string | PublicKey) => {\n    let key: string;\n    if (typeof pubKey !== \"string\") {\n      key = pubKey.toBase58();\n    } else {\n      key = pubKey;\n    }\n\n    return mintCache.get(key);\n  },\n  addMint: (pubKey: PublicKey, obj: AccountInfo<Buffer>) => {\n    const mint = deserializeMint(obj.data);\n    const id = pubKey.toBase58();\n    mintCache.set(id, mint);\n    return mint;\n  },\n};\n\nexport const getCachedAccount = (\n  predicate: (account: TokenAccount) => boolean\n) => {\n  for (const account of accountsCache.values()) {\n    if (predicate(account)) {\n      return account as TokenAccount;\n    }\n  }\n};\n\nfunction tokenAccountFactory(pubKey: PublicKey, info: AccountInfo<Buffer>) {\n  const buffer = Buffer.from(info.data);\n\n  const data = deserializeAccount(buffer);\n\n  const details = {\n    pubkey: pubKey,\n    account: {\n      ...info,\n    },\n    info: data,\n  } as TokenAccount;\n\n  return details;\n}\n\nfunction wrapNativeAccount(\n  pubkey: PublicKey,\n  account?: AccountInfo<Buffer>\n): TokenAccount | undefined {\n  if (!account) {\n    return undefined;\n  }\n\n  return {\n    pubkey: pubkey,\n    account,\n    info: {\n      mint: WRAPPED_SOL_MINT,\n      owner: pubkey,\n      amount: new u64(account.lamports),\n      delegate: null,\n      delegatedAmount: new u64(0),\n      isInitialized: true,\n      isFrozen: false,\n      isNative: true,\n      rentExemptReserve: null,\n      closeAuthority: null,\n    },\n  };\n}\n\nconst UseNativeAccount = () => {\n  const connection = useConnection();\n  const { wallet } = useWallet();\n\n  const [nativeAccount, setNativeAccount] = useState<AccountInfo<Buffer>>();\n  useEffect(() => {\n    if (!connection || !wallet?.publicKey) {\n      return;\n    }\n\n    connection.getAccountInfo(wallet.publicKey).then((acc) => {\n      if (acc) {\n        setNativeAccount(acc);\n      }\n    });\n    connection.onAccountChange(wallet.publicKey, (acc) => {\n      if (acc) {\n        setNativeAccount(acc);\n      }\n    });\n  }, [setNativeAccount, wallet, wallet.publicKey, connection]);\n\n  useEffect(() => {\n    if (!wallet.publicKey) {\n      return;\n    }\n\n    const account = wrapNativeAccount(wallet.publicKey, nativeAccount);\n    if (!account) {\n      return;\n    }\n\n    accountsCache.set(account.pubkey.toBase58(), account);\n  }, [wallet.publicKey, nativeAccount]);\n\n  return { nativeAccount };\n};\n\nconst PRECACHED_OWNERS = new Set<string>();\nconst precacheUserTokenAccounts = async (\n  connection: Connection,\n  owner?: PublicKey\n) => {\n  if (!owner) {\n    return;\n  }\n\n  // used for filtering account updates over websocket\n  PRECACHED_OWNERS.add(owner.toBase58());\n\n  // user accounts are update via ws subscription\n  const accounts = await connection.getTokenAccountsByOwner(owner, {\n    programId: programIds().token,\n  });\n  accounts.value\n    .map((info) => {\n      const data = deserializeAccount(info.account.data);\n      // need to query for mint to get decimals\n\n      // TODO: move to web3.js for decoding on the client side... maybe with callback\n      const details = {\n        pubkey: info.pubkey,\n        account: {\n          ...info.account,\n        },\n        info: data,\n      } as TokenAccount;\n\n      return details;\n    })\n    .forEach((acc) => {\n      accountsCache.set(acc.pubkey.toBase58(), acc);\n    });\n};\n\nexport function AccountsProvider({ children = null as any }) {\n  const connection = useConnection();\n  const { wallet, connected } = useWallet();\n  const [tokenAccounts, setTokenAccounts] = useState<TokenAccount[]>([]);\n  const [userAccounts, setUserAccounts] = useState<TokenAccount[]>([]);\n  const { nativeAccount } = UseNativeAccount();\n  const { pools } = usePools();\n\n  const publicKey = wallet?.publicKey;\n\n  const selectUserAccounts = useCallback(() => {\n    return [...accountsCache.values()].filter(\n      (a) => a.info.owner.toBase58() === publicKey?.toBase58()\n    );\n  }, [publicKey]);\n\n  useEffect(() => {\n    setUserAccounts(\n      [wrapNativeAccount(publicKey, nativeAccount), ...tokenAccounts].filter(\n        (a) => a !== undefined\n      ) as TokenAccount[]\n    );\n  }, [nativeAccount, publicKey, tokenAccounts]);\n\n  useEffect(() => {\n    if (!connection || !publicKey) {\n      setTokenAccounts([]);\n    } else {\n      // cache host accounts to avoid query during swap\n      precacheUserTokenAccounts(connection, SWAP_HOST_FEE_ADDRESS);\n\n      precacheUserTokenAccounts(connection, publicKey).then(() => {\n        setTokenAccounts(selectUserAccounts());\n      });\n\n      const dispose = accountEmitter.onAccount(() => {\n        setTokenAccounts(selectUserAccounts());\n      });\n\n      // This can return different types of accounts: token-account, mint, multisig\n      // TODO: web3.js expose ability to filter. discuss filter syntax\n      const tokenSubID = connection.onProgramAccountChange(\n        programIds().token,\n        (info) => {\n          // TODO: fix type in web3.js\n          const id = (info.accountId as unknown) as string;\n          // TODO: do we need a better way to identify layout (maybe a enum identifing type?)\n          if (info.accountInfo.data.length === AccountLayout.span) {\n            const data = deserializeAccount(info.accountInfo.data);\n            // TODO: move to web3.js for decoding on the client side... maybe with callback\n            const details = {\n              pubkey: new PublicKey((info.accountId as unknown) as string),\n              account: {\n                ...info.accountInfo,\n              },\n              info: data,\n            } as TokenAccount;\n\n            if (\n              PRECACHED_OWNERS.has(details.info.owner.toBase58()) ||\n              accountsCache.has(id)\n            ) {\n              accountsCache.set(id, details);\n              accountEmitter.raiseAccountUpdated(id);\n            }\n          } else if (info.accountInfo.data.length === MintLayout.span) {\n            if (mintCache.has(id)) {\n              const data = Buffer.from(info.accountInfo.data);\n              const mint = deserializeMint(data);\n              mintCache.set(id, mint);\n            }\n\n            accountEmitter.raiseAccountUpdated(id);\n          }\n\n          if (genericCache.has(id)) {\n            cache.add(new PublicKey(id), info.accountInfo);\n          }\n        },\n        \"singleGossip\"\n      );\n\n      return () => {\n        connection.removeProgramAccountChangeListener(tokenSubID);\n        dispose();\n      };\n    }\n  }, [connection, connected, publicKey, selectUserAccounts]);\n\n  return (\n    <AccountsContext.Provider\n      value={{\n        userAccounts,\n        pools,\n        nativeAccount,\n      }}\n    >\n      {children}\n    </AccountsContext.Provider>\n  );\n}\n\nexport function useNativeAccount() {\n  const context = useContext(AccountsContext);\n  return {\n    account: context.nativeAccount as AccountInfo<Buffer>,\n  };\n}\n\nexport const getMultipleAccounts = async (\n  connection: any,\n  keys: string[],\n  commitment: string\n) => {\n  const result = await Promise.all(\n    chunks(keys, 99).map((chunk) =>\n      getMultipleAccountsCore(connection, chunk, commitment)\n    )\n  );\n\n  const array = result\n    .map(\n      (a) =>\n        a.array\n          .filter((acc) => !!acc)\n          .map((acc) => {\n            const { data, ...rest } = acc;\n            const obj = {\n              ...rest,\n              data: Buffer.from(data[0], \"base64\"),\n            } as AccountInfo<Buffer>;\n            return obj;\n          }) as AccountInfo<Buffer>[]\n    )\n    .flat();\n  return { keys, array };\n};\n\nconst getMultipleAccountsCore = async (\n  connection: any,\n  keys: string[],\n  commitment: string\n) => {\n  const args = connection._buildArgs([keys], commitment, \"base64\");\n\n  const unsafeRes = await connection._rpcRequest(\"getMultipleAccounts\", args);\n  if (unsafeRes.error) {\n    throw new Error(\n      \"failed to get info about account \" + unsafeRes.error.message\n    );\n  }\n\n  if (unsafeRes.result.value) {\n    const array = unsafeRes.result.value as AccountInfo<string[]>[];\n    return { keys, array };\n  }\n\n  // TODO: fix\n  throw new Error();\n};\n\nexport function useMint(key?: string | PublicKey) {\n  const connection = useConnection();\n  const [mint, setMint] = useState<MintInfo>();\n\n  const id = typeof key === \"string\" ? key : key?.toBase58();\n\n  useEffect(() => {\n    if (!id) {\n      return;\n    }\n\n    cache\n      .queryMint(connection, id)\n      .then(setMint)\n      .catch((err) =>\n        notify({\n          message: err.message,\n          type: \"error\",\n        })\n      );\n\n    const dispose = accountEmitter.onAccount((e) => {\n      const event = e;\n      if (event.id === id) {\n        cache.queryMint(connection, id).then(setMint);\n      }\n    });\n    return () => {\n      dispose();\n    };\n  }, [connection, id]);\n\n  return mint;\n}\n\nexport function useUserAccounts() {\n  const context = useContext(AccountsContext);\n  return {\n    userAccounts: context.userAccounts as TokenAccount[],\n  };\n}\n\nexport function useAccount(pubKey?: PublicKey) {\n  const connection = useConnection();\n  const [account, setAccount] = useState<TokenAccount>();\n\n  const key = pubKey?.toBase58();\n  useEffect(() => {\n    const query = async () => {\n      try {\n        if (!key) {\n          return;\n        }\n\n        const acc = await cache.queryAccount(connection, key).catch((err) =>\n          notify({\n            message: err.message,\n            type: \"error\",\n          })\n        );\n        if (acc) {\n          setAccount(acc);\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    query();\n\n    const dispose = accountEmitter.onAccount((e) => {\n      const event = e;\n      if (event.id === key) {\n        query();\n      }\n    });\n    return () => {\n      dispose();\n    };\n  }, [connection, key]);\n\n  return account;\n}\n\nexport function useCachedPool(legacy = false) {\n  const context = useContext(AccountsContext);\n\n  const allPools = context.pools as PoolInfo[];\n  const pools = useMemo(() => {\n    return allPools.filter((p) => p.legacy === legacy);\n  }, [allPools, legacy]);\n\n  return {\n    pools,\n  };\n}\n\nexport const useSelectedAccount = (account: string) => {\n  const { userAccounts } = useUserAccounts();\n  const index = userAccounts.findIndex(\n    (acc) => acc.pubkey.toBase58() === account\n  );\n\n  if (index !== -1) {\n    return userAccounts[index];\n  }\n\n  return;\n};\n\nexport const useAccountByMint = (mint: string) => {\n  const { userAccounts } = useUserAccounts();\n  const index = userAccounts.findIndex(\n    (acc) => acc.info.mint.toBase58() === mint\n  );\n\n  if (index !== -1) {\n    return userAccounts[index];\n  }\n\n  return;\n};\n\n// TODO: expose in spl package\nconst deserializeAccount = (data: Buffer) => {\n  const accountInfo = AccountLayout.decode(data);\n  accountInfo.mint = new PublicKey(accountInfo.mint);\n  accountInfo.owner = new PublicKey(accountInfo.owner);\n  accountInfo.amount = u64.fromBuffer(accountInfo.amount);\n\n  if (accountInfo.delegateOption === 0) {\n    accountInfo.delegate = null;\n    accountInfo.delegatedAmount = new u64(0);\n  } else {\n    accountInfo.delegate = new PublicKey(accountInfo.delegate);\n    accountInfo.delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);\n  }\n\n  accountInfo.isInitialized = accountInfo.state !== 0;\n  accountInfo.isFrozen = accountInfo.state === 2;\n\n  if (accountInfo.isNativeOption === 1) {\n    accountInfo.rentExemptReserve = u64.fromBuffer(accountInfo.isNative);\n    accountInfo.isNative = true;\n  } else {\n    accountInfo.rentExemptReserve = null;\n    accountInfo.isNative = false;\n  }\n\n  if (accountInfo.closeAuthorityOption === 0) {\n    accountInfo.closeAuthority = null;\n  } else {\n    accountInfo.closeAuthority = new PublicKey(accountInfo.closeAuthority);\n  }\n\n  return accountInfo;\n};\n\n// TODO: expose in spl package\nconst deserializeMint = (data: Buffer) => {\n  if (data.length !== MintLayout.span) {\n    throw new Error(\"Not a valid Mint\");\n  }\n\n  const mintInfo = MintLayout.decode(data);\n\n  if (mintInfo.mintAuthorityOption === 0) {\n    mintInfo.mintAuthority = null;\n  } else {\n    mintInfo.mintAuthority = new PublicKey(mintInfo.mintAuthority);\n  }\n\n  mintInfo.supply = u64.fromBuffer(mintInfo.supply);\n  mintInfo.isInitialized = mintInfo.isInitialized !== 0;\n\n  if (mintInfo.freezeAuthorityOption === 0) {\n    mintInfo.freezeAuthority = null;\n  } else {\n    mintInfo.freezeAuthority = new PublicKey(mintInfo.freezeAuthority);\n  }\n\n  return mintInfo as MintInfo;\n};\n","import { PublicKey } from \"@solana/web3.js\";\nimport { TokenAccount } from \"./account\";\n\nexport const DEFAULT_DENOMINATOR = 10_000;\n\nexport interface PoolInfo {\n  pubkeys: {\n    program: PublicKey;\n    account: PublicKey;\n    holdingAccounts: PublicKey[];\n    holdingMints: PublicKey[];\n    mint: PublicKey;\n    feeAccount?: PublicKey;\n  };\n  legacy: boolean;\n  raw: any;\n}\n\nexport interface LiquidityComponent {\n  amount: number;\n  account?: TokenAccount;\n  mintAddress: string;\n}\n\nexport enum CurveType {\n  ConstantProduct = 0,\n  ConstantPrice = 1,\n  Stable = 2,\n  ConstantProductWithOffset = 3,\n}\n\nexport interface PoolConfig {\n  curveType: CurveType;\n  fees: {\n    tradeFeeNumerator: number;\n    tradeFeeDenominator: number;\n    ownerTradeFeeNumerator: number;\n    ownerTradeFeeDenominator: number;\n    ownerWithdrawFeeNumerator: number;\n    ownerWithdrawFeeDenominator: number;\n    hostFeeNumerator: number;\n    hostFeeDenominator: number;\n  };\n\n  token_b_offset?: number;\n  token_b_price?: number;\n}\n","import { EventEmitter as Emitter } from \"eventemitter3\";\n\nexport class AccountUpdateEvent {\n  static type = \"AccountUpdate\";\n  id: string;\n  constructor(id: string) {\n    this.id = id;\n  }\n}\n\nexport class MarketUpdateEvent {\n  static type = \"MarketUpdate\";\n  ids: Set<string>;\n  constructor(ids: Set<string>) {\n    this.ids = ids;\n  }\n}\n\nexport class EventEmitter {\n  private emitter = new Emitter();\n\n  onMarket(callback: (args: MarketUpdateEvent) => void) {\n    this.emitter.on(MarketUpdateEvent.type, callback);\n\n    return () => this.emitter.removeListener(MarketUpdateEvent.type, callback);\n  }\n\n  onAccount(callback: (args: AccountUpdateEvent) => void) {\n    this.emitter.on(AccountUpdateEvent.type, callback);\n\n    return () => this.emitter.removeListener(AccountUpdateEvent.type, callback);\n  }\n\n  raiseAccountUpdated(id: string) {\n    this.emitter.emit(AccountUpdateEvent.type, new AccountUpdateEvent(id));\n  }\n\n  raiseMarketUpdated(ids: Set<string>) {\n    this.emitter.emit(MarketUpdateEvent.type, new MarketUpdateEvent(ids));\n  }\n}\n","import { PublicKey } from \"@solana/web3.js\";\nimport { TokenSwapLayout, TokenSwapLayoutV1 } from \"../models\";\n\nexport const WRAPPED_SOL_MINT = new PublicKey(\n  \"So11111111111111111111111111111111111111112\"\n);\nlet TOKEN_PROGRAM_ID = new PublicKey(\n  \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\n);\n\nlet SWAP_PROGRAM_ID: PublicKey;\nlet SWAP_PROGRAM_LEGACY_IDS: PublicKey[];\nlet SWAP_PROGRAM_LAYOUT: any;\n\nexport const SWAP_PROGRAM_OWNER_FEE_ADDRESS = new PublicKey(\n  \"HfoTxFR1Tm6kGmWgYWD6J7YHVy1UwqSULUGVLXkJqaKN\"\n);\n\nexport const SWAP_HOST_FEE_ADDRESS = process.env.REACT_APP_SWAP_HOST_FEE_ADDRESS\n  ? new PublicKey(`${process.env.REACT_APP_SWAP_HOST_FEE_ADDRESS}`)\n  : SWAP_PROGRAM_OWNER_FEE_ADDRESS;\n\nexport const ENABLE_FEES_INPUT = false;\n\nconsole.debug(`Host address: ${SWAP_HOST_FEE_ADDRESS?.toBase58()}`);\nconsole.debug(`Owner address: ${SWAP_PROGRAM_OWNER_FEE_ADDRESS?.toBase58()}`);\n\n// legacy pools are used to show users contributions in those pools to allow for withdrawals of funds\nexport const PROGRAM_IDS = [\n  {\n    name: \"mainnet-beta\",\n    swap: () => ({\n      current: {\n        pubkey: new PublicKey(\"9qvG1zUp8xF1Bi4m6UdRNby1BAAuaDrUxSpv4CmRRMjL\"),\n        layout: TokenSwapLayoutV1,\n      },\n      legacy: [\n        // TODO: uncomment to enable legacy contract\n        // new PublicKey(\"9qvG1zUp8xF1Bi4m6UdRNby1BAAuaDrUxSpv4CmRRMjL\"),\n      ],\n    }),\n  },\n  {\n    name: \"testnet\",\n    swap: () => ({\n      current: {\n        pubkey: new PublicKey(\"2n2dsFSgmPcZ8jkmBZLGUM2nzuFqcBGQ3JEEj6RJJcEg\"),\n        layout: TokenSwapLayoutV1,\n      },\n      legacy: [],\n    }),\n  },\n  {\n    name: \"devnet\",\n    swap: () => ({\n      current: {\n        pubkey: new PublicKey(\"6Cust2JhvweKLh4CVo1dt21s2PJ86uNGkziudpkNPaCj\"),\n        layout: TokenSwapLayout,\n      },\n      legacy: [new PublicKey(\"BSfTAcBdqmvX5iE2PW88WFNNp2DHhLUaBKk5WrnxVkcJ\")],\n    }),\n  },\n  {\n    name: \"localnet\",\n    swap: () => ({\n      current: {\n        pubkey: new PublicKey(\"369YmCWHGxznT7GGBhcLZDRcRoGWmGKFWdmtiPy78yj7\"),\n        layout: TokenSwapLayoutV1,\n      },\n      legacy: [],\n    }),\n  },\n];\n\nexport const setProgramIds = (envName: string) => {\n  let instance = PROGRAM_IDS.find((env) => env.name === envName);\n  if (!instance) {\n    return;\n  }\n\n  let swap = instance.swap();\n\n  SWAP_PROGRAM_ID = swap.current.pubkey;\n  SWAP_PROGRAM_LAYOUT = swap.current.layout;\n  SWAP_PROGRAM_LEGACY_IDS = swap.legacy;\n};\n\nexport const programIds = () => {\n  return {\n    token: TOKEN_PROGRAM_ID,\n    swap: SWAP_PROGRAM_ID,\n    swapLayout: SWAP_PROGRAM_LAYOUT,\n    swap_legacy: SWAP_PROGRAM_LEGACY_IDS,\n  };\n};\n","import { KnownToken, useLocalStorageState } from \"./utils\";\nimport {\n  Account,\n  clusterApiUrl,\n  Connection,\n  Transaction,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport React, { useContext, useEffect, useMemo, useState } from \"react\";\nimport { setProgramIds } from \"./ids\";\nimport { notify } from \"./notifications\";\nimport { ExplorerLink } from \"../components/explorerLink\";\n\nexport type ENV = \"mainnet-beta\" | \"testnet\" | \"devnet\" | \"localnet\";\n\nexport const ENDPOINTS = [\n  {\n    name: \"mainnet-beta\" as ENV,\n    endpoint: \"https://solana-api.projectserum.com/\",\n  },\n  { name: \"testnet\" as ENV, endpoint: clusterApiUrl(\"testnet\") },\n  { name: \"devnet\" as ENV, endpoint: clusterApiUrl(\"devnet\") },\n  { name: \"localnet\" as ENV, endpoint: \"http://127.0.0.1:8899\" },\n];\n\nconst DEFAULT = ENDPOINTS[0].endpoint;\nconst DEFAULT_SLIPPAGE = 0.25;\n\ninterface ConnectionConfig {\n  connection: Connection;\n  sendConnection: Connection;\n  endpoint: string;\n  slippage: number;\n  setSlippage: (val: number) => void;\n  env: ENV;\n  setEndpoint: (val: string) => void;\n  tokens: KnownToken[];\n  tokenMap: Map<string, KnownToken>;\n}\n\nconst ConnectionContext = React.createContext<ConnectionConfig>({\n  endpoint: DEFAULT,\n  setEndpoint: () => {},\n  slippage: DEFAULT_SLIPPAGE,\n  setSlippage: (val: number) => {},\n  connection: new Connection(DEFAULT, \"recent\"),\n  sendConnection: new Connection(DEFAULT, \"recent\"),\n  env: ENDPOINTS[0].name,\n  tokens: [],\n  tokenMap: new Map<string, KnownToken>(),\n});\n\nexport function ConnectionProvider({ children = undefined as any }) {\n  const [endpoint, setEndpoint] = useLocalStorageState(\n    \"connectionEndpts\",\n    ENDPOINTS[0].endpoint\n  );\n\n  const [slippage, setSlippage] = useLocalStorageState(\n    \"slippage\",\n    DEFAULT_SLIPPAGE.toString()\n  );\n\n  const connection = useMemo(() => new Connection(endpoint, \"recent\"), [\n    endpoint,\n  ]);\n  const sendConnection = useMemo(() => new Connection(endpoint, \"recent\"), [\n    endpoint,\n  ]);\n\n  const env =\n    ENDPOINTS.find((end) => end.endpoint === endpoint)?.name ||\n    ENDPOINTS[0].name;\n\n  const [tokens, setTokens] = useState<KnownToken[]>([]);\n  const [tokenMap, setTokenMap] = useState<Map<string, KnownToken>>(new Map());\n  useEffect(() => {\n    // fetch token files\n    window\n      .fetch(\n        `https://raw.githubusercontent.com/solana-labs/token-list/main/src/tokens/${env}.json`\n      )\n      .then((res) => {\n        return res.json();\n      })\n      .then((list: KnownToken[]) => {\n        const knownMints = list.reduce((map, item) => {\n          map.set(item.mintAddress, item);\n          return map;\n        }, new Map<string, KnownToken>());\n\n        setTokenMap(knownMints);\n        setTokens(list);\n      });\n  }, [env]);\n\n  setProgramIds(env);\n\n  // The websocket library solana/web3.js uses closes its websocket connection when the subscription list\n  // is empty after opening its first time, preventing subsequent subscriptions from receiving responses.\n  // This is a hack to prevent the list from every getting empty\n  useEffect(() => {\n    const id = connection.onAccountChange(new Account().publicKey, () => {});\n    return () => {\n      connection.removeAccountChangeListener(id);\n    };\n  }, [connection]);\n\n  useEffect(() => {\n    const id = connection.onSlotChange(() => null);\n    return () => {\n      connection.removeSlotChangeListener(id);\n    };\n  }, [connection]);\n\n  useEffect(() => {\n    const id = sendConnection.onAccountChange(\n      new Account().publicKey,\n      () => {}\n    );\n    return () => {\n      sendConnection.removeAccountChangeListener(id);\n    };\n  }, [sendConnection]);\n\n  useEffect(() => {\n    const id = sendConnection.onSlotChange(() => null);\n    return () => {\n      sendConnection.removeSlotChangeListener(id);\n    };\n  }, [sendConnection]);\n\n  return (\n    <ConnectionContext.Provider\n      value={{\n        endpoint,\n        setEndpoint,\n        slippage: parseFloat(slippage),\n        setSlippage: (val) => setSlippage(val.toString()),\n        connection,\n        sendConnection,\n        tokens,\n        tokenMap,\n        env,\n      }}\n    >\n      {children}\n    </ConnectionContext.Provider>\n  );\n}\n\nexport function useConnection() {\n  return useContext(ConnectionContext).connection as Connection;\n}\n\nexport function useSendConnection() {\n  return useContext(ConnectionContext)?.sendConnection;\n}\n\nexport function useConnectionConfig() {\n  const context = useContext(ConnectionContext);\n  return {\n    endpoint: context.endpoint,\n    setEndpoint: context.setEndpoint,\n    env: context.env,\n    tokens: context.tokens,\n    tokenMap: context.tokenMap,\n  };\n}\n\nexport function useSlippageConfig() {\n  const { slippage, setSlippage } = useContext(ConnectionContext);\n  return { slippage, setSlippage };\n}\n\nconst getErrorForTransaction = async (connection: Connection, txid: string) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, \"max\");\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach((log) => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Account[],\n  awaitConfirmation = true\n) => {\n  let transaction = new Transaction();\n  instructions.forEach((instruction) => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    await connection.getRecentBlockhash(\"max\")\n  ).blockhash;\n  transaction.setSigners(\n    // fee payied by the wallet owner\n    wallet.publicKey,\n    ...signers.map((s) => s.publicKey)\n  );\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  transaction = await wallet.signTransaction(transaction);\n  const rawTransaction = transaction.serialize();\n  let options = {\n    skipPreflight: true,\n    commitment: \"singleGossip\",\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n\n  if (awaitConfirmation) {\n    const status = (\n      await connection.confirmTransaction(\n        txid,\n        options && (options.commitment as any)\n      )\n    ).value;\n\n    if (status?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n      notify({\n        message: \"Transaction failed...\",\n        description: (\n          <>\n            {errors.map((err) => (\n              <div>{err}</div>\n            ))}\n            <ExplorerLink address={txid} type=\"transaction\" />\n          </>\n        ),\n        type: \"error\",\n      });\n\n      throw new Error(\n        `Raw transaction ${txid} failed (${JSON.stringify(status)})`\n      );\n    }\n  }\n\n  return txid;\n};\n","import { Numberu64 } from \"@solana/spl-token-swap\";\nimport { PublicKey, Account, TransactionInstruction } from \"@solana/web3.js\";\nimport * as BufferLayout from \"buffer-layout\";\nimport { programIds } from \"../utils/ids\";\nimport { CurveType, PoolConfig } from \"./pool\";\n\nexport { TokenSwap } from \"@solana/spl-token-swap\";\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = \"publicKey\"): Object => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = \"uint64\"): Object => {\n  return BufferLayout.blob(8, property);\n};\n\nconst FEE_LAYOUT = BufferLayout.struct(\n  [\n    BufferLayout.nu64(\"tradeFeeNumerator\"),\n    BufferLayout.nu64(\"tradeFeeDenominator\"),\n    BufferLayout.nu64(\"ownerTradeFeeNumerator\"),\n    BufferLayout.nu64(\"ownerTradeFeeDenominator\"),\n    BufferLayout.nu64(\"ownerWithdrawFeeNumerator\"),\n    BufferLayout.nu64(\"ownerWithdrawFeeDenominator\"),\n    BufferLayout.nu64(\"hostFeeNumerator\"),\n    BufferLayout.nu64(\"hostFeeDenominator\"),\n  ],\n  \"fees\"\n);\n\nexport const TokenSwapLayoutLegacyV0 = BufferLayout.struct([\n  BufferLayout.u8(\"isInitialized\"),\n  BufferLayout.u8(\"nonce\"),\n  publicKey(\"tokenAccountA\"),\n  publicKey(\"tokenAccountB\"),\n  publicKey(\"tokenPool\"),\n  uint64(\"feesNumerator\"),\n  uint64(\"feesDenominator\"),\n]);\n\nexport const TokenSwapLayoutV1: typeof BufferLayout.Structure = BufferLayout.struct(\n  [\n    BufferLayout.u8(\"isInitialized\"),\n    BufferLayout.u8(\"nonce\"),\n    publicKey(\"tokenProgramId\"),\n    publicKey(\"tokenAccountA\"),\n    publicKey(\"tokenAccountB\"),\n    publicKey(\"tokenPool\"),\n    publicKey(\"mintA\"),\n    publicKey(\"mintB\"),\n    publicKey(\"feeAccount\"),\n    BufferLayout.u8(\"curveType\"),\n    uint64(\"tradeFeeNumerator\"),\n    uint64(\"tradeFeeDenominator\"),\n    uint64(\"ownerTradeFeeNumerator\"),\n    uint64(\"ownerTradeFeeDenominator\"),\n    uint64(\"ownerWithdrawFeeNumerator\"),\n    uint64(\"ownerWithdrawFeeDenominator\"),\n    BufferLayout.blob(16, \"padding\"),\n  ]\n);\n\nconst CURVE_NODE = BufferLayout.union(\n  BufferLayout.u8(),\n  BufferLayout.blob(32),\n  \"curve\"\n);\nCURVE_NODE.addVariant(0, BufferLayout.struct([]), \"constantProduct\");\nCURVE_NODE.addVariant(\n  1,\n  BufferLayout.struct([BufferLayout.nu64(\"token_b_price\")]),\n  \"constantPrice\"\n);\nCURVE_NODE.addVariant(2, BufferLayout.struct([]), \"stable\");\nCURVE_NODE.addVariant(\n  3,\n  BufferLayout.struct([BufferLayout.nu64(\"token_b_offset\")]),\n  \"offset\"\n);\n\nexport const TokenSwapLayout: typeof BufferLayout.Structure = BufferLayout.struct(\n  [\n    BufferLayout.u8(\"isInitialized\"),\n    BufferLayout.u8(\"nonce\"),\n    publicKey(\"tokenProgramId\"),\n    publicKey(\"tokenAccountA\"),\n    publicKey(\"tokenAccountB\"),\n    publicKey(\"tokenPool\"),\n    publicKey(\"mintA\"),\n    publicKey(\"mintB\"),\n    publicKey(\"feeAccount\"),\n    FEE_LAYOUT,\n    CURVE_NODE,\n  ]\n);\n\nexport const createInitSwapInstruction = (\n  tokenSwapAccount: Account,\n  authority: PublicKey,\n  tokenAccountA: PublicKey,\n  tokenAccountB: PublicKey,\n  tokenPool: PublicKey,\n  feeAccount: PublicKey,\n  destinationAccount: PublicKey,\n  tokenProgramId: PublicKey,\n  swapProgramId: PublicKey,\n  nonce: number,\n  config: PoolConfig\n): TransactionInstruction => {\n  const keys = [\n    { pubkey: tokenSwapAccount.publicKey, isSigner: false, isWritable: true },\n    { pubkey: authority, isSigner: false, isWritable: false },\n    { pubkey: tokenAccountA, isSigner: false, isWritable: false },\n    { pubkey: tokenAccountB, isSigner: false, isWritable: false },\n    { pubkey: tokenPool, isSigner: false, isWritable: true },\n    { pubkey: feeAccount, isSigner: false, isWritable: false },\n    { pubkey: destinationAccount, isSigner: false, isWritable: true },\n    { pubkey: tokenProgramId, isSigner: false, isWritable: false },\n  ];\n\n  let data = Buffer.alloc(1024);\n  {\n    const isLatestLayout = programIds().swapLayout === TokenSwapLayout;\n    if (isLatestLayout) {\n      const fields = [\n        BufferLayout.u8(\"instruction\"),\n        BufferLayout.u8(\"nonce\"),\n        BufferLayout.nu64(\"tradeFeeNumerator\"),\n        BufferLayout.nu64(\"tradeFeeDenominator\"),\n        BufferLayout.nu64(\"ownerTradeFeeNumerator\"),\n        BufferLayout.nu64(\"ownerTradeFeeDenominator\"),\n        BufferLayout.nu64(\"ownerWithdrawFeeNumerator\"),\n        BufferLayout.nu64(\"ownerWithdrawFeeDenominator\"),\n        BufferLayout.nu64(\"hostFeeNumerator\"),\n        BufferLayout.nu64(\"hostFeeDenominator\"),\n        BufferLayout.u8(\"curveType\"),\n      ];\n\n      if (config.curveType === CurveType.ConstantProductWithOffset) {\n        fields.push(BufferLayout.nu64(\"token_b_offset\"));\n        fields.push(BufferLayout.blob(24, \"padding\"));\n      } else if (config.curveType === CurveType.ConstantPrice) {\n        fields.push(BufferLayout.nu64(\"token_b_price\"));\n        fields.push(BufferLayout.blob(24, \"padding\"));\n      } else {\n        fields.push(BufferLayout.blob(32, \"padding\"));\n      }\n\n      const commandDataLayout = BufferLayout.struct(fields);\n\n      const { fees, ...rest } = config;\n\n      const encodeLength = commandDataLayout.encode(\n        {\n          instruction: 0, // InitializeSwap instruction\n          nonce,\n          ...fees,\n          ...rest,\n        },\n        data\n      );\n      data = data.slice(0, encodeLength);\n    } else {\n      const commandDataLayout = BufferLayout.struct([\n        BufferLayout.u8(\"instruction\"),\n        BufferLayout.u8(\"nonce\"),\n        BufferLayout.u8(\"curveType\"),\n        BufferLayout.nu64(\"tradeFeeNumerator\"),\n        BufferLayout.nu64(\"tradeFeeDenominator\"),\n        BufferLayout.nu64(\"ownerTradeFeeNumerator\"),\n        BufferLayout.nu64(\"ownerTradeFeeDenominator\"),\n        BufferLayout.nu64(\"ownerWithdrawFeeNumerator\"),\n        BufferLayout.nu64(\"ownerWithdrawFeeDenominator\"),\n        BufferLayout.blob(16, \"padding\"),\n      ]);\n\n      const encodeLength = commandDataLayout.encode(\n        {\n          instruction: 0, // InitializeSwap instruction\n          nonce,\n          curveType: config.curveType,\n          tradeFeeNumerator: config.fees.tradeFeeNumerator,\n          tradeFeeDenominator: config.fees.tradeFeeDenominator,\n          ownerTradeFeeNumerator: config.fees.ownerTradeFeeNumerator,\n          ownerTradeFeeDenominator: config.fees.ownerTradeFeeDenominator,\n          ownerWithdrawFeeNumerator: config.fees.ownerWithdrawFeeNumerator,\n          ownerWithdrawFeeDenominator: config.fees.ownerWithdrawFeeDenominator,\n        },\n        data\n      );\n      data = data.slice(0, encodeLength);\n    }\n  }\n\n  return new TransactionInstruction({\n    keys,\n    programId: swapProgramId,\n    data,\n  });\n};\n\nexport const depositInstruction = (\n  tokenSwap: PublicKey,\n  authority: PublicKey,\n  sourceA: PublicKey,\n  sourceB: PublicKey,\n  intoA: PublicKey,\n  intoB: PublicKey,\n  poolToken: PublicKey,\n  poolAccount: PublicKey,\n  swapProgramId: PublicKey,\n  tokenProgramId: PublicKey,\n  poolTokenAmount: number | Numberu64,\n  maximumTokenA: number | Numberu64,\n  maximumTokenB: number | Numberu64\n): TransactionInstruction => {\n  const dataLayout = BufferLayout.struct([\n    BufferLayout.u8(\"instruction\"),\n    uint64(\"poolTokenAmount\"),\n    uint64(\"maximumTokenA\"),\n    uint64(\"maximumTokenB\"),\n  ]);\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      instruction: 2, // Deposit instruction\n      poolTokenAmount: new Numberu64(poolTokenAmount).toBuffer(),\n      maximumTokenA: new Numberu64(maximumTokenA).toBuffer(),\n      maximumTokenB: new Numberu64(maximumTokenB).toBuffer(),\n    },\n    data\n  );\n\n  const keys = [\n    { pubkey: tokenSwap, isSigner: false, isWritable: false },\n    { pubkey: authority, isSigner: false, isWritable: false },\n    { pubkey: sourceA, isSigner: false, isWritable: true },\n    { pubkey: sourceB, isSigner: false, isWritable: true },\n    { pubkey: intoA, isSigner: false, isWritable: true },\n    { pubkey: intoB, isSigner: false, isWritable: true },\n    { pubkey: poolToken, isSigner: false, isWritable: true },\n    { pubkey: poolAccount, isSigner: false, isWritable: true },\n    { pubkey: tokenProgramId, isSigner: false, isWritable: false },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: swapProgramId,\n    data,\n  });\n};\n\nexport const depositExactOneInstruction = (\n  tokenSwap: PublicKey,\n  authority: PublicKey,\n  source: PublicKey,\n  intoA: PublicKey,\n  intoB: PublicKey,\n  poolToken: PublicKey,\n  poolAccount: PublicKey,\n  swapProgramId: PublicKey,\n  tokenProgramId: PublicKey,\n  sourceTokenAmount: number | Numberu64,\n  minimumPoolTokenAmount: number | Numberu64\n): TransactionInstruction => {\n  const dataLayout = BufferLayout.struct([\n    BufferLayout.u8(\"instruction\"),\n    uint64(\"sourceTokenAmount\"),\n    uint64(\"minimumPoolTokenAmount\"),\n  ]);\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      instruction: 4, // DepositExactOne instruction\n      sourceTokenAmount: new Numberu64(sourceTokenAmount).toBuffer(),\n      minimumPoolTokenAmount: new Numberu64(minimumPoolTokenAmount).toBuffer(),\n    },\n    data\n  );\n\n  const keys = [\n    { pubkey: tokenSwap, isSigner: false, isWritable: false },\n    { pubkey: authority, isSigner: false, isWritable: false },\n    { pubkey: source, isSigner: false, isWritable: true },\n    { pubkey: intoA, isSigner: false, isWritable: true },\n    { pubkey: intoB, isSigner: false, isWritable: true },\n    { pubkey: poolToken, isSigner: false, isWritable: true },\n    { pubkey: poolAccount, isSigner: false, isWritable: true },\n    { pubkey: tokenProgramId, isSigner: false, isWritable: false },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: swapProgramId,\n    data,\n  });\n};\n\nexport const withdrawInstruction = (\n  tokenSwap: PublicKey,\n  authority: PublicKey,\n  poolMint: PublicKey,\n  feeAccount: PublicKey | undefined,\n  sourcePoolAccount: PublicKey,\n  fromA: PublicKey,\n  fromB: PublicKey,\n  userAccountA: PublicKey,\n  userAccountB: PublicKey,\n  swapProgramId: PublicKey,\n  tokenProgramId: PublicKey,\n  poolTokenAmount: number | Numberu64,\n  minimumTokenA: number | Numberu64,\n  minimumTokenB: number | Numberu64\n): TransactionInstruction => {\n  const dataLayout = BufferLayout.struct([\n    BufferLayout.u8(\"instruction\"),\n    uint64(\"poolTokenAmount\"),\n    uint64(\"minimumTokenA\"),\n    uint64(\"minimumTokenB\"),\n  ]);\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      instruction: 3, // Withdraw instruction\n      poolTokenAmount: new Numberu64(poolTokenAmount).toBuffer(),\n      minimumTokenA: new Numberu64(minimumTokenA).toBuffer(),\n      minimumTokenB: new Numberu64(minimumTokenB).toBuffer(),\n    },\n    data\n  );\n\n  const keys = [\n    { pubkey: tokenSwap, isSigner: false, isWritable: false },\n    { pubkey: authority, isSigner: false, isWritable: false },\n    { pubkey: poolMint, isSigner: false, isWritable: true },\n    { pubkey: sourcePoolAccount, isSigner: false, isWritable: true },\n    { pubkey: fromA, isSigner: false, isWritable: true },\n    { pubkey: fromB, isSigner: false, isWritable: true },\n    { pubkey: userAccountA, isSigner: false, isWritable: true },\n    { pubkey: userAccountB, isSigner: false, isWritable: true },\n  ];\n\n  if (feeAccount) {\n    keys.push({ pubkey: feeAccount, isSigner: false, isWritable: true });\n  }\n  keys.push({ pubkey: tokenProgramId, isSigner: false, isWritable: false });\n\n  return new TransactionInstruction({\n    keys,\n    programId: swapProgramId,\n    data,\n  });\n};\n\nexport const withdrawExactOneInstruction = (\n  tokenSwap: PublicKey,\n  authority: PublicKey,\n  poolMint: PublicKey,\n  sourcePoolAccount: PublicKey,\n  fromA: PublicKey,\n  fromB: PublicKey,\n  userAccount: PublicKey,\n  feeAccount: PublicKey | undefined,\n  swapProgramId: PublicKey,\n  tokenProgramId: PublicKey,\n  sourceTokenAmount: number | Numberu64,\n  maximumTokenAmount: number | Numberu64\n): TransactionInstruction => {\n  const dataLayout = BufferLayout.struct([\n    BufferLayout.u8(\"instruction\"),\n    uint64(\"sourceTokenAmount\"),\n    uint64(\"maximumTokenAmount\"),\n  ]);\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      instruction: 5, // WithdrawExactOne instruction\n      sourceTokenAmount: new Numberu64(sourceTokenAmount).toBuffer(),\n      maximumTokenAmount: new Numberu64(maximumTokenAmount).toBuffer(),\n    },\n    data\n  );\n\n  const keys = [\n    { pubkey: tokenSwap, isSigner: false, isWritable: false },\n    { pubkey: authority, isSigner: false, isWritable: false },\n    { pubkey: poolMint, isSigner: false, isWritable: true },\n    { pubkey: sourcePoolAccount, isSigner: false, isWritable: true },\n    { pubkey: fromA, isSigner: false, isWritable: true },\n    { pubkey: fromB, isSigner: false, isWritable: true },\n    { pubkey: userAccount, isSigner: false, isWritable: true },\n  ];\n\n  if (feeAccount) {\n    keys.push({ pubkey: feeAccount, isSigner: false, isWritable: true });\n  }\n  keys.push({ pubkey: tokenProgramId, isSigner: false, isWritable: false });\n\n  return new TransactionInstruction({\n    keys,\n    programId: swapProgramId,\n    data,\n  });\n};\n\nexport const swapInstruction = (\n  tokenSwap: PublicKey,\n  authority: PublicKey,\n  userSource: PublicKey,\n  poolSource: PublicKey,\n  poolDestination: PublicKey,\n  userDestination: PublicKey,\n  poolMint: PublicKey,\n  feeAccount: PublicKey,\n  swapProgramId: PublicKey,\n  tokenProgramId: PublicKey,\n  amountIn: number | Numberu64,\n  minimumAmountOut: number | Numberu64,\n  programOwner?: PublicKey\n): TransactionInstruction => {\n  const dataLayout = BufferLayout.struct([\n    BufferLayout.u8(\"instruction\"),\n    uint64(\"amountIn\"),\n    uint64(\"minimumAmountOut\"),\n  ]);\n\n  const keys = [\n    { pubkey: tokenSwap, isSigner: false, isWritable: false },\n    { pubkey: authority, isSigner: false, isWritable: false },\n    { pubkey: userSource, isSigner: false, isWritable: true },\n    { pubkey: poolSource, isSigner: false, isWritable: true },\n    { pubkey: poolDestination, isSigner: false, isWritable: true },\n    { pubkey: userDestination, isSigner: false, isWritable: true },\n    { pubkey: poolMint, isSigner: false, isWritable: true },\n    { pubkey: feeAccount, isSigner: false, isWritable: true },\n    { pubkey: tokenProgramId, isSigner: false, isWritable: false },\n  ];\n\n  // optional depending on the build of token-swap program\n  if (programOwner) {\n    keys.push({ pubkey: programOwner, isSigner: false, isWritable: true });\n  }\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode(\n    {\n      instruction: 1, // Swap instruction\n      amountIn: new Numberu64(amountIn).toBuffer(),\n      minimumAmountOut: new Numberu64(minimumAmountOut).toBuffer(),\n    },\n    data\n  );\n\n  return new TransactionInstruction({\n    keys,\n    programId: swapProgramId,\n    data,\n  });\n};\n","import {\n  Account,\n  Connection,\n  PublicKey,\n  SystemProgram,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport { sendTransaction, useConnection } from \"./connection\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { Token, MintLayout, AccountLayout } from \"@solana/spl-token\";\nimport { notify } from \"./notifications\";\nimport {\n  cache,\n  getCachedAccount,\n  useUserAccounts,\n  useCachedPool,\n  getMultipleAccounts,\n} from \"./accounts\";\nimport {\n  programIds,\n  SWAP_HOST_FEE_ADDRESS,\n  SWAP_PROGRAM_OWNER_FEE_ADDRESS,\n  WRAPPED_SOL_MINT,\n} from \"./ids\";\nimport {\n  LiquidityComponent,\n  PoolInfo,\n  TokenAccount,\n  createInitSwapInstruction,\n  TokenSwapLayout,\n  depositInstruction,\n  withdrawInstruction,\n  TokenSwapLayoutLegacyV0 as TokenSwapLayoutV0,\n  TokenSwapLayoutV1,\n  swapInstruction,\n  PoolConfig,\n  depositExactOneInstruction,\n  withdrawExactOneInstruction,\n} from \"./../models\";\n\nconst LIQUIDITY_TOKEN_PRECISION = 8;\n\nexport const LIQUIDITY_PROVIDER_FEE = 0.003;\nexport const SERUM_FEE = 0.0005;\n\nexport const removeLiquidity = async (\n  connection: Connection,\n  wallet: any,\n  liquidityAmount: number,\n  account: TokenAccount,\n  pool?: PoolInfo\n) => {\n  if (!pool) {\n    throw new Error(\"Pool is required\");\n  }\n\n  notify({\n    message: \"Removing Liquidity...\",\n    description: \"Please review transactions to approve.\",\n    type: \"warn\",\n  });\n\n  // TODO get min amounts based on total supply and liquidity\n  const minAmount0 = 0;\n  const minAmount1 = 0;\n\n  const poolMint = await cache.queryMint(connection, pool.pubkeys.mint);\n  const accountA = await cache.queryAccount(\n    connection,\n    pool.pubkeys.holdingAccounts[0]\n  );\n  const accountB = await cache.queryAccount(\n    connection,\n    pool.pubkeys.holdingAccounts[1]\n  );\n  if (!poolMint.mintAuthority) {\n    throw new Error(\"Mint doesnt have authority\");\n  }\n  const authority = poolMint.mintAuthority;\n\n  const signers: Account[] = [];\n  const instructions: TransactionInstruction[] = [];\n  const cleanupInstructions: TransactionInstruction[] = [];\n\n  const accountRentExempt = await connection.getMinimumBalanceForRentExemption(\n    AccountLayout.span\n  );\n\n  const toAccounts: PublicKey[] = [\n    await findOrCreateAccountByMint(\n      wallet.publicKey,\n      wallet.publicKey,\n      instructions,\n      cleanupInstructions,\n      accountRentExempt,\n      accountA.info.mint,\n      signers\n    ),\n    await findOrCreateAccountByMint(\n      wallet.publicKey,\n      wallet.publicKey,\n      instructions,\n      cleanupInstructions,\n      accountRentExempt,\n      accountB.info.mint,\n      signers\n    ),\n  ];\n\n  instructions.push(\n    Token.createApproveInstruction(\n      programIds().token,\n      account.pubkey,\n      authority,\n      wallet.publicKey,\n      [],\n      liquidityAmount\n    )\n  );\n\n  // withdraw\n  instructions.push(\n    withdrawInstruction(\n      pool.pubkeys.account,\n      authority,\n      pool.pubkeys.mint,\n      pool.pubkeys.feeAccount,\n      account.pubkey,\n      pool.pubkeys.holdingAccounts[0],\n      pool.pubkeys.holdingAccounts[1],\n      toAccounts[0],\n      toAccounts[1],\n      pool.pubkeys.program,\n      programIds().token,\n      liquidityAmount,\n      minAmount0,\n      minAmount1\n    )\n  );\n\n  const deleteAccount = liquidityAmount === account.info.amount.toNumber();\n  if (deleteAccount) {\n    instructions.push(\n      Token.createCloseAccountInstruction(\n        programIds().token,\n        account.pubkey,\n        authority,\n        wallet.publicKey,\n        []\n      )\n    );\n  }\n\n  let tx = await sendTransaction(\n    connection,\n    wallet,\n    instructions.concat(cleanupInstructions),\n    signers\n  );\n\n  if (deleteAccount) {\n    cache.deleteAccount(account.pubkey);\n  }\n\n  notify({\n    message: \"Liquidity Returned. Thank you for your support.\",\n    type: \"success\",\n    description: `Transaction - ${tx}`,\n  });\n\n  return [\n    accountA.info.mint.equals(WRAPPED_SOL_MINT)\n      ? (wallet.publicKey as PublicKey)\n      : toAccounts[0],\n    accountB.info.mint.equals(WRAPPED_SOL_MINT)\n      ? (wallet.publicKey as PublicKey)\n      : toAccounts[1],\n  ];\n};\n\nexport const removeExactOneLiquidity = async (\n  connection: Connection,\n  wallet: any,\n  account: TokenAccount,\n  liquidityAmount: number,\n  tokenAmount: number,\n  tokenMint: string,\n  pool?: PoolInfo\n) => {\n  if (!pool) {\n    throw new Error(\"Pool is required\");\n  }\n\n  notify({\n    message: \"Removing Liquidity...\",\n    description: \"Please review transactions to approve.\",\n    type: \"warn\",\n  });\n  // Maximum number of LP tokens\n  // needs to be different math because the new instruction\n  const liquidityMaxAmount = liquidityAmount * (1 + SLIPPAGE);\n\n  const poolMint = await cache.queryMint(connection, pool.pubkeys.mint);\n  const accountA = await cache.queryAccount(\n    connection,\n    pool.pubkeys.holdingAccounts[0]\n  );\n  const accountB = await cache.queryAccount(\n    connection,\n    pool.pubkeys.holdingAccounts[1]\n  );\n  if (!poolMint.mintAuthority) {\n    throw new Error(\"Mint doesnt have authority\");\n  }\n\n  const tokenMatchAccount =\n    tokenMint === pool.pubkeys.holdingMints[0].toBase58() ? accountA : accountB;\n  const authority = poolMint.mintAuthority;\n\n  const signers: Account[] = [];\n  const instructions: TransactionInstruction[] = [];\n  const cleanupInstructions: TransactionInstruction[] = [];\n\n  const accountRentExempt = await connection.getMinimumBalanceForRentExemption(\n    AccountLayout.span\n  );\n\n  const toAccount: PublicKey = await findOrCreateAccountByMint(\n    wallet.publicKey,\n    wallet.publicKey,\n    instructions,\n    cleanupInstructions,\n    accountRentExempt,\n    tokenMatchAccount.info.mint,\n    signers\n  );\n\n  instructions.push(\n    Token.createApproveInstruction(\n      programIds().token,\n      account.pubkey,\n      authority,\n      wallet.publicKey,\n      [],\n      account.info.amount.toNumber() // liquidityAmount <- need math tuning\n    )\n  );\n\n  // withdraw exact one\n  instructions.push(\n    withdrawExactOneInstruction(\n      pool.pubkeys.account,\n      authority,\n      pool.pubkeys.mint,\n      account.pubkey,\n      pool.pubkeys.holdingAccounts[0],\n      pool.pubkeys.holdingAccounts[1],\n      toAccount,\n      pool.pubkeys.feeAccount,\n      pool.pubkeys.program,\n      programIds().token,\n      tokenAmount,\n      liquidityMaxAmount\n    )\n  );\n\n  let tx = await sendTransaction(\n    connection,\n    wallet,\n    instructions.concat(cleanupInstructions),\n    signers\n  );\n\n  notify({\n    message: \"Liquidity Returned. Thank you for your support.\",\n    type: \"success\",\n    description: `Transaction - ${tx}`,\n  });\n\n  return tokenMatchAccount.info.mint.equals(WRAPPED_SOL_MINT)\n    ? (wallet.publicKey as PublicKey)\n    : toAccount;\n};\n\nexport const swap = async (\n  connection: Connection,\n  wallet: any,\n  components: LiquidityComponent[],\n  SLIPPAGE: number,\n  pool?: PoolInfo\n) => {\n  if (!pool || !components[0].account) {\n    notify({\n      type: \"error\",\n      message: `Pool doesn't exsist.`,\n      description: `Swap trade cancelled`,\n    });\n    return;\n  }\n\n  // Uniswap whitepaper: https://uniswap.org/whitepaper.pdf\n  // see: https://uniswap.org/docs/v2/advanced-topics/pricing/\n  // as well as native uniswap v2 oracle: https://uniswap.org/docs/v2/core-concepts/oracles/\n  const amountIn = components[0].amount; // these two should include slippage\n  const minAmountOut = components[1].amount * (1 - SLIPPAGE);\n  const holdingA =\n    pool.pubkeys.holdingMints[0]?.toBase58() ===\n    components[0].account.info.mint.toBase58()\n      ? pool.pubkeys.holdingAccounts[0]\n      : pool.pubkeys.holdingAccounts[1];\n  const holdingB =\n    holdingA === pool.pubkeys.holdingAccounts[0]\n      ? pool.pubkeys.holdingAccounts[1]\n      : pool.pubkeys.holdingAccounts[0];\n\n  const poolMint = await cache.queryMint(connection, pool.pubkeys.mint);\n  if (!poolMint.mintAuthority || !pool.pubkeys.feeAccount) {\n    throw new Error(\"Mint doesnt have authority\");\n  }\n  const authority = poolMint.mintAuthority;\n\n  const instructions: TransactionInstruction[] = [];\n  const cleanupInstructions: TransactionInstruction[] = [];\n  const signers: Account[] = [];\n\n  const accountRentExempt = await connection.getMinimumBalanceForRentExemption(\n    AccountLayout.span\n  );\n\n  const fromAccount = getWrappedAccount(\n    instructions,\n    cleanupInstructions,\n    components[0].account,\n    wallet.publicKey,\n    amountIn + accountRentExempt,\n    signers\n  );\n\n  let toAccount = findOrCreateAccountByMint(\n    wallet.publicKey,\n    wallet.publicKey,\n    instructions,\n    cleanupInstructions,\n    accountRentExempt,\n    new PublicKey(components[1].mintAddress),\n    signers\n  );\n\n  // create approval for transfer transactions\n  instructions.push(\n    Token.createApproveInstruction(\n      programIds().token,\n      fromAccount,\n      authority,\n      wallet.publicKey,\n      [],\n      amountIn\n    )\n  );\n\n  let hostFeeAccount = SWAP_HOST_FEE_ADDRESS\n    ? findOrCreateAccountByMint(\n        wallet.publicKey,\n        SWAP_HOST_FEE_ADDRESS,\n        instructions,\n        cleanupInstructions,\n        accountRentExempt,\n        pool.pubkeys.mint,\n        signers\n      )\n    : undefined;\n\n  // swap\n  instructions.push(\n    swapInstruction(\n      pool.pubkeys.account,\n      authority,\n      fromAccount,\n      holdingA,\n      holdingB,\n      toAccount,\n      pool.pubkeys.mint,\n      pool.pubkeys.feeAccount,\n      pool.pubkeys.program,\n      programIds().token,\n      amountIn,\n      minAmountOut,\n      hostFeeAccount\n    )\n  );\n\n  let tx = await sendTransaction(\n    connection,\n    wallet,\n    instructions.concat(cleanupInstructions),\n    signers\n  );\n\n  notify({\n    message: \"Trade executed.\",\n    type: \"success\",\n    description: `Transaction - ${tx}`,\n  });\n};\n\nexport const addLiquidity = async (\n  connection: Connection,\n  wallet: any,\n  components: LiquidityComponent[],\n  slippage: number,\n  pool?: PoolInfo,\n  options?: PoolConfig,\n  depositType: string = \"both\"\n) => {\n  if (depositType === \"one\" && pool) {\n    await _addLiquidityExactOneExistingPool(\n      pool,\n      components[0],\n      connection,\n      wallet\n    );\n  } else if (!pool) {\n    if (!options) {\n      throw new Error(\"Options are required to create new pool.\");\n    }\n\n    await _addLiquidityNewPool(wallet, connection, components, options);\n  } else {\n    await _addLiquidityExistingPool(pool, components, connection, wallet);\n  }\n};\n\nconst getHoldings = (connection: Connection, accounts: string[]) => {\n  return accounts.map((acc) =>\n    cache.queryAccount(connection, new PublicKey(acc))\n  );\n};\n\nconst toPoolInfo = (item: any, program: PublicKey) => {\n  const mint = new PublicKey(item.data.tokenPool);\n  return {\n    pubkeys: {\n      account: item.pubkey,\n      program: program,\n      mint,\n      holdingMints: [] as PublicKey[],\n      holdingAccounts: [item.data.tokenAccountA, item.data.tokenAccountB].map(\n        (a) => new PublicKey(a)\n      ),\n    },\n    legacy: false,\n    raw: item,\n  } as PoolInfo;\n};\n\nexport const usePools = () => {\n  const connection = useConnection();\n  const [pools, setPools] = useState<PoolInfo[]>([]);\n\n  // initial query\n  useEffect(() => {\n    setPools([]);\n\n    const queryPools = async (swapId: PublicKey, isLegacy = false) => {\n      let poolsArray: PoolInfo[] = [];\n      (await connection.getProgramAccounts(swapId))\n        .filter(\n          (item) =>\n            item.account.data.length === TokenSwapLayout.span ||\n            item.account.data.length === TokenSwapLayoutV1.span ||\n            item.account.data.length === TokenSwapLayoutV0.span\n        )\n        .map((item) => {\n          let result = {\n            data: undefined as any,\n            account: item.account,\n            pubkey: item.pubkey,\n            init: async () => {},\n          };\n\n          const layout =\n            item.account.data.length === TokenSwapLayout.span\n              ? TokenSwapLayout\n              : item.account.data.length === TokenSwapLayoutV1.span\n              ? TokenSwapLayoutV1\n              : TokenSwapLayoutV0;\n\n          // handling of legacy layout can be removed soon...\n          if (layout === TokenSwapLayoutV0) {\n            result.data = layout.decode(item.account.data);\n            let pool = toPoolInfo(result, swapId);\n            pool.legacy = isLegacy;\n            poolsArray.push(pool as PoolInfo);\n\n            result.init = async () => {\n              try {\n                // TODO: this is not great\n                // Ideally SwapLayout stores hash of all the mints to make finding of pool for a pair easier\n                const holdings = await Promise.all(\n                  getHoldings(connection, [\n                    result.data.tokenAccountA,\n                    result.data.tokenAccountB,\n                  ])\n                );\n\n                pool.pubkeys.holdingMints = [\n                  holdings[0].info.mint,\n                  holdings[1].info.mint,\n                ] as PublicKey[];\n              } catch (err) {\n                console.log(err);\n              }\n            };\n          } else {\n            result.data = layout.decode(item.account.data);\n\n            let pool = toPoolInfo(result, swapId);\n            pool.legacy = isLegacy;\n            pool.pubkeys.feeAccount = new PublicKey(result.data.feeAccount);\n            pool.pubkeys.holdingMints = [\n              new PublicKey(result.data.mintA),\n              new PublicKey(result.data.mintB),\n            ] as PublicKey[];\n\n            poolsArray.push(pool as PoolInfo);\n          }\n\n          return result;\n        });\n\n      const toQuery = poolsArray\n        .map(\n          (p) =>\n            [\n              ...p.pubkeys.holdingAccounts.map((h) => h.toBase58()),\n              ...p.pubkeys.holdingMints.map((h) => h.toBase58()),\n              p.pubkeys.feeAccount?.toBase58(), // used to calculate volume aproximation\n              p.pubkeys.mint.toBase58(),\n            ].filter((p) => p) as string[]\n        )\n        .flat();\n\n      // This will pre-cache all accounts used by pools\n      // All those accounts are updated whenever there is a change\n      await getMultipleAccounts(connection, toQuery, \"single\").then(\n        ({ keys, array }) => {\n          return array.map((obj, index) => {\n            const pubKey = new PublicKey(keys[index]);\n            if (obj.data.length === AccountLayout.span) {\n              return cache.addAccount(pubKey, obj);\n            } else if (obj.data.length === MintLayout.span) {\n              if (!cache.getMint(pubKey)) {\n                return cache.addMint(pubKey, obj);\n              }\n            }\n\n            return obj;\n          }) as any[];\n        }\n      );\n\n      return poolsArray;\n    };\n\n    Promise.all([\n      queryPools(programIds().swap),\n      ...programIds().swap_legacy.map((leg) => queryPools(leg, true)),\n    ]).then((all) => {\n      setPools(all.flat());\n    });\n  }, [connection]);\n\n  useEffect(() => {\n    const subID = connection.onProgramAccountChange(\n      programIds().swap,\n      async (info) => {\n        const id = (info.accountId as unknown) as string;\n        if (info.accountInfo.data.length === programIds().swapLayout.span) {\n          const account = info.accountInfo;\n          const updated = {\n            data: programIds().swapLayout.decode(account.data),\n            account: account,\n            pubkey: new PublicKey(id),\n          };\n\n          const index =\n            pools &&\n            pools.findIndex((p) => p.pubkeys.account.toBase58() === id);\n          if (index && index >= 0 && pools) {\n            // TODO: check if account is empty?\n\n            const filtered = pools.filter((p, i) => i !== index);\n            setPools([...filtered, toPoolInfo(updated, programIds().swap)]);\n          } else {\n            let pool = toPoolInfo(updated, programIds().swap);\n\n            pool.pubkeys.feeAccount = new PublicKey(updated.data.feeAccount);\n            pool.pubkeys.holdingMints = [\n              new PublicKey(updated.data.mintA),\n              new PublicKey(updated.data.mintB),\n            ] as PublicKey[];\n\n            setPools([...pools, pool]);\n          }\n        }\n      },\n      \"singleGossip\"\n    );\n\n    return () => {\n      connection.removeProgramAccountChangeListener(subID);\n    };\n  }, [connection, pools]);\n\n  return { pools };\n};\n\nexport const usePoolForBasket = (mints: (string | undefined)[]) => {\n  const connection = useConnection();\n  const { pools } = useCachedPool();\n  const [pool, setPool] = useState<PoolInfo>();\n  const sortedMints = useMemo(() => [...mints].sort(), [...mints]); // eslint-disable-line\n  useEffect(() => {\n    (async () => {\n      // reset pool during query\n      setPool(undefined);\n      let matchingPool = pools\n        .filter((p) => !p.legacy)\n        .filter((p) =>\n          p.pubkeys.holdingMints\n            .map((a) => a.toBase58())\n            .sort()\n            .every((address, i) => address === sortedMints[i])\n        );\n\n      for (let i = 0; i < matchingPool.length; i++) {\n        const p = matchingPool[i];\n\n        const account = await cache.queryAccount(\n          connection,\n          p.pubkeys.holdingAccounts[0]\n        );\n\n        if (!account.info.amount.eqn(0)) {\n          setPool(p);\n          return;\n        }\n      }\n    })();\n  }, [connection, sortedMints, pools]);\n\n  return pool;\n};\n\nexport const useOwnedPools = (legacy = false) => {\n  const { pools } = useCachedPool(legacy);\n  const { userAccounts } = useUserAccounts();\n\n  const ownedPools = useMemo(() => {\n    const map = userAccounts.reduce((acc, item) => {\n      const key = item.info.mint.toBase58();\n      acc.set(key, [...(acc.get(key) || []), item]);\n      return acc;\n    }, new Map<string, TokenAccount[]>());\n\n    return pools\n      .filter((p) => map.has(p.pubkeys.mint.toBase58()) && p.legacy === legacy)\n      .map((item) => {\n        let feeAccount = item.pubkeys.feeAccount?.toBase58();\n        return map.get(item.pubkeys.mint.toBase58())?.map((a) => {\n          return {\n            account: a as TokenAccount,\n            isFeeAccount: feeAccount === a.pubkey.toBase58(),\n            pool: item,\n          };\n        }) as {\n          account: TokenAccount;\n          isFeeAccount: boolean;\n          pool: PoolInfo;\n        }[];\n      })\n      .flat();\n  }, [pools, userAccounts, legacy]);\n\n  return ownedPools;\n};\n\n// Allow for this much price movement in the pool before adding liquidity to the pool aborts\nconst SLIPPAGE = 0.005;\n\nasync function _addLiquidityExistingPool(\n  pool: PoolInfo,\n  components: LiquidityComponent[],\n  connection: Connection,\n  wallet: any\n) {\n  notify({\n    message: \"Adding Liquidity...\",\n    description: \"Please review transactions to approve.\",\n    type: \"warn\",\n  });\n\n  const poolMint = await cache.queryMint(connection, pool.pubkeys.mint);\n  if (!poolMint.mintAuthority) {\n    throw new Error(\"Mint doesnt have authority\");\n  }\n\n  if (!pool.pubkeys.feeAccount) {\n    throw new Error(\"Invald fee account\");\n  }\n\n  const accountA = await cache.queryAccount(\n    connection,\n    pool.pubkeys.holdingAccounts[0]\n  );\n  const accountB = await cache.queryAccount(\n    connection,\n    pool.pubkeys.holdingAccounts[1]\n  );\n\n  const reserve0 = accountA.info.amount.toNumber();\n  const reserve1 = accountB.info.amount.toNumber();\n  const fromA =\n    accountA.info.mint.toBase58() === components[0].mintAddress\n      ? components[0]\n      : components[1];\n  const fromB = fromA === components[0] ? components[1] : components[0];\n\n  if (!fromA.account || !fromB.account) {\n    throw new Error(\"Missing account info.\");\n  }\n\n  const supply = poolMint.supply.toNumber();\n  const authority = poolMint.mintAuthority;\n\n  // Uniswap whitepaper: https://uniswap.org/whitepaper.pdf\n  // see: https://uniswap.org/docs/v2/advanced-topics/pricing/\n  // as well as native uniswap v2 oracle: https://uniswap.org/docs/v2/core-concepts/oracles/\n  const amount0 = fromA.amount;\n  const amount1 = fromB.amount;\n\n  const liquidity = Math.min(\n    (amount0 * (1 - SLIPPAGE) * supply) / reserve0,\n    (amount1 * (1 - SLIPPAGE) * supply) / reserve1\n  );\n  const instructions: TransactionInstruction[] = [];\n  const cleanupInstructions: TransactionInstruction[] = [];\n\n  const signers: Account[] = [];\n\n  const accountRentExempt = await connection.getMinimumBalanceForRentExemption(\n    AccountLayout.span\n  );\n  const fromKeyA = getWrappedAccount(\n    instructions,\n    cleanupInstructions,\n    fromA.account,\n    wallet.publicKey,\n    amount0 + accountRentExempt,\n    signers\n  );\n  const fromKeyB = getWrappedAccount(\n    instructions,\n    cleanupInstructions,\n    fromB.account,\n    wallet.publicKey,\n    amount1 + accountRentExempt,\n    signers\n  );\n\n  let toAccount = findOrCreateAccountByMint(\n    wallet.publicKey,\n    wallet.publicKey,\n    instructions,\n    [],\n    accountRentExempt,\n    pool.pubkeys.mint,\n    signers,\n    new Set<string>([pool.pubkeys.feeAccount.toBase58()])\n  );\n\n  // create approval for transfer transactions\n  instructions.push(\n    Token.createApproveInstruction(\n      programIds().token,\n      fromKeyA,\n      authority,\n      wallet.publicKey,\n      [],\n      amount0\n    )\n  );\n\n  instructions.push(\n    Token.createApproveInstruction(\n      programIds().token,\n      fromKeyB,\n      authority,\n      wallet.publicKey,\n      [],\n      amount1\n    )\n  );\n\n  // deposit\n  instructions.push(\n    depositInstruction(\n      pool.pubkeys.account,\n      authority,\n      fromKeyA,\n      fromKeyB,\n      pool.pubkeys.holdingAccounts[0],\n      pool.pubkeys.holdingAccounts[1],\n      pool.pubkeys.mint,\n      toAccount,\n      pool.pubkeys.program,\n      programIds().token,\n      liquidity,\n      amount0,\n      amount1\n    )\n  );\n\n  let tx = await sendTransaction(\n    connection,\n    wallet,\n    instructions.concat(cleanupInstructions),\n    signers\n  );\n\n  notify({\n    message: \"Pool Funded. Happy trading.\",\n    type: \"success\",\n    description: `Transaction - ${tx}`,\n  });\n}\n\nasync function _addLiquidityExactOneExistingPool(\n  pool: PoolInfo,\n  component: LiquidityComponent,\n  connection: Connection,\n  wallet: any\n) {\n  notify({\n    message: \"Adding Liquidity...\",\n    description: \"Please review transactions to approve.\",\n    type: \"warn\",\n  });\n\n  const poolMint = await cache.queryMint(connection, pool.pubkeys.mint);\n  if (!poolMint.mintAuthority) {\n    throw new Error(\"Mint doesnt have authority\");\n  }\n\n  if (!pool.pubkeys.feeAccount) {\n    throw new Error(\"Invald fee account\");\n  }\n\n  const accountA = await cache.queryAccount(\n    connection,\n    pool.pubkeys.holdingAccounts[0]\n  );\n  const accountB = await cache.queryAccount(\n    connection,\n    pool.pubkeys.holdingAccounts[1]\n  );\n\n  const from = component;\n\n  if (!from.account) {\n    throw new Error(\"Missing account info.\");\n  }\n  const reserve =\n    accountA.info.mint.toBase58() === from.mintAddress\n      ? accountA.info.amount.toNumber()\n      : accountB.info.amount.toNumber();\n\n  const supply = poolMint.supply.toNumber();\n  const authority = poolMint.mintAuthority;\n\n  // Uniswap whitepaper: https://uniswap.org/whitepaper.pdf\n  // see: https://uniswap.org/docs/v2/advanced-topics/pricing/\n  // as well as native uniswap v2 oracle: https://uniswap.org/docs/v2/core-concepts/oracles/\n  const amount = from.amount;\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const _liquidityTokenTempMath = (amount * (1 - SLIPPAGE) * supply) / reserve;\n  const liquidityToken = 0;\n\n  const instructions: TransactionInstruction[] = [];\n  const cleanupInstructions: TransactionInstruction[] = [];\n\n  const signers: Account[] = [];\n\n  const accountRentExempt = await connection.getMinimumBalanceForRentExemption(\n    AccountLayout.span\n  );\n  const fromKey = getWrappedAccount(\n    instructions,\n    cleanupInstructions,\n    from.account,\n    wallet.publicKey,\n    amount + accountRentExempt,\n    signers\n  );\n\n  let toAccount = findOrCreateAccountByMint(\n    wallet.publicKey,\n    wallet.publicKey,\n    instructions,\n    [],\n    accountRentExempt,\n    pool.pubkeys.mint,\n    signers,\n    new Set<string>([pool.pubkeys.feeAccount.toBase58()])\n  );\n\n  // create approval for transfer transactions\n  instructions.push(\n    Token.createApproveInstruction(\n      programIds().token,\n      fromKey,\n      authority,\n      wallet.publicKey,\n      [],\n      amount\n    )\n  );\n\n  // deposit\n  instructions.push(\n    depositExactOneInstruction(\n      pool.pubkeys.account,\n      authority,\n      fromKey,\n      pool.pubkeys.holdingAccounts[0],\n      pool.pubkeys.holdingAccounts[1],\n      pool.pubkeys.mint,\n      toAccount,\n      pool.pubkeys.program,\n      programIds().token,\n      amount,\n      liquidityToken\n    )\n  );\n\n  let tx = await sendTransaction(\n    connection,\n    wallet,\n    instructions.concat(cleanupInstructions),\n    signers\n  );\n\n  notify({\n    message: \"Pool Funded. Happy trading.\",\n    type: \"success\",\n    description: `Transaction - ${tx}`,\n  });\n}\n\nfunction findOrCreateAccountByMint(\n  payer: PublicKey,\n  owner: PublicKey,\n  instructions: TransactionInstruction[],\n  cleanupInstructions: TransactionInstruction[],\n  accountRentExempt: number,\n  mint: PublicKey, // use to identify same type\n  signers: Account[],\n  excluded?: Set<string>\n): PublicKey {\n  const accountToFind = mint.toBase58();\n  const account = getCachedAccount(\n    (acc) =>\n      acc.info.mint.toBase58() === accountToFind &&\n      acc.info.owner.toBase58() === owner.toBase58() &&\n      (excluded === undefined || !excluded.has(acc.pubkey.toBase58()))\n  );\n  const isWrappedSol = accountToFind === WRAPPED_SOL_MINT.toBase58();\n\n  let toAccount: PublicKey;\n  if (account && !isWrappedSol) {\n    toAccount = account.pubkey;\n  } else {\n    // creating depositor pool account\n    const newToAccount = createSplAccount(\n      instructions,\n      payer,\n      accountRentExempt,\n      mint,\n      owner,\n      AccountLayout.span\n    );\n\n    toAccount = newToAccount.publicKey;\n    signers.push(newToAccount);\n\n    if (isWrappedSol) {\n      cleanupInstructions.push(\n        Token.createCloseAccountInstruction(\n          programIds().token,\n          toAccount,\n          payer,\n          payer,\n          []\n        )\n      );\n    }\n  }\n\n  return toAccount;\n}\n\nfunction estimateProceedsFromInput(\n  inputQuantityInPool: number,\n  proceedsQuantityInPool: number,\n  inputAmount: number\n): number {\n  return (\n    (proceedsQuantityInPool * inputAmount) / (inputQuantityInPool + inputAmount)\n  );\n}\n\nfunction estimateInputFromProceeds(\n  inputQuantityInPool: number,\n  proceedsQuantityInPool: number,\n  proceedsAmount: number\n): number | string {\n  if (proceedsAmount >= proceedsQuantityInPool) {\n    return \"Not possible\";\n  }\n\n  return (\n    (inputQuantityInPool * proceedsAmount) /\n    (proceedsQuantityInPool - proceedsAmount)\n  );\n}\n\nexport enum PoolOperation {\n  Add,\n  SwapGivenInput,\n  SwapGivenProceeds,\n}\n\nexport async function calculateDependentAmount(\n  connection: Connection,\n  independent: string,\n  amount: number,\n  pool: PoolInfo,\n  op: PoolOperation\n): Promise<number | string | undefined> {\n  const poolMint = await cache.queryMint(connection, pool.pubkeys.mint);\n  const accountA = await cache.queryAccount(\n    connection,\n    pool.pubkeys.holdingAccounts[0]\n  );\n  const amountA = accountA.info.amount.toNumber();\n\n  const accountB = await cache.queryAccount(\n    connection,\n    pool.pubkeys.holdingAccounts[1]\n  );\n  let amountB = accountB.info.amount.toNumber();\n\n  if (!poolMint.mintAuthority) {\n    throw new Error(\"Mint doesnt have authority\");\n  }\n\n  if (poolMint.supply.eqn(0)) {\n    return;\n  }\n\n  let offsetAmount = 0;\n  const offsetCurve = pool.raw?.data?.curve?.offset;\n  if (offsetCurve) {\n    offsetAmount = offsetCurve.token_b_offset;\n    amountB = amountB + offsetAmount;\n  }\n\n  const mintA = await cache.queryMint(connection, accountA.info.mint);\n  const mintB = await cache.queryMint(connection, accountB.info.mint);\n\n  if (!mintA || !mintB) {\n    return;\n  }\n\n  const isFirstIndependent = accountA.info.mint.toBase58() === independent;\n  const depPrecision = Math.pow(\n    10,\n    isFirstIndependent ? mintB.decimals : mintA.decimals\n  );\n  const indPrecision = Math.pow(\n    10,\n    isFirstIndependent ? mintA.decimals : mintB.decimals\n  );\n  const indAdjustedAmount = amount * indPrecision;\n\n  let indBasketQuantity = isFirstIndependent ? amountA : amountB;\n\n  let depBasketQuantity = isFirstIndependent ? amountB : amountA;\n\n  var depAdjustedAmount;\n\n  const constantPrice = pool.raw?.data?.curve?.constantPrice;\n  if (constantPrice) {\n    debugger;\n    depAdjustedAmount = (amount * depPrecision) / constantPrice.token_b_price;\n  } else {\n    switch (+op) {\n      case PoolOperation.Add:\n        depAdjustedAmount =\n          (depBasketQuantity / indBasketQuantity) * indAdjustedAmount;\n        break;\n      case PoolOperation.SwapGivenProceeds:\n        depAdjustedAmount = estimateInputFromProceeds(\n          depBasketQuantity,\n          indBasketQuantity,\n          indAdjustedAmount\n        );\n        break;\n      case PoolOperation.SwapGivenInput:\n        depAdjustedAmount = estimateProceedsFromInput(\n          indBasketQuantity,\n          depBasketQuantity,\n          indAdjustedAmount\n        );\n        break;\n    }\n  }\n\n  if (typeof depAdjustedAmount === \"string\") {\n    return depAdjustedAmount;\n  }\n  if (depAdjustedAmount === undefined) {\n    return undefined;\n  }\n  return depAdjustedAmount / depPrecision;\n}\n\n// TODO: add ui to customize curve type\nasync function _addLiquidityNewPool(\n  wallet: any,\n  connection: Connection,\n  components: LiquidityComponent[],\n  options: PoolConfig\n) {\n  notify({\n    message: \"Creating new pool...\",\n    description: \"Please review transactions to approve.\",\n    type: \"warn\",\n  });\n\n  if (components.some((c) => !c.account)) {\n    notify({\n      message: \"You need to have balance for all legs in the basket...\",\n      description: \"Please review inputs.\",\n      type: \"error\",\n    });\n    return;\n  }\n\n  let instructions: TransactionInstruction[] = [];\n  let cleanupInstructions: TransactionInstruction[] = [];\n\n  const liquidityTokenMint = new Account();\n  // Create account for pool liquidity token\n  instructions.push(\n    SystemProgram.createAccount({\n      fromPubkey: wallet.publicKey,\n      newAccountPubkey: liquidityTokenMint.publicKey,\n      lamports: await connection.getMinimumBalanceForRentExemption(\n        MintLayout.span\n      ),\n      space: MintLayout.span,\n      programId: programIds().token,\n    })\n  );\n\n  const tokenSwapAccount = new Account();\n\n  const [authority, nonce] = await PublicKey.findProgramAddress(\n    [tokenSwapAccount.publicKey.toBuffer()],\n    programIds().swap\n  );\n\n  // create mint for pool liquidity token\n  instructions.push(\n    Token.createInitMintInstruction(\n      programIds().token,\n      liquidityTokenMint.publicKey,\n      LIQUIDITY_TOKEN_PRECISION,\n      // pass control of liquidity mint to swap program\n      authority,\n      // swap program can freeze liquidity token mint\n      null\n    )\n  );\n\n  // Create holding accounts for\n  const accountRentExempt = await connection.getMinimumBalanceForRentExemption(\n    AccountLayout.span\n  );\n  const holdingAccounts: Account[] = [];\n  let signers: Account[] = [];\n\n  components.forEach((leg) => {\n    if (!leg.account) {\n      return;\n    }\n\n    const mintPublicKey = leg.account.info.mint;\n    // component account to store tokens I of N in liquidity poll\n    holdingAccounts.push(\n      createSplAccount(\n        instructions,\n        wallet.publicKey,\n        accountRentExempt,\n        mintPublicKey,\n        authority,\n        AccountLayout.span\n      )\n    );\n  });\n\n  // creating depositor pool account\n  const depositorAccount = createSplAccount(\n    instructions,\n    wallet.publicKey,\n    accountRentExempt,\n    liquidityTokenMint.publicKey,\n    wallet.publicKey,\n    AccountLayout.span\n  );\n\n  // creating fee pool account its set from env variable or to creater of the pool\n  // creater of the pool is not allowed in some versions of token-swap program\n  const feeAccount = createSplAccount(\n    instructions,\n    wallet.publicKey,\n    accountRentExempt,\n    liquidityTokenMint.publicKey,\n    SWAP_PROGRAM_OWNER_FEE_ADDRESS || wallet.publicKey,\n    AccountLayout.span\n  );\n\n  // create all accounts in one transaction\n  let tx = await sendTransaction(connection, wallet, instructions, [\n    liquidityTokenMint,\n    depositorAccount,\n    feeAccount,\n    ...holdingAccounts,\n    ...signers,\n  ]);\n\n  notify({\n    message: \"Accounts created\",\n    description: `Transaction ${tx}`,\n    type: \"success\",\n  });\n\n  notify({\n    message: \"Adding Liquidity...\",\n    description: \"Please review transactions to approve.\",\n    type: \"warn\",\n  });\n\n  signers = [];\n  instructions = [];\n  cleanupInstructions = [];\n\n  instructions.push(\n    SystemProgram.createAccount({\n      fromPubkey: wallet.publicKey,\n      newAccountPubkey: tokenSwapAccount.publicKey,\n      lamports: await connection.getMinimumBalanceForRentExemption(\n        programIds().swapLayout.span\n      ),\n      space: programIds().swapLayout.span,\n      programId: programIds().swap,\n    })\n  );\n\n  components.forEach((leg, i) => {\n    if (!leg.account) {\n      return;\n    }\n\n    // create temporary account for wrapped sol to perform transfer\n    const from = getWrappedAccount(\n      instructions,\n      cleanupInstructions,\n      leg.account,\n      wallet.publicKey,\n      leg.amount + accountRentExempt,\n      signers\n    );\n\n    instructions.push(\n      Token.createTransferInstruction(\n        programIds().token,\n        from,\n        holdingAccounts[i].publicKey,\n        wallet.publicKey,\n        [],\n        leg.amount\n      )\n    );\n  });\n\n  instructions.push(\n    createInitSwapInstruction(\n      tokenSwapAccount,\n      authority,\n      holdingAccounts[0].publicKey,\n      holdingAccounts[1].publicKey,\n      liquidityTokenMint.publicKey,\n      feeAccount.publicKey,\n      depositorAccount.publicKey,\n      programIds().token,\n      programIds().swap,\n      nonce,\n      options\n    )\n  );\n\n  // All instructions didn't fit in single transaction\n  // initialize and provide inital liquidity to swap in 2nd (this prevents loss of funds)\n  tx = await sendTransaction(\n    connection,\n    wallet,\n    instructions.concat(cleanupInstructions),\n    [tokenSwapAccount, ...signers]\n  );\n\n  notify({\n    message: \"Pool Funded. Happy trading.\",\n    type: \"success\",\n    description: `Transaction - ${tx}`,\n  });\n}\n\nfunction getWrappedAccount(\n  instructions: TransactionInstruction[],\n  cleanupInstructions: TransactionInstruction[],\n  toCheck: TokenAccount,\n  payer: PublicKey,\n  amount: number,\n  signers: Account[]\n) {\n  if (!toCheck.info.isNative) {\n    return toCheck.pubkey;\n  }\n\n  const account = new Account();\n  instructions.push(\n    SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: account.publicKey,\n      lamports: amount,\n      space: AccountLayout.span,\n      programId: programIds().token,\n    })\n  );\n\n  instructions.push(\n    Token.createInitAccountInstruction(\n      programIds().token,\n      WRAPPED_SOL_MINT,\n      account.publicKey,\n      payer\n    )\n  );\n\n  cleanupInstructions.push(\n    Token.createCloseAccountInstruction(\n      programIds().token,\n      account.publicKey,\n      payer,\n      payer,\n      []\n    )\n  );\n\n  signers.push(account);\n\n  return account.publicKey;\n}\n\nfunction createSplAccount(\n  instructions: TransactionInstruction[],\n  payer: PublicKey,\n  accountRentExempt: number,\n  mint: PublicKey,\n  owner: PublicKey,\n  space: number\n) {\n  const account = new Account();\n  instructions.push(\n    SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: account.publicKey,\n      lamports: accountRentExempt,\n      space,\n      programId: programIds().token,\n    })\n  );\n\n  instructions.push(\n    Token.createInitAccountInstruction(\n      programIds().token,\n      mint,\n      account.publicKey,\n      owner\n    )\n  );\n\n  return account;\n}\n","export * from \"./pool\";\nexport * from \"./account\";\nexport * from \"./tokenSwap\";\n","import React from \"react\";\nimport { notification } from \"antd\";\n// import Link from '../components/Link';\n\nexport function notify({\n  message = \"\",\n  description = undefined as any,\n  txid = \"\",\n  type = \"info\",\n  placement = \"bottomLeft\",\n}) {\n  if (txid) {\n    //   <Link\n    //     external\n    //     to={'https://explorer.solana.com/tx/' + txid}\n    //     style={{ color: '#0000ff' }}\n    //   >\n    //     View transaction {txid.slice(0, 8)}...{txid.slice(txid.length - 8)}\n    //   </Link>\n\n    description = <></>;\n  }\n  (notification as any)[type]({\n    message: <span style={{ color: \"black\" }}>{message}</span>,\n    description: (\n      <span style={{ color: \"black\", opacity: 0.5 }}>{description}</span>\n    ),\n    placement,\n    style: {\n      backgroundColor: \"white\",\n    },\n  });\n}\n","import EventEmitter from \"eventemitter3\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { notify } from \"./notifications\";\n\nexport class SolongAdapter extends EventEmitter {\n  _publicKey: any;\n  _onProcess: boolean;\n  constructor(providerUrl: string, network: string) {\n    super();\n    this._publicKey = null;\n    this._onProcess = false;\n    this.connect = this.connect.bind(this);\n  }\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  async signTransaction(transaction: any) {\n    return (window as any).solong.signTransaction(transaction);\n  }\n\n  connect() {\n    if (this._onProcess) {\n      return;\n    }\n\n    if ((window as any).solong === undefined) {\n      notify({\n        message: \"Solong Error\",\n        description: \"Please install solong wallet from Chrome \",\n      });\n      return;\n    }\n\n    this._onProcess = true;\n    console.log(\"solong helper select account\");\n    (window as any).solong\n      .selectAccount()\n      .then((account: any) => {\n        this._publicKey = new PublicKey(account);\n        console.log(\"window solong select:\", account, \"this:\", this);\n        this.emit(\"connect\", this._publicKey);\n      })\n      .catch(() => {\n        this.disconnect();\n      })\n      .finally(() => {\n        this._onProcess = false;\n      });\n  }\n\n  disconnect() {\n    if (this._publicKey) {\n      this._publicKey = null;\n      this.emit(\"disconnect\");\n    }\n  }\n}\n","import React, { useContext, useEffect, useMemo, useState } from \"react\";\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\nimport { notify } from \"./notifications\";\nimport { useConnectionConfig } from \"./connection\";\nimport { useLocalStorageState } from \"./utils\";\nimport { SolongAdapter } from \"./solong_adapter\";\n\nexport const WALLET_PROVIDERS = [\n  { name: \"sollet.io\", url: \"https://www.sollet.io\" },\n  { name: \"solongwallet.com\", url: \"http://solongwallet.com\" },\n  { name: \"solflare.com\", url: \"https://solflare.com/access-wallet\" },\n  { name: \"mathwallet.org\", url: \"https://www.mathwallet.org\" },\n];\n\nconst WalletContext = React.createContext<any>(null);\n\nexport function WalletProvider({ children = null as any }) {\n  const { endpoint } = useConnectionConfig();\n  const [providerUrl, setProviderUrl] = useLocalStorageState(\n    \"walletProvider\",\n    \"https://www.sollet.io\"\n  );\n  const wallet = useMemo(() => {\n    console.log(\"use new provider:\", providerUrl, \" endpoint:\", endpoint);\n    if (providerUrl === \"http://solongwallet.com\") {\n      return new SolongAdapter(providerUrl, endpoint);\n    } else {\n      return new Wallet(providerUrl, endpoint);\n    }\n  }, [providerUrl, endpoint]);\n\n  const [connected, setConnected] = useState(false);\n  useEffect(() => {\n    console.log(\"trying to connect\");\n    wallet.on(\"connect\", () => {\n      console.log(\"connected\");\n      setConnected(true);\n      let walletPublicKey = wallet.publicKey.toBase58();\n      let keyToDisplay =\n        walletPublicKey.length > 20\n          ? `${walletPublicKey.substring(0, 7)}.....${walletPublicKey.substring(\n              walletPublicKey.length - 7,\n              walletPublicKey.length\n            )}`\n          : walletPublicKey;\n\n      notify({\n        message: \"Wallet update\",\n        description: \"Connected to wallet \" + keyToDisplay,\n      });\n    });\n    wallet.on(\"disconnect\", () => {\n      setConnected(false);\n      notify({\n        message: \"Wallet update\",\n        description: \"Disconnected from wallet\",\n      });\n    });\n    return () => {\n      wallet.disconnect();\n      setConnected(false);\n    };\n  }, [wallet]);\n  return (\n    <WalletContext.Provider\n      value={{\n        wallet,\n        connected,\n        providerUrl,\n        setProviderUrl,\n        providerName:\n          WALLET_PROVIDERS.find(({ url }) => url === providerUrl)?.name ??\n          providerUrl,\n      }}\n    >\n      {children}\n    </WalletContext.Provider>\n  );\n}\n\nexport function useWallet() {\n  const context = useContext(WalletContext);\n  return {\n    connected: context.connected,\n    wallet: context.wallet,\n    providerUrl: context.providerUrl,\n    setProvider: context.setProviderUrl,\n    providerName: context.providerName,\n  };\n}\n"],"sourceRoot":""}